(function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    "use strict";
    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    function DOMEval(code, doc) {
        doc = doc || document;
        var script = doc.createElement("script");
        script.text = code;
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    var version = "3.2.1", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },
        each: function(callback) {
            return jQuery.each(this, callback);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },
        isWindow: function(obj) {
            return obj != null && obj === obj.window;
        },
        isNumeric: function(obj) {
            var type = jQuery.type(obj);
            return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
        },
        isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(code) {
            DOMEval(code);
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (;i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (;j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var tmp, args, proxy;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: Date.now,
        support: support
    });
    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = jQuery.type(obj);
        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for (;i < len; i++) {
                if (list[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + identifier + ")"),
            CLASS: new RegExp("^\\.(" + identifier + ")"),
            TAG: new RegExp("^(" + identifier + "|[*])"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
                if (ch === "\0") {
                    return "�";
                }
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            return "\\" + ch;
        }, unloadHandler = function() {
            setDocument();
        }, disabledAncestor = addCombinator(function(elem) {
            return elem.disabled === true && ("form" in elem || "label" in elem);
        }, {
            dir: "parentNode",
            next: "legend"
        });
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        if (nodeType !== 1) {
                            newContext = context;
                            newSelector = selector;
                        } else if (context.nodeName.toLowerCase() !== "object") {
                            if (nid = context.getAttribute("id")) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute("id", nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            while (i--) {
                                groups[i] = "#" + nid + " " + toSelector(groups[i]);
                            }
                            newSelector = groups.join(",");
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, newContext.querySelectorAll(newSelector));
                                return results;
                            } catch (qsaError) {} finally {
                                if (nid === expando) {
                                    context.removeAttribute("id");
                                }
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var el = document.createElement("fieldset");
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally {
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                el = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        function createDisabledPseudo(disabled) {
            return function(elem) {
                if ("form" in elem) {
                    if (elem.parentNode && elem.disabled === false) {
                        if ("label" in elem) {
                            if ("label" in elem.parentNode) {
                                return elem.parentNode.disabled === disabled;
                            } else {
                                return elem.disabled === disabled;
                            }
                        }
                        return elem.isDisabled === disabled || elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                } else if ("label" in elem) {
                    return elem.disabled === disabled;
                }
                return false;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                    subWindow.addEventListener("unload", unloadHandler, false);
                } else if (subWindow.attachEvent) {
                    subWindow.attachEvent("onunload", unloadHandler);
                }
            }
            support.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(el) {
                el.appendChild(document.createComment(""));
                return !el.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function(el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [ elem ] : [];
                    }
                };
            } else {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) {
                                return [ elem ];
                            }
                            elems = context.getElementsByName(id);
                            i = 0;
                            while (elem = elems[i++]) {
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) {
                                    return [ elem ];
                                }
                            }
                        }
                        return [];
                    }
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function(el) {
                    docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!el.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                        rbuggyQSA.push("~=");
                    }
                    if (!el.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                    }
                });
                assert(function(el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");
                    if (el.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }
                    if (el.querySelectorAll(":enabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(el) {
                    support.disconnectedMatch = matches.call(el, "*");
                    matches.call(el, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [ dirruns, diff ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: createDisabledPseudo(false),
                disabled: createDisabledPseudo(true),
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
                return false;
            } : function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if (skip && skip === elem.nodeName.toLowerCase()) {
                                elem = elem[dir] || elem;
                            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[key] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) {
                    outermostContext = context === document || context || outermost;
                }
                for (;i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        if (!context && elem.ownerDocument !== document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                        }
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context || document, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        });
        if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function(elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function(n, elem) {
        var matched = [];
        for (;n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function(elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }
        if (risSimple.test(qualifier)) {
            return jQuery.filter(qualifier, elements, not);
        }
        qualifier = jQuery.filter(qualifier, elements);
        return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
            return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                match = [ null, selector, null ];
            } else {
                match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            if (jQuery.isFunction(this[match])) {
                                this[match](context[match]);
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem) {
                        this[0] = elem;
                        this.length = 1;
                    }
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || root).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for (;i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
                for (;i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            if (nodeName(elem, "iframe")) {
                return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
                elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (;queue.length; firingIndex = -1) {
                memory = queue.shift();
                while (++firingIndex < list.length) {
                    if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                        firingIndex = list.length;
                        memory = false;
                    }
                }
            }
            if (!options.memory) {
                memory = false;
            }
            firing = false;
            if (locked) {
                if (memory) {
                    list = [];
                } else {
                    list = "";
                }
            }
        }, self = {
            add: function() {
                if (list) {
                    if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                    }
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            if (jQuery.isFunction(arg)) {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && jQuery.type(arg) !== "string") {
                                add(arg);
                            }
                        });
                    })(arguments);
                    if (memory && !firing) {
                        fire();
                    }
                }
                return this;
            },
            remove: function() {
                jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);
                        if (index <= firingIndex) {
                            firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            empty: function() {
                if (list) {
                    list = [];
                }
                return this;
            },
            disable: function() {
                locked = queue = [];
                list = memory = "";
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                locked = queue = [];
                if (!memory && !firing) {
                    list = memory = "";
                }
                return this;
            },
            locked: function() {
                return !!locked;
            },
            fireWith: function(context, args) {
                if (!locked) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    queue.push(args);
                    if (!firing) {
                        fire();
                    }
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            if (value && jQuery.isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && jQuery.isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [ value ].slice(noValue));
            }
        } catch (value) {
            reject.apply(undefined, [ value ]);
        }
    }
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2 ], [ "resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected" ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                catch: function(fn) {
                    return promise.then(null, fn);
                },
                pipe: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                } else {
                                    newDefer[tuple[0] + "With"](this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                then: function(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                        return function() {
                            var that = this, args = arguments, mightThrow = function() {
                                var returned, then;
                                if (depth < maxDepth) {
                                    return;
                                }
                                returned = handler.apply(that, args);
                                if (returned === deferred.promise()) {
                                    throw new TypeError("Thenable self-resolution");
                                }
                                then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                                if (jQuery.isFunction(then)) {
                                    if (special) {
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                    } else {
                                        maxDepth++;
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                    }
                                } else {
                                    if (handler !== Identity) {
                                        that = undefined;
                                        args = [ returned ];
                                    }
                                    (special || deferred.resolveWith)(that, args);
                                }
                            }, process = special ? mightThrow : function() {
                                try {
                                    mightThrow();
                                } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) {
                                        jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                    }
                                    if (depth + 1 >= maxDepth) {
                                        if (handler !== Thrower) {
                                            that = undefined;
                                            args = [ e ];
                                        }
                                        deferred.rejectWith(that, args);
                                    }
                                }
                            };
                            if (depth) {
                                process();
                            } else {
                                if (jQuery.Deferred.getStackHook) {
                                    process.stackTrace = jQuery.Deferred.getStackHook();
                                }
                                window.setTimeout(process);
                            }
                        };
                    }
                    return jQuery.Deferred(function(newDefer) {
                        tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                        tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));
                        tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
                    }).promise();
                },
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function() {
                        state = stateString;
                    }, tuples[3 - i][2].disable, tuples[0][2].lock);
                }
                list.add(tuple[3].fire);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), master = jQuery.Deferred(), updateFunc = function(i) {
                return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (!--remaining) {
                        master.resolveWith(resolveContexts, resolveValues);
                    }
                };
            };
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }
            return master.promise();
        }
    });
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function(error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
    };
    jQuery.readyException = function(error) {
        window.setTimeout(function() {
            throw error;
        });
    };
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [ jQuery ]);
        }
    });
    jQuery.ready.then = readyList.then;
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }
    if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener("DOMContentLoaded", completed);
        window.addEventListener("load", completed);
    }
    var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (;i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        if (chainable) {
            return elems;
        }
        if (bulk) {
            return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
    };
    var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
                cache[jQuery.camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[jQuery.camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function(owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
        },
        access: function(owner, key, value) {
            if (key === undefined || key && typeof key === "string" && value === undefined) {
                return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(jQuery.camelCase);
                } else {
                    key = jQuery.camelCase(key);
                    key = key in cache ? [ key ] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while (i--) {
                    delete cache[key[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") {
            return true;
        }
        if (data === "false") {
            return false;
        }
        if (data === "null") {
            return null;
        }
        if (data === +data + "") {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) {}
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") {
                return this.each(function() {
                    dataUser.set(this, key);
                });
            }
            return access(this, function(value) {
                var data;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function() {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [ type + "queue", key ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
    };
    var swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
        } : function() {
            return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            unit = unit || initialInUnit[3];
            valueParts = valueParts || [];
            initialInUnit = +initial || 1;
            do {
                scale = scale || ".5";
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);
            } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
            return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
            display = "block";
        }
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            display = elem.style.display;
            if (show) {
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) {
                        elem.style.display = "";
                    }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== "none") {
                    values[index] = "none";
                    dataPriv.set(elem, "display", display);
                }
            }
        }
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
    var rscriptType = /^$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
        } else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([ context ], ret);
        }
        return ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (;i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (;i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (jQuery.type(elem) === "object") {
                    jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = "";
                }
            }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (contains) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function() {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    var documentElement = document.documentElement;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
            if (typeof selector !== "string") {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function(event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || "").match(rnothtmlwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(rnothtmlwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
            }
        },
        dispatch: function(nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
                for (;cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: jQuery.isFunction(hook) ? function() {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function() {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        char: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function(event) {
            var button = event.button;
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }
                if (button & 2) {
                    return 3;
                }
                if (button & 4) {
                    return 2;
                }
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(">tbody", elem)[0] || elem;
        }
        return elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
        if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
                var self = collection.eq(index);
                if (isFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;
                for (;i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src) {
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ""), doc);
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (;(node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
        },
        cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (;(elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function(selector) {
            return remove(this, selector, true);
        },
        remove: function(selector) {
            return remove(this, selector);
        },
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = "";
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    (function() {
        function computeStyleTests() {
            if (!div) {
                return;
            }
            div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
            div.innerHTML = "";
            documentElement.appendChild(container);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = divStyle.marginLeft === "2px";
            boxSizingReliableVal = divStyle.width === "4px";
            div.style.marginRight = "50%";
            pixelMarginRightVal = divStyle.marginRight === "4px";
            documentElement.removeChild(container);
            div = null;
        }
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement("div"), div = document.createElement("div");
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
        container.appendChild(div);
        jQuery.extend(support, {
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelMarginRight: function() {
                computeStyleTests();
                return pixelMarginRightVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            }
        });
    })();
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "Moz", "ms" ], emptyStyle = document.createElement("div").style;
    function vendorPropName(name) {
        if (name in emptyStyle) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function finalPropName(name) {
        var ret = jQuery.cssProps[name];
        if (!ret) {
            ret = jQuery.cssProps[name] = vendorPropName(name) || name;
        }
        return ret;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i, val = 0;
        if (extra === (isBorderBox ? "border" : "content")) {
            i = 4;
        } else {
            i = name === "width" ? 1 : 0;
        }
        for (;i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox, styles = getStyles(elem), val = curCSS(elem, name, styles), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (rnumnonpx.test(val)) {
            return val;
        }
        valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
        if (val === "auto") {
            val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
        }
        val = parseFloat(val) || 0;
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: true,
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            float: "cssFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = "number";
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === "number") {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[name] = value;
                    value = jQuery.css(elem, name);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
                marginLeft: 0
            }, function() {
                return elem.getBoundingClientRect().left;
            })) + "px";
        }
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
        }
    }
    function createFxNow() {
        window.setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }
        if (isBox && elem.nodeType === 1) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([ elem ], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([ elem ]);
                }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    if (!propTween) {
                        anim.done(function() {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        propTween = false;
        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, "fxshow", {
                        display: restoreDisplay
                    });
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    showHide([ elem ], true);
                }
                anim.done(function() {
                    if (!hidden) {
                        showHide([ elem ]);
                    }
                    dataPriv.remove(elem, "fxshow");
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            }
            if (!length) {
                deferred.notifyWith(elem, [ animation, 1, 0 ]);
            }
            deferred.resolveWith(elem, [ animation ]);
            return false;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {},
                easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                    deferred.notifyWith(elem, [ animation, 1, 0 ]);
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (jQuery.isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [ function(prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            } ]
        },
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [ defaultPrefilter ],
        prefilter: function(callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || dataPriv.get(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (inProgress) {
            return;
        }
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function() {
                window.clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }
                    return -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            if (typeof value === "string" && value) {
                classes = value.match(rnothtmlwhite) || [];
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr("class", "");
            }
            if (typeof value === "string" && value) {
                classes = value.match(rnothtmlwhite) || [];
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function() {
                var className, i, self, classNames;
                if (type === "string") {
                    i = 0;
                    self = jQuery(this);
                    classNames = value.match(rnothtmlwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, "__className__", className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                    }
                }
            });
        },
        hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    if (typeof ret === "string") {
                        return ret.replace(rreturn, "");
                    }
                    return ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") > -1) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    support.focusin = "onfocusin" in window;
    if (!support.focusin) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = jQuery.now();
    var rquery = /\?/;
    jQuery.parseXML = function(data) {
        var xml;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
            var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                if (val == null) {
                    return null;
                }
                if (Array.isArray(val)) {
                    return jQuery.map(val, function(val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                    });
                }
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": JSON.parse,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                    return completed ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (completed == null) {
                        s.mimeType = type;
                    }
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (completed) {
                            jqXHR.always(map[jqXHR.status]);
                        } else {
                            for (code in map) {
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        }
                    }
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [ "" ];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);
                if (s.data) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
                }
                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                if (completed) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }
                    done(-1, e);
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (completed) {
                    return;
                }
                completed = true;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            throws: true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;
            if (this[0]) {
                if (jQuery.isFunction(html)) {
                    html = html.call(this[0]);
                }
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    };
    var xhrSuccessStatus = {
        0: 200,
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function(type) {
                        return function() {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {
                                    if (typeof xhr.status !== "number") {
                                        complete(0, "error");
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                        binary: xhr.response
                                    } : {
                                        text: xhr.responseText
                                    }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = callback("error");
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function() {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback("abort");
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    support.createHTMLDocument = function() {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    }();
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
            return [];
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
            return [ context.createElement(parsed[1]) ];
        }
        parsed = buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function(jqXHR, status) {
                self.each(function() {
                    callback.apply(this, response || [ jqXHR.responseText, status, jqXHR ]);
                });
            });
        }
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var doc, docElem, rect, win, elem = this[0];
            if (!elem) {
                return;
            }
            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }
            rect = elem.getBoundingClientRect();
            doc = elem.ownerDocument;
            docElem = doc.documentElement;
            win = doc.defaultView;
            return {
                top: rect.top + win.pageYOffset - docElem.clientTop,
                left: rect.left + win.pageXOffset - docElem.clientLeft
            };
        },
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset = {
                    top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
                    left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
                };
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win;
                if (jQuery.isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.fn.extend({
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    jQuery.holdReady = function(hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
});

(function(window) {
    "use strict";
    function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        return function() {
            var code = arguments[0], template = arguments[1], message = "[" + (module ? module + ":" : "") + code + "] ", templateArgs = sliceArgs(arguments, 2).map(function(arg) {
                return toDebugString(arg, minErrConfig.objectMaxDepth);
            }), paramPrefix, i;
            message += template.replace(/\{\d+\}/g, function(match) {
                var index = +match.slice(1, -1);
                if (index < templateArgs.length) {
                    return templateArgs[index];
                }
                return match;
            });
            message += "\nhttp://errors.angularjs.org/1.6.4/" + (module ? module + "/" : "") + code;
            for (i = 0, paramPrefix = "?"; i < templateArgs.length; i++, paramPrefix = "&") {
                message += paramPrefix + "p" + i + "=" + encodeURIComponent(templateArgs[i]);
            }
            return new ErrorConstructor(message);
        };
    }
    var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
    var VALIDITY_STATE_PROPERTY = "validity";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var minErrConfig = {
        objectMaxDepth: 5
    };
    function errorHandlingConfig(config) {
        if (isObject(config)) {
            if (isDefined(config.objectMaxDepth)) {
                minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth) ? config.objectMaxDepth : NaN;
            }
        } else {
            return minErrConfig;
        }
    }
    function isValidObjectMaxDepth(maxDepth) {
        return isNumber(maxDepth) && maxDepth > 0;
    }
    var lowercase = function(string) {
        return isString(string) ? string.toLowerCase() : string;
    };
    var uppercase = function(string) {
        return isString(string) ? string.toUpperCase() : string;
    };
    var manualLowercase = function(s) {
        return isString(s) ? s.replace(/[A-Z]/g, function(ch) {
            return String.fromCharCode(ch.charCodeAt(0) | 32);
        }) : s;
    };
    var manualUppercase = function(s) {
        return isString(s) ? s.replace(/[a-z]/g, function(ch) {
            return String.fromCharCode(ch.charCodeAt(0) & ~32);
        }) : s;
    };
    if ("i" !== "I".toLowerCase()) {
        lowercase = manualLowercase;
        uppercase = manualUppercase;
    }
    var msie, jqLite, jQuery, slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, getPrototypeOf = Object.getPrototypeOf, ngMinErr = minErr("ng"), angular = window.angular || (window.angular = {}), angularModule, uid = 0;
    msie = window.document.documentMode;
    function isArrayLike(obj) {
        if (obj == null || isWindow(obj)) return false;
        if (isArray(obj) || isString(obj) || jqLite && obj instanceof jqLite) return true;
        var length = "length" in Object(obj) && obj.length;
        return isNumber(length) && (length >= 0 && (length - 1 in obj || obj instanceof Array) || typeof obj.item === "function");
    }
    function forEach(obj, iterator, context) {
        var key, length;
        if (obj) {
            if (isFunction(obj)) {
                for (key in obj) {
                    if (key !== "prototype" && key !== "length" && key !== "name" && obj.hasOwnProperty(key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else if (isArray(obj) || isArrayLike(obj)) {
                var isPrimitive = typeof obj !== "object";
                for (key = 0, length = obj.length; key < length; key++) {
                    if (isPrimitive || key in obj) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else if (obj.forEach && obj.forEach !== forEach) {
                obj.forEach(iterator, context, obj);
            } else if (isBlankObject(obj)) {
                for (key in obj) {
                    iterator.call(context, obj[key], key, obj);
                }
            } else if (typeof obj.hasOwnProperty === "function") {
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else {
                for (key in obj) {
                    if (hasOwnProperty.call(obj, key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            }
        }
        return obj;
    }
    function forEachSorted(obj, iterator, context) {
        var keys = Object.keys(obj).sort();
        for (var i = 0; i < keys.length; i++) {
            iterator.call(context, obj[keys[i]], keys[i]);
        }
        return keys;
    }
    function reverseParams(iteratorFn) {
        return function(value, key) {
            iteratorFn(key, value);
        };
    }
    function nextUid() {
        return ++uid;
    }
    function setHashKey(obj, h) {
        if (h) {
            obj.$$hashKey = h;
        } else {
            delete obj.$$hashKey;
        }
    }
    function baseExtend(dst, objs, deep) {
        var h = dst.$$hashKey;
        for (var i = 0, ii = objs.length; i < ii; ++i) {
            var obj = objs[i];
            if (!isObject(obj) && !isFunction(obj)) continue;
            var keys = Object.keys(obj);
            for (var j = 0, jj = keys.length; j < jj; j++) {
                var key = keys[j];
                var src = obj[key];
                if (deep && isObject(src)) {
                    if (isDate(src)) {
                        dst[key] = new Date(src.valueOf());
                    } else if (isRegExp(src)) {
                        dst[key] = new RegExp(src);
                    } else if (src.nodeName) {
                        dst[key] = src.cloneNode(true);
                    } else if (isElement(src)) {
                        dst[key] = src.clone();
                    } else {
                        if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
                        baseExtend(dst[key], [ src ], true);
                    }
                } else {
                    dst[key] = src;
                }
            }
        }
        setHashKey(dst, h);
        return dst;
    }
    function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), false);
    }
    function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), true);
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    var isNumberNaN = Number.isNaN || function isNumberNaN(num) {
        return num !== num;
    };
    function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
    }
    function noop() {}
    noop.$inject = [];
    function identity($) {
        return $;
    }
    identity.$inject = [];
    function valueFn(value) {
        return function valueRef() {
            return value;
        };
    }
    function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== toString;
    }
    function isUndefined(value) {
        return typeof value === "undefined";
    }
    function isDefined(value) {
        return typeof value !== "undefined";
    }
    function isObject(value) {
        return value !== null && typeof value === "object";
    }
    function isBlankObject(value) {
        return value !== null && typeof value === "object" && !getPrototypeOf(value);
    }
    function isString(value) {
        return typeof value === "string";
    }
    function isNumber(value) {
        return typeof value === "number";
    }
    function isDate(value) {
        return toString.call(value) === "[object Date]";
    }
    var isArray = Array.isArray;
    function isFunction(value) {
        return typeof value === "function";
    }
    function isRegExp(value) {
        return toString.call(value) === "[object RegExp]";
    }
    function isWindow(obj) {
        return obj && obj.window === obj;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isFile(obj) {
        return toString.call(obj) === "[object File]";
    }
    function isFormData(obj) {
        return toString.call(obj) === "[object FormData]";
    }
    function isBlob(obj) {
        return toString.call(obj) === "[object Blob]";
    }
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
    }
    var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
    function isTypedArray(value) {
        return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
    }
    function isArrayBuffer(obj) {
        return toString.call(obj) === "[object ArrayBuffer]";
    }
    var trim = function(value) {
        return isString(value) ? value.trim() : value;
    };
    var escapeForRegexp = function(s) {
        return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    };
    function isElement(node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    }
    function makeMap(str) {
        var obj = {}, items = str.split(","), i;
        for (i = 0; i < items.length; i++) {
            obj[items[i]] = true;
        }
        return obj;
    }
    function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
    }
    function includes(array, obj) {
        return Array.prototype.indexOf.call(array, obj) !== -1;
    }
    function arrayRemove(array, value) {
        var index = array.indexOf(value);
        if (index >= 0) {
            array.splice(index, 1);
        }
        return index;
    }
    function copy(source, destination, maxDepth) {
        var stackSource = [];
        var stackDest = [];
        maxDepth = isValidObjectMaxDepth(maxDepth) ? maxDepth : NaN;
        if (destination) {
            if (isTypedArray(destination) || isArrayBuffer(destination)) {
                throw ngMinErr("cpta", "Can't copy! TypedArray destination cannot be mutated.");
            }
            if (source === destination) {
                throw ngMinErr("cpi", "Can't copy! Source and destination are identical.");
            }
            if (isArray(destination)) {
                destination.length = 0;
            } else {
                forEach(destination, function(value, key) {
                    if (key !== "$$hashKey") {
                        delete destination[key];
                    }
                });
            }
            stackSource.push(source);
            stackDest.push(destination);
            return copyRecurse(source, destination, maxDepth);
        }
        return copyElement(source, maxDepth);
        function copyRecurse(source, destination, maxDepth) {
            maxDepth--;
            if (maxDepth < 0) {
                return "...";
            }
            var h = destination.$$hashKey;
            var key;
            if (isArray(source)) {
                for (var i = 0, ii = source.length; i < ii; i++) {
                    destination.push(copyElement(source[i], maxDepth));
                }
            } else if (isBlankObject(source)) {
                for (key in source) {
                    destination[key] = copyElement(source[key], maxDepth);
                }
            } else if (source && typeof source.hasOwnProperty === "function") {
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        destination[key] = copyElement(source[key], maxDepth);
                    }
                }
            } else {
                for (key in source) {
                    if (hasOwnProperty.call(source, key)) {
                        destination[key] = copyElement(source[key], maxDepth);
                    }
                }
            }
            setHashKey(destination, h);
            return destination;
        }
        function copyElement(source, maxDepth) {
            if (!isObject(source)) {
                return source;
            }
            var index = stackSource.indexOf(source);
            if (index !== -1) {
                return stackDest[index];
            }
            if (isWindow(source) || isScope(source)) {
                throw ngMinErr("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
            }
            var needsRecurse = false;
            var destination = copyType(source);
            if (destination === undefined) {
                destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
                needsRecurse = true;
            }
            stackSource.push(source);
            stackDest.push(destination);
            return needsRecurse ? copyRecurse(source, destination, maxDepth) : destination;
        }
        function copyType(source) {
            switch (toString.call(source)) {
              case "[object Int8Array]":
              case "[object Int16Array]":
              case "[object Int32Array]":
              case "[object Float32Array]":
              case "[object Float64Array]":
              case "[object Uint8Array]":
              case "[object Uint8ClampedArray]":
              case "[object Uint16Array]":
              case "[object Uint32Array]":
                return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

              case "[object ArrayBuffer]":
                if (!source.slice) {
                    var copied = new ArrayBuffer(source.byteLength);
                    new Uint8Array(copied).set(new Uint8Array(source));
                    return copied;
                }
                return source.slice(0);

              case "[object Boolean]":
              case "[object Number]":
              case "[object String]":
              case "[object Date]":
                return new source.constructor(source.valueOf());

              case "[object RegExp]":
                var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
                re.lastIndex = source.lastIndex;
                return re;

              case "[object Blob]":
                return new source.constructor([ source ], {
                    type: source.type
                });
            }
            if (isFunction(source.cloneNode)) {
                return source.cloneNode(true);
            }
        }
    }
    function simpleCompare(a, b) {
        return a === b || a !== a && b !== b;
    }
    function equals(o1, o2) {
        if (o1 === o2) return true;
        if (o1 === null || o2 === null) return false;
        if (o1 !== o1 && o2 !== o2) return true;
        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
        if (t1 === t2 && t1 === "object") {
            if (isArray(o1)) {
                if (!isArray(o2)) return false;
                if ((length = o1.length) === o2.length) {
                    for (key = 0; key < length; key++) {
                        if (!equals(o1[key], o2[key])) return false;
                    }
                    return true;
                }
            } else if (isDate(o1)) {
                if (!isDate(o2)) return false;
                return simpleCompare(o1.getTime(), o2.getTime());
            } else if (isRegExp(o1)) {
                if (!isRegExp(o2)) return false;
                return o1.toString() === o2.toString();
            } else {
                if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
                keySet = createMap();
                for (key in o1) {
                    if (key.charAt(0) === "$" || isFunction(o1[key])) continue;
                    if (!equals(o1[key], o2[key])) return false;
                    keySet[key] = true;
                }
                for (key in o2) {
                    if (!(key in keySet) && key.charAt(0) !== "$" && isDefined(o2[key]) && !isFunction(o2[key])) return false;
                }
                return true;
            }
        }
        return false;
    }
    var csp = function() {
        if (!isDefined(csp.rules)) {
            var ngCspElement = window.document.querySelector("[ng-csp]") || window.document.querySelector("[data-ng-csp]");
            if (ngCspElement) {
                var ngCspAttribute = ngCspElement.getAttribute("ng-csp") || ngCspElement.getAttribute("data-ng-csp");
                csp.rules = {
                    noUnsafeEval: !ngCspAttribute || ngCspAttribute.indexOf("no-unsafe-eval") !== -1,
                    noInlineStyle: !ngCspAttribute || ngCspAttribute.indexOf("no-inline-style") !== -1
                };
            } else {
                csp.rules = {
                    noUnsafeEval: noUnsafeEval(),
                    noInlineStyle: false
                };
            }
        }
        return csp.rules;
        function noUnsafeEval() {
            try {
                new Function("");
                return false;
            } catch (e) {
                return true;
            }
        }
    };
    var jq = function() {
        if (isDefined(jq.name_)) return jq.name_;
        var el;
        var i, ii = ngAttrPrefixes.length, prefix, name;
        for (i = 0; i < ii; ++i) {
            prefix = ngAttrPrefixes[i];
            el = window.document.querySelector("[" + prefix.replace(":", "\\:") + "jq]");
            if (el) {
                name = el.getAttribute(prefix + "jq");
                break;
            }
        }
        return jq.name_ = name;
    };
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        if (isFunction(fn) && !(fn instanceof RegExp)) {
            return curryArgs.length ? function() {
                return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
            } : function() {
                return arguments.length ? fn.apply(self, arguments) : fn.call(self);
            };
        } else {
            return fn;
        }
    }
    function toJsonReplacer(key, value) {
        var val = value;
        if (typeof key === "string" && key.charAt(0) === "$" && key.charAt(1) === "$") {
            val = undefined;
        } else if (isWindow(value)) {
            val = "$WINDOW";
        } else if (value && window.document === value) {
            val = "$DOCUMENT";
        } else if (isScope(value)) {
            val = "$SCOPE";
        }
        return val;
    }
    function toJson(obj, pretty) {
        if (isUndefined(obj)) return undefined;
        if (!isNumber(pretty)) {
            pretty = pretty ? 2 : null;
        }
        return JSON.stringify(obj, toJsonReplacer, pretty);
    }
    function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
    }
    var ALL_COLONS = /:/g;
    function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(ALL_COLONS, "");
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
    }
    function startingTag(element) {
        element = jqLite(element).clone();
        try {
            element.empty();
        } catch (e) {}
        var elemHtml = jqLite("<div>").append(element).html();
        try {
            return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function(match, nodeName) {
                return "<" + lowercase(nodeName);
            });
        } catch (e) {
            return lowercase(elemHtml);
        }
    }
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        } catch (e) {}
    }
    function parseKeyValue(keyValue) {
        var obj = {};
        forEach((keyValue || "").split("&"), function(keyValue) {
            var splitPoint, key, val;
            if (keyValue) {
                key = keyValue = keyValue.replace(/\+/g, "%20");
                splitPoint = keyValue.indexOf("=");
                if (splitPoint !== -1) {
                    key = keyValue.substring(0, splitPoint);
                    val = keyValue.substring(splitPoint + 1);
                }
                key = tryDecodeURIComponent(key);
                if (isDefined(key)) {
                    val = isDefined(val) ? tryDecodeURIComponent(val) : true;
                    if (!hasOwnProperty.call(obj, key)) {
                        obj[key] = val;
                    } else if (isArray(obj[key])) {
                        obj[key].push(val);
                    } else {
                        obj[key] = [ obj[key], val ];
                    }
                }
            }
        });
        return obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function(value, key) {
            if (isArray(value)) {
                forEach(value, function(arrayValue) {
                    parts.push(encodeUriQuery(key, true) + (arrayValue === true ? "" : "=" + encodeUriQuery(arrayValue, true)));
                });
            } else {
                parts.push(encodeUriQuery(key, true) + (value === true ? "" : "=" + encodeUriQuery(value, true)));
            }
        });
        return parts.length ? parts.join("&") : "";
    }
    function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
    }
    var ngAttrPrefixes = [ "ng-", "data-ng-", "ng:", "x-ng-" ];
    function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
            attr = ngAttrPrefixes[i] + ngAttr;
            if (isString(attr = element.getAttribute(attr))) {
                return attr;
            }
        }
        return null;
    }
    function allowAutoBootstrap(document) {
        var script = document.currentScript;
        if (!script) {
            return true;
        }
        if (!(script instanceof window.HTMLScriptElement || script instanceof window.SVGScriptElement)) {
            return false;
        }
        var attributes = script.attributes;
        var srcs = [ attributes.getNamedItem("src"), attributes.getNamedItem("href"), attributes.getNamedItem("xlink:href") ];
        return srcs.every(function(src) {
            if (!src) {
                return true;
            }
            if (!src.value) {
                return false;
            }
            var link = document.createElement("a");
            link.href = src.value;
            if (document.location.origin === link.origin) {
                return true;
            }
            switch (link.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "blob:":
              case "file:":
              case "data:":
                return true;

              default:
                return false;
            }
        });
    }
    var isAutoBootstrapAllowed = allowAutoBootstrap(window.document);
    function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
                appElement = element;
                module = element.getAttribute(name);
            }
        });
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            var candidate;
            if (!appElement && (candidate = element.querySelector("[" + name.replace(":", "\\:") + "]"))) {
                appElement = candidate;
                module = candidate.getAttribute(name);
            }
        });
        if (appElement) {
            if (!isAutoBootstrapAllowed) {
                window.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates " + "an extension, document.location.href does not match.");
                return;
            }
            config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
            bootstrap(appElement, module ? [ module ] : [], config);
        }
    }
    function bootstrap(element, modules, config) {
        if (!isObject(config)) config = {};
        var defaultConfig = {
            strictDi: false
        };
        config = extend(defaultConfig, config);
        var doBootstrap = function() {
            element = jqLite(element);
            if (element.injector()) {
                var tag = element[0] === window.document ? "document" : startingTag(element);
                throw ngMinErr("btstrpd", "App already bootstrapped with this element '{0}'", tag.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            modules = modules || [];
            modules.unshift([ "$provide", function($provide) {
                $provide.value("$rootElement", element);
            } ]);
            if (config.debugInfoEnabled) {
                modules.push([ "$compileProvider", function($compileProvider) {
                    $compileProvider.debugInfoEnabled(true);
                } ]);
            }
            modules.unshift("ng");
            var injector = createInjector(modules, config.strictDi);
            injector.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function bootstrapApply(scope, element, compile, injector) {
                scope.$apply(function() {
                    element.data("$injector", injector);
                    compile(element)(scope);
                });
            } ]);
            return injector;
        };
        var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
            config.debugInfoEnabled = true;
            window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, "");
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
            return doBootstrap();
        }
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, "");
        angular.resumeBootstrap = function(extraModules) {
            forEach(extraModules, function(module) {
                modules.push(module);
            });
            return doBootstrap();
        };
        if (isFunction(angular.resumeDeferredBootstrap)) {
            angular.resumeDeferredBootstrap();
        }
    }
    function reloadWithDebugInfo() {
        window.name = "NG_ENABLE_DEBUG_INFO!" + window.name;
        window.location.reload();
    }
    function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) {
            throw ngMinErr("test", "no injector found for element argument to getTestability");
        }
        return injector.get("$$testability");
    }
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name, separator) {
        separator = separator || "_";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    var bindJQueryFired = false;
    function bindJQuery() {
        var originalCleanData;
        if (bindJQueryFired) {
            return;
        }
        var jqName = jq();
        jQuery = isUndefined(jqName) ? window.jQuery : !jqName ? undefined : window[jqName];
        if (jQuery && jQuery.fn.on) {
            jqLite = jQuery;
            extend(jQuery.fn, {
                scope: JQLitePrototype.scope,
                isolateScope: JQLitePrototype.isolateScope,
                controller: JQLitePrototype.controller,
                injector: JQLitePrototype.injector,
                inheritedData: JQLitePrototype.inheritedData
            });
            originalCleanData = jQuery.cleanData;
            jQuery.cleanData = function(elems) {
                var events;
                for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                    events = jQuery._data(elem, "events");
                    if (events && events.$destroy) {
                        jQuery(elem).triggerHandler("$destroy");
                    }
                }
                originalCleanData(elems);
            };
        } else {
            jqLite = JQLite;
        }
        angular.element = jqLite;
        bindJQueryFired = true;
    }
    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        }
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        if (acceptArrayAnnotation && isArray(arg)) {
            arg = arg[arg.length - 1];
        }
        assertArg(isFunction(arg), name, "not a function, got " + (arg && typeof arg === "object" ? arg.constructor.name || "Object" : typeof arg));
        return arg;
    }
    function assertNotHasOwnProperty(name, context) {
        if (name === "hasOwnProperty") {
            throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
        }
    }
    function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        var keys = path.split(".");
        var key;
        var lastInstance = obj;
        var len = keys.length;
        for (var i = 0; i < len; i++) {
            key = keys[i];
            if (obj) {
                obj = (lastInstance = obj)[key];
            }
        }
        if (!bindFnToScope && isFunction(obj)) {
            return bind(lastInstance, obj);
        }
        return obj;
    }
    function getBlockNodes(nodes) {
        var node = nodes[0];
        var endNode = nodes[nodes.length - 1];
        var blockNodes;
        for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
            if (blockNodes || nodes[i] !== node) {
                if (!blockNodes) {
                    blockNodes = jqLite(slice.call(nodes, 0, i));
                }
                blockNodes.push(node);
            }
        }
        return blockNodes || nodes;
    }
    function createMap() {
        return Object.create(null);
    }
    function stringify(value) {
        if (value == null) {
            return "";
        }
        switch (typeof value) {
          case "string":
            break;

          case "number":
            value = "" + value;
            break;

          default:
            if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
                value = value.toString();
            } else {
                value = toJson(value);
            }
        }
        return value;
    }
    var NODE_TYPE_ELEMENT = 1;
    var NODE_TYPE_ATTRIBUTE = 2;
    var NODE_TYPE_TEXT = 3;
    var NODE_TYPE_COMMENT = 8;
    var NODE_TYPE_DOCUMENT = 9;
    var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
    function setupModuleLoader(window) {
        var $injectorMinErr = minErr("$injector");
        var ngMinErr = minErr("ng");
        function ensure(obj, name, factory) {
            return obj[name] || (obj[name] = factory());
        }
        var angular = ensure(window, "angular", Object);
        angular.$$minErr = angular.$$minErr || minErr;
        return ensure(angular, "module", function() {
            var modules = {};
            return function module(name, requires, configFn) {
                var info = {};
                var assertNotHasOwnProperty = function(name, context) {
                    if (name === "hasOwnProperty") {
                        throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
                    }
                };
                assertNotHasOwnProperty(name, "module");
                if (requires && modules.hasOwnProperty(name)) {
                    modules[name] = null;
                }
                return ensure(modules, name, function() {
                    if (!requires) {
                        throw $injectorMinErr("nomod", "Module '{0}' is not available! You either misspelled " + "the module name or forgot to load it. If registering a module ensure that you " + "specify the dependencies as the second argument.", name);
                    }
                    var invokeQueue = [];
                    var configBlocks = [];
                    var runBlocks = [];
                    var config = invokeLater("$injector", "invoke", "push", configBlocks);
                    var moduleInstance = {
                        _invokeQueue: invokeQueue,
                        _configBlocks: configBlocks,
                        _runBlocks: runBlocks,
                        info: function(value) {
                            if (isDefined(value)) {
                                if (!isObject(value)) throw ngMinErr("aobj", "Argument '{0}' must be an object", "value");
                                info = value;
                                return this;
                            }
                            return info;
                        },
                        requires: requires,
                        name: name,
                        provider: invokeLaterAndSetModuleName("$provide", "provider"),
                        factory: invokeLaterAndSetModuleName("$provide", "factory"),
                        service: invokeLaterAndSetModuleName("$provide", "service"),
                        value: invokeLater("$provide", "value"),
                        constant: invokeLater("$provide", "constant", "unshift"),
                        decorator: invokeLaterAndSetModuleName("$provide", "decorator", configBlocks),
                        animation: invokeLaterAndSetModuleName("$animateProvider", "register"),
                        filter: invokeLaterAndSetModuleName("$filterProvider", "register"),
                        controller: invokeLaterAndSetModuleName("$controllerProvider", "register"),
                        directive: invokeLaterAndSetModuleName("$compileProvider", "directive"),
                        component: invokeLaterAndSetModuleName("$compileProvider", "component"),
                        config: config,
                        run: function(block) {
                            runBlocks.push(block);
                            return this;
                        }
                    };
                    if (configFn) {
                        config(configFn);
                    }
                    return moduleInstance;
                    function invokeLater(provider, method, insertMethod, queue) {
                        if (!queue) queue = invokeQueue;
                        return function() {
                            queue[insertMethod || "push"]([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                    function invokeLaterAndSetModuleName(provider, method, queue) {
                        if (!queue) queue = invokeQueue;
                        return function(recipeName, factoryFunction) {
                            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
                            queue.push([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                });
            };
        });
    }
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) {
                dst[i] = src[i];
            }
        } else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) {
                if (!(key.charAt(0) === "$" && key.charAt(1) === "$")) {
                    dst[key] = src[key];
                }
            }
        }
        return dst || src;
    }
    function serializeObject(obj, maxDepth) {
        var seen = [];
        if (isValidObjectMaxDepth(maxDepth)) {
            obj = copy(obj, null, maxDepth);
        }
        return JSON.stringify(obj, function(key, val) {
            val = toJsonReplacer(key, val);
            if (isObject(val)) {
                if (seen.indexOf(val) >= 0) return "...";
                seen.push(val);
            }
            return val;
        });
    }
    function toDebugString(obj, maxDepth) {
        if (typeof obj === "function") {
            return obj.toString().replace(/ \{[\s\S]*$/, "");
        } else if (isUndefined(obj)) {
            return "undefined";
        } else if (typeof obj !== "string") {
            return serializeObject(obj, maxDepth);
        }
        return obj;
    }
    var version = {
        full: "1.6.4",
        major: 1,
        minor: 6,
        dot: 4,
        codeName: "phenomenal-footnote"
    };
    function publishExternalAPI(angular) {
        extend(angular, {
            errorHandlingConfig: errorHandlingConfig,
            bootstrap: bootstrap,
            copy: copy,
            extend: extend,
            merge: merge,
            equals: equals,
            element: jqLite,
            forEach: forEach,
            injector: createInjector,
            noop: noop,
            bind: bind,
            toJson: toJson,
            fromJson: fromJson,
            identity: identity,
            isUndefined: isUndefined,
            isDefined: isDefined,
            isString: isString,
            isFunction: isFunction,
            isObject: isObject,
            isNumber: isNumber,
            isElement: isElement,
            isArray: isArray,
            version: version,
            isDate: isDate,
            lowercase: lowercase,
            uppercase: uppercase,
            callbacks: {
                $$counter: 0
            },
            getTestability: getTestability,
            reloadWithDebugInfo: reloadWithDebugInfo,
            $$minErr: minErr,
            $$csp: csp,
            $$encodeUriSegment: encodeUriSegment,
            $$encodeUriQuery: encodeUriQuery,
            $$stringify: stringify
        });
        angularModule = setupModuleLoader(window);
        angularModule("ng", [ "ngLocale" ], [ "$provide", function ngModule($provide) {
            $provide.provider({
                $$sanitizeUri: $$SanitizeUriProvider
            });
            $provide.provider("$compile", $CompileProvider).directive({
                a: htmlAnchorDirective,
                input: inputDirective,
                textarea: inputDirective,
                form: formDirective,
                script: scriptDirective,
                select: selectDirective,
                option: optionDirective,
                ngBind: ngBindDirective,
                ngBindHtml: ngBindHtmlDirective,
                ngBindTemplate: ngBindTemplateDirective,
                ngClass: ngClassDirective,
                ngClassEven: ngClassEvenDirective,
                ngClassOdd: ngClassOddDirective,
                ngCloak: ngCloakDirective,
                ngController: ngControllerDirective,
                ngForm: ngFormDirective,
                ngHide: ngHideDirective,
                ngIf: ngIfDirective,
                ngInclude: ngIncludeDirective,
                ngInit: ngInitDirective,
                ngNonBindable: ngNonBindableDirective,
                ngPluralize: ngPluralizeDirective,
                ngRepeat: ngRepeatDirective,
                ngShow: ngShowDirective,
                ngStyle: ngStyleDirective,
                ngSwitch: ngSwitchDirective,
                ngSwitchWhen: ngSwitchWhenDirective,
                ngSwitchDefault: ngSwitchDefaultDirective,
                ngOptions: ngOptionsDirective,
                ngTransclude: ngTranscludeDirective,
                ngModel: ngModelDirective,
                ngList: ngListDirective,
                ngChange: ngChangeDirective,
                pattern: patternDirective,
                ngPattern: patternDirective,
                required: requiredDirective,
                ngRequired: requiredDirective,
                minlength: minlengthDirective,
                ngMinlength: minlengthDirective,
                maxlength: maxlengthDirective,
                ngMaxlength: maxlengthDirective,
                ngValue: ngValueDirective,
                ngModelOptions: ngModelOptionsDirective
            }).directive({
                ngInclude: ngIncludeFillContentDirective
            }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
            $provide.provider({
                $anchorScroll: $AnchorScrollProvider,
                $animate: $AnimateProvider,
                $animateCss: $CoreAnimateCssProvider,
                $$animateJs: $$CoreAnimateJsProvider,
                $$animateQueue: $$CoreAnimateQueueProvider,
                $$AnimateRunner: $$AnimateRunnerFactoryProvider,
                $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
                $browser: $BrowserProvider,
                $cacheFactory: $CacheFactoryProvider,
                $controller: $ControllerProvider,
                $document: $DocumentProvider,
                $$isDocumentHidden: $$IsDocumentHiddenProvider,
                $exceptionHandler: $ExceptionHandlerProvider,
                $filter: $FilterProvider,
                $$forceReflow: $$ForceReflowProvider,
                $interpolate: $InterpolateProvider,
                $interval: $IntervalProvider,
                $http: $HttpProvider,
                $httpParamSerializer: $HttpParamSerializerProvider,
                $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
                $httpBackend: $HttpBackendProvider,
                $xhrFactory: $xhrFactoryProvider,
                $jsonpCallbacks: $jsonpCallbacksProvider,
                $location: $LocationProvider,
                $log: $LogProvider,
                $parse: $ParseProvider,
                $rootScope: $RootScopeProvider,
                $q: $QProvider,
                $$q: $$QProvider,
                $sce: $SceProvider,
                $sceDelegate: $SceDelegateProvider,
                $sniffer: $SnifferProvider,
                $templateCache: $TemplateCacheProvider,
                $templateRequest: $TemplateRequestProvider,
                $$testability: $$TestabilityProvider,
                $timeout: $TimeoutProvider,
                $window: $WindowProvider,
                $$rAF: $$RAFProvider,
                $$jqLite: $$jqLiteProvider,
                $$Map: $$MapProvider,
                $$cookieReader: $$CookieReaderProvider
            });
        } ]).info({
            angularVersion: "1.6.4"
        });
    }
    JQLite.expando = "ng339";
    var jqCache = JQLite.cache = {}, jqId = 1;
    JQLite._data = function(node) {
        return this.cache[node[this.expando]] || {};
    };
    function jqNextId() {
        return ++jqId;
    }
    var DASH_LOWERCASE_REGEXP = /-([a-z])/g;
    var MS_HACK_REGEXP = /^-ms-/;
    var MOUSE_EVENT_MAP = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    };
    var jqLiteMinErr = minErr("jqLite");
    function cssKebabToCamel(name) {
        return kebabToCamel(name.replace(MS_HACK_REGEXP, "ms-"));
    }
    function fnCamelCaseReplace(all, letter) {
        return letter.toUpperCase();
    }
    function kebabToCamel(name) {
        return name.replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
    var HTML_REGEXP = /<|&#?\w+;/;
    var TAG_NAME_REGEXP = /<([\w:-]+)/;
    var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
    var wrapMap = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteAcceptsData(node) {
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
    }
    function jqLiteHasData(node) {
        for (var key in jqCache[node.ng339]) {
            return true;
        }
        return false;
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i;
        if (jqLiteIsTextNode(html)) {
            nodes.push(context.createTextNode(html));
        } else {
            tmp = fragment.appendChild(context.createElement("div"));
            tag = (TAG_NAME_REGEXP.exec(html) || [ "", "" ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
            i = wrap[0];
            while (i--) {
                tmp = tmp.lastChild;
            }
            nodes = concat(nodes, tmp.childNodes);
            tmp = fragment.firstChild;
            tmp.textContent = "";
        }
        fragment.textContent = "";
        fragment.innerHTML = "";
        forEach(nodes, function(node) {
            fragment.appendChild(node);
        });
        return fragment;
    }
    function jqLiteParseHTML(html, context) {
        context = context || window.document;
        var parsed;
        if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
            return [ context.createElement(parsed[1]) ];
        }
        if (parsed = jqLiteBuildFragment(html, context)) {
            return parsed.childNodes;
        }
        return [];
    }
    function jqLiteWrapNode(node, wrapper) {
        var parent = node.parentNode;
        if (parent) {
            parent.replaceChild(wrapper, node);
        }
        wrapper.appendChild(node);
    }
    var jqLiteContains = window.Node.prototype.contains || function(arg) {
        return !!(this.compareDocumentPosition(arg) & 16);
    };
    function JQLite(element) {
        if (element instanceof JQLite) {
            return element;
        }
        var argIsString;
        if (isString(element)) {
            element = trim(element);
            argIsString = true;
        }
        if (!(this instanceof JQLite)) {
            if (argIsString && element.charAt(0) !== "<") {
                throw jqLiteMinErr("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            }
            return new JQLite(element);
        }
        if (argIsString) {
            jqLiteAddNodes(this, jqLiteParseHTML(element));
        } else if (isFunction(element)) {
            jqLiteReady(element);
        } else {
            jqLiteAddNodes(this, element);
        }
    }
    function jqLiteClone(element) {
        return element.cloneNode(true);
    }
    function jqLiteDealoc(element, onlyDescendants) {
        if (!onlyDescendants && jqLiteAcceptsData(element)) jqLite.cleanData([ element ]);
        if (element.querySelectorAll) {
            jqLite.cleanData(element.querySelectorAll("*"));
        }
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr("offargs", "jqLite#off() does not support the `selector` argument");
        var expandoStore = jqLiteExpandoStore(element);
        var events = expandoStore && expandoStore.events;
        var handle = expandoStore && expandoStore.handle;
        if (!handle) return;
        if (!type) {
            for (type in events) {
                if (type !== "$destroy") {
                    element.removeEventListener(type, handle);
                }
                delete events[type];
            }
        } else {
            var removeHandler = function(type) {
                var listenerFns = events[type];
                if (isDefined(fn)) {
                    arrayRemove(listenerFns || [], fn);
                }
                if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
                    element.removeEventListener(type, handle);
                    delete events[type];
                }
            };
            forEach(type.split(" "), function(type) {
                removeHandler(type);
                if (MOUSE_EVENT_MAP[type]) {
                    removeHandler(MOUSE_EVENT_MAP[type]);
                }
            });
        }
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
            if (name) {
                delete expandoStore.data[name];
                return;
            }
            if (expandoStore.handle) {
                if (expandoStore.events.$destroy) {
                    expandoStore.handle({}, "$destroy");
                }
                jqLiteOff(element);
            }
            delete jqCache[expandoId];
            element.ng339 = undefined;
        }
    }
    function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
            element.ng339 = expandoId = jqNextId();
            expandoStore = jqCache[expandoId] = {
                events: {},
                data: {},
                handle: undefined
            };
        }
        return expandoStore;
    }
    function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
            var prop;
            var isSimpleSetter = isDefined(value);
            var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
            var massGetter = !key;
            var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
            var data = expandoStore && expandoStore.data;
            if (isSimpleSetter) {
                data[kebabToCamel(key)] = value;
            } else {
                if (massGetter) {
                    return data;
                } else {
                    if (isSimpleGetter) {
                        return data && data[kebabToCamel(key)];
                    } else {
                        for (prop in key) {
                            data[kebabToCamel(prop)] = key[prop];
                        }
                    }
                }
            }
        }
    }
    function jqLiteHasClass(element, selector) {
        if (!element.getAttribute) return false;
        return (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ") > -1;
    }
    function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            forEach(cssClasses.split(" "), function(cssClass) {
                element.setAttribute("class", trim((" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + trim(cssClass) + " ", " ")));
            });
        }
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                if (existingClasses.indexOf(" " + cssClass + " ") === -1) {
                    existingClasses += cssClass + " ";
                }
            });
            element.setAttribute("class", trim(existingClasses));
        }
    }
    function jqLiteAddNodes(root, elements) {
        if (elements) {
            if (elements.nodeType) {
                root[root.length++] = elements;
            } else {
                var length = elements.length;
                if (typeof length === "number" && elements.window !== elements) {
                    if (length) {
                        for (var i = 0; i < length; i++) {
                            root[root.length++] = elements[i];
                        }
                    }
                } else {
                    root[root.length++] = elements;
                }
            }
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, "$" + (name || "ngController") + "Controller");
    }
    function jqLiteInheritedData(element, name, value) {
        if (element.nodeType === NODE_TYPE_DOCUMENT) {
            element = element.documentElement;
        }
        var names = isArray(name) ? name : [ name ];
        while (element) {
            for (var i = 0, ii = names.length; i < ii; i++) {
                if (isDefined(value = jqLite.data(element, names[i]))) return value;
            }
            element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
    }
    function jqLiteEmpty(element) {
        jqLiteDealoc(element, true);
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }
    function jqLiteRemove(element, keepData) {
        if (!keepData) jqLiteDealoc(element);
        var parent = element.parentNode;
        if (parent) parent.removeChild(element);
    }
    function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        if (win.document.readyState === "complete") {
            win.setTimeout(action);
        } else {
            jqLite(win).on("load", action);
        }
    }
    function jqLiteReady(fn) {
        function trigger() {
            window.document.removeEventListener("DOMContentLoaded", trigger);
            window.removeEventListener("load", trigger);
            fn();
        }
        if (window.document.readyState === "complete") {
            window.setTimeout(fn);
        } else {
            window.document.addEventListener("DOMContentLoaded", trigger);
            window.addEventListener("load", trigger);
        }
    }
    var JQLitePrototype = JQLite.prototype = {
        ready: jqLiteReady,
        toString: function() {
            var value = [];
            forEach(this, function(e) {
                value.push("" + e);
            });
            return "[" + value.join(", ") + "]";
        },
        eq: function(index) {
            return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    };
    var BOOLEAN_ATTR = {};
    forEach("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach("input,select,option,textarea,button,form,details".split(","), function(value) {
        BOOLEAN_ELEMENTS[value] = true;
    });
    var ALIASED_ATTR = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern",
        ngStep: "step"
    };
    function getBooleanAttrName(element, name) {
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
    }
    function getAliasedAttrName(name) {
        return ALIASED_ATTR[name];
    }
    forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: jqLiteHasData,
        cleanData: function jqLiteCleanData(nodes) {
            for (var i = 0, ii = nodes.length; i < ii; i++) {
                jqLiteRemoveData(nodes[i]);
            }
        }
    }, function(fn, name) {
        JQLite[name] = fn;
    });
    forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function(element) {
            return jqLite.data(element, "$scope") || jqLiteInheritedData(element.parentNode || element, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(element) {
            return jqLite.data(element, "$isolateScope") || jqLite.data(element, "$isolateScopeNoTemplate");
        },
        controller: jqLiteController,
        injector: function(element) {
            return jqLiteInheritedData(element, "$injector");
        },
        removeAttr: function(element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function(element, name, value) {
            name = cssKebabToCamel(name);
            if (isDefined(value)) {
                element.style[name] = value;
            } else {
                return element.style[name];
            }
        },
        attr: function(element, name, value) {
            var ret;
            var nodeType = element.nodeType;
            if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT || !element.getAttribute) {
                return;
            }
            var lowercasedName = lowercase(name);
            var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];
            if (isDefined(value)) {
                if (value === null || value === false && isBooleanAttr) {
                    element.removeAttribute(name);
                } else {
                    element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
                }
            } else {
                ret = element.getAttribute(name);
                if (isBooleanAttr && ret !== null) {
                    ret = lowercasedName;
                }
                return ret === null ? undefined : ret;
            }
        },
        prop: function(element, name, value) {
            if (isDefined(value)) {
                element[name] = value;
            } else {
                return element[name];
            }
        },
        text: function() {
            getText.$dv = "";
            return getText;
            function getText(element, value) {
                if (isUndefined(value)) {
                    var nodeType = element.nodeType;
                    return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : "";
                }
                element.textContent = value;
            }
        }(),
        val: function(element, value) {
            if (isUndefined(value)) {
                if (element.multiple && nodeName_(element) === "select") {
                    var result = [];
                    forEach(element.options, function(option) {
                        if (option.selected) {
                            result.push(option.value || option.text);
                        }
                    });
                    return result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function(element, value) {
            if (isUndefined(value)) {
                return element.innerHTML;
            }
            jqLiteDealoc(element, true);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2) {
            var i, key;
            var nodeCount = this.length;
            if (fn !== jqLiteEmpty && isUndefined(fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2)) {
                if (isObject(arg1)) {
                    for (i = 0; i < nodeCount; i++) {
                        if (fn === jqLiteData) {
                            fn(this[i], arg1);
                        } else {
                            for (key in arg1) {
                                fn(this[i], key, arg1[key]);
                            }
                        }
                    }
                    return this;
                } else {
                    var value = fn.$dv;
                    var jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount;
                    for (var j = 0; j < jj; j++) {
                        var nodeValue = fn(this[j], arg1, arg2);
                        value = value ? value + nodeValue : nodeValue;
                    }
                    return value;
                }
            } else {
                for (i = 0; i < nodeCount; i++) {
                    fn(this[i], arg1, arg2);
                }
                return this;
            }
        };
    });
    function createEventHandler(element, events) {
        var eventHandler = function(event, type) {
            event.isDefaultPrevented = function() {
                return event.defaultPrevented;
            };
            var eventFns = events[type || event.type];
            var eventFnsLength = eventFns ? eventFns.length : 0;
            if (!eventFnsLength) return;
            if (isUndefined(event.immediatePropagationStopped)) {
                var originalStopImmediatePropagation = event.stopImmediatePropagation;
                event.stopImmediatePropagation = function() {
                    event.immediatePropagationStopped = true;
                    if (event.stopPropagation) {
                        event.stopPropagation();
                    }
                    if (originalStopImmediatePropagation) {
                        originalStopImmediatePropagation.call(event);
                    }
                };
            }
            event.isImmediatePropagationStopped = function() {
                return event.immediatePropagationStopped === true;
            };
            var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
            if (eventFnsLength > 1) {
                eventFns = shallowCopy(eventFns);
            }
            for (var i = 0; i < eventFnsLength; i++) {
                if (!event.isImmediatePropagationStopped()) {
                    handlerWrapper(element, event, eventFns[i]);
                }
            }
        };
        eventHandler.elem = element;
        return eventHandler;
    }
    function defaultHandlerWrapper(element, event, handler) {
        handler.call(element, event);
    }
    function specialMouseHandlerWrapper(target, event, handler) {
        var related = event.relatedTarget;
        if (!related || related !== target && !jqLiteContains.call(target, related)) {
            handler.call(target, event);
        }
    }
    forEach({
        removeData: jqLiteRemoveData,
        on: function jqLiteOn(element, type, fn, unsupported) {
            if (isDefined(unsupported)) throw jqLiteMinErr("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            if (!jqLiteAcceptsData(element)) {
                return;
            }
            var expandoStore = jqLiteExpandoStore(element, true);
            var events = expandoStore.events;
            var handle = expandoStore.handle;
            if (!handle) {
                handle = expandoStore.handle = createEventHandler(element, events);
            }
            var types = type.indexOf(" ") >= 0 ? type.split(" ") : [ type ];
            var i = types.length;
            var addHandler = function(type, specialHandlerWrapper, noEventListener) {
                var eventFns = events[type];
                if (!eventFns) {
                    eventFns = events[type] = [];
                    eventFns.specialHandlerWrapper = specialHandlerWrapper;
                    if (type !== "$destroy" && !noEventListener) {
                        element.addEventListener(type, handle);
                    }
                }
                eventFns.push(fn);
            };
            while (i--) {
                type = types[i];
                if (MOUSE_EVENT_MAP[type]) {
                    addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
                    addHandler(type, undefined, true);
                } else {
                    addHandler(type);
                }
            }
        },
        off: jqLiteOff,
        one: function(element, type, fn) {
            element = jqLite(element);
            element.on(type, function onFn() {
                element.off(type, fn);
                element.off(type, onFn);
            });
            element.on(type, fn);
        },
        replaceWith: function(element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element);
            forEach(new JQLite(replaceNode), function(node) {
                if (index) {
                    parent.insertBefore(node, index.nextSibling);
                } else {
                    parent.replaceChild(node, element);
                }
                index = node;
            });
        },
        children: function(element) {
            var children = [];
            forEach(element.childNodes, function(element) {
                if (element.nodeType === NODE_TYPE_ELEMENT) {
                    children.push(element);
                }
            });
            return children;
        },
        contents: function(element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function(element, node) {
            var nodeType = element.nodeType;
            if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;
            node = new JQLite(node);
            for (var i = 0, ii = node.length; i < ii; i++) {
                var child = node[i];
                element.appendChild(child);
            }
        },
        prepend: function(element, node) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
                var index = element.firstChild;
                forEach(new JQLite(node), function(child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function(element, wrapNode) {
            jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
        },
        remove: jqLiteRemove,
        detach: function(element) {
            jqLiteRemove(element, true);
        },
        after: function(element, newElement) {
            var index = element, parent = element.parentNode;
            if (parent) {
                newElement = new JQLite(newElement);
                for (var i = 0, ii = newElement.length; i < ii; i++) {
                    var node = newElement[i];
                    parent.insertBefore(node, index.nextSibling);
                    index = node;
                }
            }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function(element, selector, condition) {
            if (selector) {
                forEach(selector.split(" "), function(className) {
                    var classCondition = condition;
                    if (isUndefined(classCondition)) {
                        classCondition = !jqLiteHasClass(element, className);
                    }
                    (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
                });
            }
        },
        parent: function(element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function(element) {
            return element.nextElementSibling;
        },
        find: function(element, selector) {
            if (element.getElementsByTagName) {
                return element.getElementsByTagName(selector);
            } else {
                return [];
            }
        },
        clone: jqLiteClone,
        triggerHandler: function(element, event, extraParameters) {
            var dummyEvent, eventFnsCopy, handlerArgs;
            var eventName = event.type || event;
            var expandoStore = jqLiteExpandoStore(element);
            var events = expandoStore && expandoStore.events;
            var eventFns = events && events[eventName];
            if (eventFns) {
                dummyEvent = {
                    preventDefault: function() {
                        this.defaultPrevented = true;
                    },
                    isDefaultPrevented: function() {
                        return this.defaultPrevented === true;
                    },
                    stopImmediatePropagation: function() {
                        this.immediatePropagationStopped = true;
                    },
                    isImmediatePropagationStopped: function() {
                        return this.immediatePropagationStopped === true;
                    },
                    stopPropagation: noop,
                    type: eventName,
                    target: element
                };
                if (event.type) {
                    dummyEvent = extend(dummyEvent, event);
                }
                eventFnsCopy = shallowCopy(eventFns);
                handlerArgs = extraParameters ? [ dummyEvent ].concat(extraParameters) : [ dummyEvent ];
                forEach(eventFnsCopy, function(fn) {
                    if (!dummyEvent.isImmediatePropagationStopped()) {
                        fn.apply(element, handlerArgs);
                    }
                });
            }
        }
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2, arg3) {
            var value;
            for (var i = 0, ii = this.length; i < ii; i++) {
                if (isUndefined(value)) {
                    value = fn(this[i], arg1, arg2, arg3);
                    if (isDefined(value)) {
                        value = jqLite(value);
                    }
                } else {
                    jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
                }
            }
            return isDefined(value) ? value : this;
        };
    });
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
    function $$jqLiteProvider() {
        this.$get = function $$jqLite() {
            return extend(JQLite, {
                hasClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteHasClass(node, classes);
                },
                addClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteAddClass(node, classes);
                },
                removeClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteRemoveClass(node, classes);
                }
            });
        };
    }
    function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
            if (typeof key === "function") {
                key = obj.$$hashKey();
            }
            return key;
        }
        var objType = typeof obj;
        if (objType === "function" || objType === "object" && obj !== null) {
            key = obj.$$hashKey = objType + ":" + (nextUidFn || nextUid)();
        } else {
            key = objType + ":" + obj;
        }
        return key;
    }
    var nanKey = Object.create(null);
    function NgMapShim() {
        this._keys = [];
        this._values = [];
        this._lastKey = NaN;
        this._lastIndex = -1;
    }
    NgMapShim.prototype = {
        _idx: function(key) {
            if (key === this._lastKey) {
                return this._lastIndex;
            }
            this._lastKey = key;
            this._lastIndex = this._keys.indexOf(key);
            return this._lastIndex;
        },
        _transformKey: function(key) {
            return isNumberNaN(key) ? nanKey : key;
        },
        get: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx !== -1) {
                return this._values[idx];
            }
        },
        set: function(key, value) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx === -1) {
                idx = this._lastIndex = this._keys.length;
            }
            this._keys[idx] = key;
            this._values[idx] = value;
        },
        delete: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx === -1) {
                return false;
            }
            this._keys.splice(idx, 1);
            this._values.splice(idx, 1);
            this._lastKey = NaN;
            this._lastIndex = -1;
            return true;
        }
    };
    var NgMap = NgMapShim;
    var $$MapProvider = [ function() {
        this.$get = [ function() {
            return NgMap;
        } ];
    } ];
    var ARROW_ARG = /^([^(]+?)=>/;
    var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
    var $injectorMinErr = minErr("$injector");
    function stringifyFn(fn) {
        return Function.prototype.toString.call(fn);
    }
    function extractArgs(fn) {
        var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ""), args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
        return args;
    }
    function anonFn(fn) {
        var args = extractArgs(fn);
        if (args) {
            return "function(" + (args[1] || "").replace(/[\s\r\n]+/, " ") + ")";
        }
        return "fn";
    }
    function annotate(fn, strictDi, name) {
        var $inject, argDecl, last;
        if (typeof fn === "function") {
            if (!($inject = fn.$inject)) {
                $inject = [];
                if (fn.length) {
                    if (strictDi) {
                        if (!isString(name) || !name) {
                            name = fn.name || anonFn(fn);
                        }
                        throw $injectorMinErr("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", name);
                    }
                    argDecl = extractArgs(fn);
                    forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        } else if (isArray(fn)) {
            last = fn.length - 1;
            assertArgFn(fn[last], "fn");
            $inject = fn.slice(0, last);
        } else {
            assertArgFn(fn, "fn", true);
        }
        return $inject;
    }
    function createInjector(modulesToLoad, strictDi) {
        strictDi = strictDi === true;
        var INSTANTIATING = {}, providerSuffix = "Provider", path = [], loadedModules = new NgMap(), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(service),
                value: supportObject(value),
                constant: supportObject(constant),
                decorator: decorator
            }
        }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
                path.push(caller);
            }
            throw $injectorMinErr("unpr", "Unknown provider: {0}", path.join(" <- "));
        }), instanceCache = {}, protoInstanceInjector = createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
        }), instanceInjector = protoInstanceInjector;
        providerCache["$injector" + providerSuffix] = {
            $get: valueFn(protoInstanceInjector)
        };
        instanceInjector.modules = providerInjector.modules = createMap();
        var runBlocks = loadModules(modulesToLoad);
        instanceInjector = protoInstanceInjector.get("$injector");
        instanceInjector.strictDi = strictDi;
        forEach(runBlocks, function(fn) {
            if (fn) instanceInjector.invoke(fn);
        });
        return instanceInjector;
        function supportObject(delegate) {
            return function(key, value) {
                if (isObject(key)) {
                    forEach(key, reverseParams(delegate));
                } else {
                    return delegate(key, value);
                }
            };
        }
        function provider(name, provider_) {
            assertNotHasOwnProperty(name, "service");
            if (isFunction(provider_) || isArray(provider_)) {
                provider_ = providerInjector.instantiate(provider_);
            }
            if (!provider_.$get) {
                throw $injectorMinErr("pget", "Provider '{0}' must define $get factory method.", name);
            }
            return providerCache[name + providerSuffix] = provider_;
        }
        function enforceReturnValue(name, factory) {
            return function enforcedReturnValue() {
                var result = instanceInjector.invoke(factory, this);
                if (isUndefined(result)) {
                    throw $injectorMinErr("undef", "Provider '{0}' must return a value from $get factory method.", name);
                }
                return result;
            };
        }
        function factory(name, factoryFn, enforce) {
            return provider(name, {
                $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
            });
        }
        function service(name, constructor) {
            return factory(name, [ "$injector", function($injector) {
                return $injector.instantiate(constructor);
            } ]);
        }
        function value(name, val) {
            return factory(name, valueFn(val), false);
        }
        function constant(name, value) {
            assertNotHasOwnProperty(name, "constant");
            providerCache[name] = value;
            instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
            var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
            origProvider.$get = function() {
                var origInstance = instanceInjector.invoke(orig$get, origProvider);
                return instanceInjector.invoke(decorFn, null, {
                    $delegate: origInstance
                });
            };
        }
        function loadModules(modulesToLoad) {
            assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), "modulesToLoad", "not an array");
            var runBlocks = [], moduleFn;
            forEach(modulesToLoad, function(module) {
                if (loadedModules.get(module)) return;
                loadedModules.set(module, true);
                function runInvokeQueue(queue) {
                    var i, ii;
                    for (i = 0, ii = queue.length; i < ii; i++) {
                        var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                        provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                    }
                }
                try {
                    if (isString(module)) {
                        moduleFn = angularModule(module);
                        instanceInjector.modules[module] = moduleFn;
                        runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                        runInvokeQueue(moduleFn._invokeQueue);
                        runInvokeQueue(moduleFn._configBlocks);
                    } else if (isFunction(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    } else if (isArray(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    } else {
                        assertArgFn(module, "module");
                    }
                } catch (e) {
                    if (isArray(module)) {
                        module = module[module.length - 1];
                    }
                    if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
                        e = e.message + "\n" + e.stack;
                    }
                    throw $injectorMinErr("modulerr", "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                }
            });
            return runBlocks;
        }
        function createInternalInjector(cache, factory) {
            function getService(serviceName, caller) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) {
                        throw $injectorMinErr("cdep", "Circular dependency found: {0}", serviceName + " <- " + path.join(" <- "));
                    }
                    return cache[serviceName];
                } else {
                    try {
                        path.unshift(serviceName);
                        cache[serviceName] = INSTANTIATING;
                        cache[serviceName] = factory(serviceName, caller);
                        return cache[serviceName];
                    } catch (err) {
                        if (cache[serviceName] === INSTANTIATING) {
                            delete cache[serviceName];
                        }
                        throw err;
                    } finally {
                        path.shift();
                    }
                }
            }
            function injectionArgs(fn, locals, serviceName) {
                var args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName);
                for (var i = 0, length = $inject.length; i < length; i++) {
                    var key = $inject[i];
                    if (typeof key !== "string") {
                        throw $injectorMinErr("itkn", "Incorrect injection token! Expected service name as string, got {0}", key);
                    }
                    args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
                }
                return args;
            }
            function isClass(func) {
                if (msie || typeof func !== "function") {
                    return false;
                }
                var result = func.$$ngIsClass;
                if (!isBoolean(result)) {
                    result = func.$$ngIsClass = /^(?:class\b|constructor\()/.test(stringifyFn(func));
                }
                return result;
            }
            function invoke(fn, self, locals, serviceName) {
                if (typeof locals === "string") {
                    serviceName = locals;
                    locals = null;
                }
                var args = injectionArgs(fn, locals, serviceName);
                if (isArray(fn)) {
                    fn = fn[fn.length - 1];
                }
                if (!isClass(fn)) {
                    return fn.apply(self, args);
                } else {
                    args.unshift(null);
                    return new (Function.prototype.bind.apply(fn, args))();
                }
            }
            function instantiate(Type, locals, serviceName) {
                var ctor = isArray(Type) ? Type[Type.length - 1] : Type;
                var args = injectionArgs(Type, locals, serviceName);
                args.unshift(null);
                return new (Function.prototype.bind.apply(ctor, args))();
            }
            return {
                invoke: invoke,
                instantiate: instantiate,
                get: getService,
                annotate: createInjector.$$annotate,
                has: function(name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
    }
    createInjector.$$annotate = annotate;
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = true;
        this.disableAutoScrolling = function() {
            autoScrollingEnabled = false;
        };
        this.$get = [ "$window", "$location", "$rootScope", function($window, $location, $rootScope) {
            var document = $window.document;
            function getFirstAnchor(list) {
                var result = null;
                Array.prototype.some.call(list, function(element) {
                    if (nodeName_(element) === "a") {
                        result = element;
                        return true;
                    }
                });
                return result;
            }
            function getYOffset() {
                var offset = scroll.yOffset;
                if (isFunction(offset)) {
                    offset = offset();
                } else if (isElement(offset)) {
                    var elem = offset[0];
                    var style = $window.getComputedStyle(elem);
                    if (style.position !== "fixed") {
                        offset = 0;
                    } else {
                        offset = elem.getBoundingClientRect().bottom;
                    }
                } else if (!isNumber(offset)) {
                    offset = 0;
                }
                return offset;
            }
            function scrollTo(elem) {
                if (elem) {
                    elem.scrollIntoView();
                    var offset = getYOffset();
                    if (offset) {
                        var elemTop = elem.getBoundingClientRect().top;
                        $window.scrollBy(0, elemTop - offset);
                    }
                } else {
                    $window.scrollTo(0, 0);
                }
            }
            function scroll(hash) {
                hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();
                var elm;
                if (!hash) scrollTo(null); else if (elm = document.getElementById(hash)) scrollTo(elm); else if (elm = getFirstAnchor(document.getElementsByName(hash))) scrollTo(elm); else if (hash === "top") scrollTo(null);
            }
            if (autoScrollingEnabled) {
                $rootScope.$watch(function autoScrollWatch() {
                    return $location.hash();
                }, function autoScrollWatchAction(newVal, oldVal) {
                    if (newVal === oldVal && newVal === "") return;
                    jqLiteDocumentLoaded(function() {
                        $rootScope.$evalAsync(scroll);
                    });
                });
            }
            return scroll;
        } ];
    }
    var $animateMinErr = minErr("$animate");
    var ELEMENT_NODE = 1;
    var NG_ANIMATE_CLASSNAME = "ng-animate";
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(" ");
        if (isArray(b)) b = b.join(" ");
        return a + " " + b;
    }
    function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) {
                return elm;
            }
        }
    }
    function splitClasses(classes) {
        if (isString(classes)) {
            classes = classes.split(" ");
        }
        var obj = createMap();
        forEach(classes, function(klass) {
            if (klass.length) {
                obj[klass] = true;
            }
        });
        return obj;
    }
    function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
    }
    var $$CoreAnimateJsProvider = function() {
        this.$get = noop;
    };
    var $$CoreAnimateQueueProvider = function() {
        var postDigestQueue = new NgMap();
        var postDigestElements = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function($$AnimateRunner, $rootScope) {
            return {
                enabled: noop,
                on: noop,
                off: noop,
                pin: noop,
                push: function(element, event, options, domOperation) {
                    if (domOperation) {
                        domOperation();
                    }
                    options = options || {};
                    if (options.from) {
                        element.css(options.from);
                    }
                    if (options.to) {
                        element.css(options.to);
                    }
                    if (options.addClass || options.removeClass) {
                        addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
                    }
                    var runner = new $$AnimateRunner();
                    runner.complete();
                    return runner;
                }
            };
            function updateData(data, classes, value) {
                var changed = false;
                if (classes) {
                    classes = isString(classes) ? classes.split(" ") : isArray(classes) ? classes : [];
                    forEach(classes, function(className) {
                        if (className) {
                            changed = true;
                            data[className] = value;
                        }
                    });
                }
                return changed;
            }
            function handleCSSClassChanges() {
                forEach(postDigestElements, function(element) {
                    var data = postDigestQueue.get(element);
                    if (data) {
                        var existing = splitClasses(element.attr("class"));
                        var toAdd = "";
                        var toRemove = "";
                        forEach(data, function(status, className) {
                            var hasClass = !!existing[className];
                            if (status !== hasClass) {
                                if (status) {
                                    toAdd += (toAdd.length ? " " : "") + className;
                                } else {
                                    toRemove += (toRemove.length ? " " : "") + className;
                                }
                            }
                        });
                        forEach(element, function(elm) {
                            if (toAdd) {
                                jqLiteAddClass(elm, toAdd);
                            }
                            if (toRemove) {
                                jqLiteRemoveClass(elm, toRemove);
                            }
                        });
                        postDigestQueue.delete(element);
                    }
                });
                postDigestElements.length = 0;
            }
            function addRemoveClassesPostDigest(element, add, remove) {
                var data = postDigestQueue.get(element) || {};
                var classesAdded = updateData(data, add, true);
                var classesRemoved = updateData(data, remove, false);
                if (classesAdded || classesRemoved) {
                    postDigestQueue.set(element, data);
                    postDigestElements.push(element);
                    if (postDigestElements.length === 1) {
                        $rootScope.$$postDigest(handleCSSClassChanges);
                    }
                }
            }
        } ];
    };
    var $AnimateProvider = [ "$provide", function($provide) {
        var provider = this;
        var classNameFilter = null;
        this.$$registeredAnimations = Object.create(null);
        this.register = function(name, factory) {
            if (name && name.charAt(0) !== ".") {
                throw $animateMinErr("notcsel", "Expecting class selector starting with '.' got '{0}'.", name);
            }
            var key = name + "-animation";
            provider.$$registeredAnimations[name.substr(1)] = key;
            $provide.factory(key, factory);
        };
        this.classNameFilter = function(expression) {
            if (arguments.length === 1) {
                classNameFilter = expression instanceof RegExp ? expression : null;
                if (classNameFilter) {
                    var reservedRegex = new RegExp("[(\\s|\\/)]" + NG_ANIMATE_CLASSNAME + "[(\\s|\\/)]");
                    if (reservedRegex.test(classNameFilter.toString())) {
                        classNameFilter = null;
                        throw $animateMinErr("nongcls", '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                    }
                }
            }
            return classNameFilter;
        };
        this.$get = [ "$$animateQueue", function($$animateQueue) {
            function domInsert(element, parentElement, afterElement) {
                if (afterElement) {
                    var afterNode = extractElementNode(afterElement);
                    if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
                        afterElement = null;
                    }
                }
                if (afterElement) {
                    afterElement.after(element);
                } else {
                    parentElement.prepend(element);
                }
            }
            return {
                on: $$animateQueue.on,
                off: $$animateQueue.off,
                pin: $$animateQueue.pin,
                enabled: $$animateQueue.enabled,
                cancel: function(runner) {
                    if (runner.end) {
                        runner.end();
                    }
                },
                enter: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "enter", prepareAnimateOptions(options));
                },
                move: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "move", prepareAnimateOptions(options));
                },
                leave: function(element, options) {
                    return $$animateQueue.push(element, "leave", prepareAnimateOptions(options), function() {
                        element.remove();
                    });
                },
                addClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addclass, className);
                    return $$animateQueue.push(element, "addClass", options);
                },
                removeClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.removeClass = mergeClasses(options.removeClass, className);
                    return $$animateQueue.push(element, "removeClass", options);
                },
                setClass: function(element, add, remove, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addClass, add);
                    options.removeClass = mergeClasses(options.removeClass, remove);
                    return $$animateQueue.push(element, "setClass", options);
                },
                animate: function(element, from, to, className, options) {
                    options = prepareAnimateOptions(options);
                    options.from = options.from ? extend(options.from, from) : from;
                    options.to = options.to ? extend(options.to, to) : to;
                    className = className || "ng-inline-animate";
                    options.tempClasses = mergeClasses(options.tempClasses, className);
                    return $$animateQueue.push(element, "animate", options);
                }
            };
        } ];
    } ];
    var $$AnimateAsyncRunFactoryProvider = function() {
        this.$get = [ "$$rAF", function($$rAF) {
            var waitQueue = [];
            function waitForTick(fn) {
                waitQueue.push(fn);
                if (waitQueue.length > 1) return;
                $$rAF(function() {
                    for (var i = 0; i < waitQueue.length; i++) {
                        waitQueue[i]();
                    }
                    waitQueue = [];
                });
            }
            return function() {
                var passed = false;
                waitForTick(function() {
                    passed = true;
                });
                return function(callback) {
                    if (passed) {
                        callback();
                    } else {
                        waitForTick(callback);
                    }
                };
            };
        } ];
    };
    var $$AnimateRunnerFactoryProvider = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$$isDocumentHidden", "$timeout", function($q, $sniffer, $$animateAsyncRun, $$isDocumentHidden, $timeout) {
            var INITIAL_STATE = 0;
            var DONE_PENDING_STATE = 1;
            var DONE_COMPLETE_STATE = 2;
            AnimateRunner.chain = function(chain, callback) {
                var index = 0;
                next();
                function next() {
                    if (index === chain.length) {
                        callback(true);
                        return;
                    }
                    chain[index](function(response) {
                        if (response === false) {
                            callback(false);
                            return;
                        }
                        index++;
                        next();
                    });
                }
            };
            AnimateRunner.all = function(runners, callback) {
                var count = 0;
                var status = true;
                forEach(runners, function(runner) {
                    runner.done(onProgress);
                });
                function onProgress(response) {
                    status = status && response;
                    if (++count === runners.length) {
                        callback(status);
                    }
                }
            };
            function AnimateRunner(host) {
                this.setHost(host);
                var rafTick = $$animateAsyncRun();
                var timeoutTick = function(fn) {
                    $timeout(fn, 0, false);
                };
                this._doneCallbacks = [];
                this._tick = function(fn) {
                    if ($$isDocumentHidden()) {
                        timeoutTick(fn);
                    } else {
                        rafTick(fn);
                    }
                };
                this._state = 0;
            }
            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },
                done: function(fn) {
                    if (this._state === DONE_COMPLETE_STATE) {
                        fn();
                    } else {
                        this._doneCallbacks.push(fn);
                    }
                },
                progress: noop,
                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                if (status === false) {
                                    reject();
                                } else {
                                    resolve();
                                }
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },
                catch: function(handler) {
                    return this.getPromise()["catch"](handler);
                },
                finally: function(handler) {
                    return this.getPromise()["finally"](handler);
                },
                pause: function() {
                    if (this.host.pause) {
                        this.host.pause();
                    }
                },
                resume: function() {
                    if (this.host.resume) {
                        this.host.resume();
                    }
                },
                end: function() {
                    if (this.host.end) {
                        this.host.end();
                    }
                    this._resolve(true);
                },
                cancel: function() {
                    if (this.host.cancel) {
                        this.host.cancel();
                    }
                    this._resolve(false);
                },
                complete: function(response) {
                    var self = this;
                    if (self._state === INITIAL_STATE) {
                        self._state = DONE_PENDING_STATE;
                        self._tick(function() {
                            self._resolve(response);
                        });
                    }
                },
                _resolve: function(response) {
                    if (this._state !== DONE_COMPLETE_STATE) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = DONE_COMPLETE_STATE;
                    }
                }
            };
            return AnimateRunner;
        } ];
    };
    var $CoreAnimateCssProvider = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function($$rAF, $q, $$AnimateRunner) {
            return function(element, initialOptions) {
                var options = initialOptions || {};
                if (!options.$$prepared) {
                    options = copy(options);
                }
                if (options.cleanupStyles) {
                    options.from = options.to = null;
                }
                if (options.from) {
                    element.css(options.from);
                    options.from = null;
                }
                var closed, runner = new $$AnimateRunner();
                return {
                    start: run,
                    end: run
                };
                function run() {
                    $$rAF(function() {
                        applyAnimationContents();
                        if (!closed) {
                            runner.complete();
                        }
                        closed = true;
                    });
                    return runner;
                }
                function applyAnimationContents() {
                    if (options.addClass) {
                        element.addClass(options.addClass);
                        options.addClass = null;
                    }
                    if (options.removeClass) {
                        element.removeClass(options.removeClass);
                        options.removeClass = null;
                    }
                    if (options.to) {
                        element.css(options.to);
                        options.to = null;
                    }
                }
            };
        } ];
    };
    function Browser(window, document, $log, $sniffer) {
        var self = this, location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = false;
        var outstandingRequestCount = 0;
        var outstandingRequestCallbacks = [];
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function() {
            outstandingRequestCount++;
        };
        function completeOutstandingRequest(fn) {
            try {
                fn.apply(null, sliceArgs(arguments, 1));
            } finally {
                outstandingRequestCount--;
                if (outstandingRequestCount === 0) {
                    while (outstandingRequestCallbacks.length) {
                        try {
                            outstandingRequestCallbacks.pop()();
                        } catch (e) {
                            $log.error(e);
                        }
                    }
                }
            }
        }
        function getHash(url) {
            var index = url.indexOf("#");
            return index === -1 ? "" : url.substr(index);
        }
        self.notifyWhenNoOutstandingRequests = function(callback) {
            if (outstandingRequestCount === 0) {
                callback();
            } else {
                outstandingRequestCallbacks.push(callback);
            }
        };
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find("base"), pendingLocation = null, getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
            try {
                return history.state;
            } catch (e) {}
        };
        cacheState();
        self.url = function(url, replace, state) {
            if (isUndefined(state)) {
                state = null;
            }
            if (location !== window.location) location = window.location;
            if (history !== window.history) history = window.history;
            if (url) {
                var sameState = lastHistoryState === state;
                if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
                    return self;
                }
                var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
                lastBrowserUrl = url;
                lastHistoryState = state;
                if ($sniffer.history && (!sameBase || !sameState)) {
                    history[replace ? "replaceState" : "pushState"](state, "", url);
                    cacheState();
                } else {
                    if (!sameBase) {
                        pendingLocation = url;
                    }
                    if (replace) {
                        location.replace(url);
                    } else if (!sameBase) {
                        location.href = url;
                    } else {
                        location.hash = getHash(url);
                    }
                    if (location.href !== url) {
                        pendingLocation = url;
                    }
                }
                if (pendingLocation) {
                    pendingLocation = url;
                }
                return self;
            } else {
                return pendingLocation || location.href.replace(/%27/g, "'");
            }
        };
        self.state = function() {
            return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = false;
        function cacheStateAndFireUrlChange() {
            pendingLocation = null;
            fireStateOrUrlChange();
        }
        var lastCachedState = null;
        function cacheState() {
            cachedState = getCurrentState();
            cachedState = isUndefined(cachedState) ? null : cachedState;
            if (equals(cachedState, lastCachedState)) {
                cachedState = lastCachedState;
            }
            lastCachedState = cachedState;
            lastHistoryState = cachedState;
        }
        function fireStateOrUrlChange() {
            var prevLastHistoryState = lastHistoryState;
            cacheState();
            if (lastBrowserUrl === self.url() && prevLastHistoryState === cachedState) {
                return;
            }
            lastBrowserUrl = self.url();
            lastHistoryState = cachedState;
            forEach(urlChangeListeners, function(listener) {
                listener(self.url(), cachedState);
            });
        }
        self.onUrlChange = function(callback) {
            if (!urlChangeInit) {
                if ($sniffer.history) jqLite(window).on("popstate", cacheStateAndFireUrlChange);
                jqLite(window).on("hashchange", cacheStateAndFireUrlChange);
                urlChangeInit = true;
            }
            urlChangeListeners.push(callback);
            return callback;
        };
        self.$$applicationDestroyed = function() {
            jqLite(window).off("hashchange popstate", cacheStateAndFireUrlChange);
        };
        self.$$checkUrlChange = fireStateOrUrlChange;
        self.baseHref = function() {
            var href = baseElement.attr("href");
            return href ? href.replace(/^(https?:)?\/\/[^\/]*/, "") : "";
        };
        self.defer = function(fn, delay) {
            var timeoutId;
            outstandingRequestCount++;
            timeoutId = setTimeout(function() {
                delete pendingDeferIds[timeoutId];
                completeOutstandingRequest(fn);
            }, delay || 0);
            pendingDeferIds[timeoutId] = true;
            return timeoutId;
        };
        self.defer.cancel = function(deferId) {
            if (pendingDeferIds[deferId]) {
                delete pendingDeferIds[deferId];
                clearTimeout(deferId);
                completeOutstandingRequest(noop);
                return true;
            }
            return false;
        };
    }
    function $BrowserProvider() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function($window, $log, $sniffer, $document) {
            return new Browser($window, $document, $log, $sniffer);
        } ];
    }
    function $CacheFactoryProvider() {
        this.$get = function() {
            var caches = {};
            function cacheFactory(cacheId, options) {
                if (cacheId in caches) {
                    throw minErr("$cacheFactory")("iid", "CacheId '{0}' is already taken!", cacheId);
                }
                var size = 0, stats = extend({}, options, {
                    id: cacheId
                }), data = createMap(), capacity = options && options.capacity || Number.MAX_VALUE, lruHash = createMap(), freshEnd = null, staleEnd = null;
                return caches[cacheId] = {
                    put: function(key, value) {
                        if (isUndefined(value)) return;
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key] || (lruHash[key] = {
                                key: key
                            });
                            refresh(lruEntry);
                        }
                        if (!(key in data)) size++;
                        data[key] = value;
                        if (size > capacity) {
                            this.remove(staleEnd.key);
                        }
                        return value;
                    },
                    get: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    remove: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            if (lruEntry === freshEnd) freshEnd = lruEntry.p;
                            if (lruEntry === staleEnd) staleEnd = lruEntry.n;
                            link(lruEntry.n, lruEntry.p);
                            delete lruHash[key];
                        }
                        if (!(key in data)) return;
                        delete data[key];
                        size--;
                    },
                    removeAll: function() {
                        data = createMap();
                        size = 0;
                        lruHash = createMap();
                        freshEnd = staleEnd = null;
                    },
                    destroy: function() {
                        data = null;
                        stats = null;
                        lruHash = null;
                        delete caches[cacheId];
                    },
                    info: function() {
                        return extend({}, stats, {
                            size: size
                        });
                    }
                };
                function refresh(entry) {
                    if (entry !== freshEnd) {
                        if (!staleEnd) {
                            staleEnd = entry;
                        } else if (staleEnd === entry) {
                            staleEnd = entry.n;
                        }
                        link(entry.n, entry.p);
                        link(entry, freshEnd);
                        freshEnd = entry;
                        freshEnd.n = null;
                    }
                }
                function link(nextEntry, prevEntry) {
                    if (nextEntry !== prevEntry) {
                        if (nextEntry) nextEntry.p = prevEntry;
                        if (prevEntry) prevEntry.n = nextEntry;
                    }
                }
            }
            cacheFactory.info = function() {
                var info = {};
                forEach(caches, function(cache, cacheId) {
                    info[cacheId] = cache.info();
                });
                return info;
            };
            cacheFactory.get = function(cacheId) {
                return caches[cacheId];
            };
            return cacheFactory;
        };
    }
    function $TemplateCacheProvider() {
        this.$get = [ "$cacheFactory", function($cacheFactory) {
            return $cacheFactory("templates");
        } ];
    }
    var $compileMinErr = minErr("$compile");
    function UNINITIALIZED_VALUE() {}
    var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();
    $CompileProvider.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, Suffix = "Directive", COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap("ngSrc,ngSrcset,src,srcset"), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
        var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        var bindingCache = createMap();
        function parseIsolateBindings(scope, directiveName, isController) {
            var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/;
            var bindings = createMap();
            forEach(scope, function(definition, scopeName) {
                if (definition in bindingCache) {
                    bindings[scopeName] = bindingCache[definition];
                    return;
                }
                var match = definition.match(LOCAL_REGEXP);
                if (!match) {
                    throw $compileMinErr("iscp", "Invalid {3} for directive '{0}'." + " Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition, isController ? "controller bindings definition" : "isolate scope definition");
                }
                bindings[scopeName] = {
                    mode: match[1][0],
                    collection: match[2] === "*",
                    optional: match[3] === "?",
                    attrName: match[4] || scopeName
                };
                if (match[4]) {
                    bindingCache[definition] = bindings[scopeName];
                }
            });
            return bindings;
        }
        function parseDirectiveBindings(directive, directiveName) {
            var bindings = {
                isolateScope: null,
                bindToController: null
            };
            if (isObject(directive.scope)) {
                if (directive.bindToController === true) {
                    bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, true);
                    bindings.isolateScope = {};
                } else {
                    bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, false);
                }
            }
            if (isObject(directive.bindToController)) {
                bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, true);
            }
            if (bindings.bindToController && !directive.controller) {
                throw $compileMinErr("noctrl", "Cannot bind to controller without directive '{0}'s controller.", directiveName);
            }
            return bindings;
        }
        function assertValidDirectiveName(name) {
            var letter = name.charAt(0);
            if (!letter || letter !== lowercase(letter)) {
                throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
            }
            if (name !== name.trim()) {
                throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces", name);
            }
        }
        function getDirectiveRequire(directive) {
            var require = directive.require || directive.controller && directive.name;
            if (!isArray(require) && isObject(require)) {
                forEach(require, function(value, key) {
                    var match = value.match(REQUIRE_PREFIX_REGEXP);
                    var name = value.substring(match[0].length);
                    if (!name) require[key] = match[0] + key;
                });
            }
            return require;
        }
        function getDirectiveRestrict(restrict, name) {
            if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
                throw $compileMinErr("badrestrict", "Restrict property '{0}' of directive '{1}' is invalid", restrict, name);
            }
            return restrict || "EA";
        }
        this.directive = function registerDirective(name, directiveFactory) {
            assertArg(name, "name");
            assertNotHasOwnProperty(name, "directive");
            if (isString(name)) {
                assertValidDirectiveName(name);
                assertArg(directiveFactory, "directiveFactory");
                if (!hasDirectives.hasOwnProperty(name)) {
                    hasDirectives[name] = [];
                    $provide.factory(name + Suffix, [ "$injector", "$exceptionHandler", function($injector, $exceptionHandler) {
                        var directives = [];
                        forEach(hasDirectives[name], function(directiveFactory, index) {
                            try {
                                var directive = $injector.invoke(directiveFactory);
                                if (isFunction(directive)) {
                                    directive = {
                                        compile: valueFn(directive)
                                    };
                                } else if (!directive.compile && directive.link) {
                                    directive.compile = valueFn(directive.link);
                                }
                                directive.priority = directive.priority || 0;
                                directive.index = index;
                                directive.name = directive.name || name;
                                directive.require = getDirectiveRequire(directive);
                                directive.restrict = getDirectiveRestrict(directive.restrict, name);
                                directive.$$moduleName = directiveFactory.$$moduleName;
                                directives.push(directive);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                        return directives;
                    } ]);
                }
                hasDirectives[name].push(directiveFactory);
            } else {
                forEach(name, reverseParams(registerDirective));
            }
            return this;
        };
        this.component = function registerComponent(name, options) {
            var controller = options.controller || function() {};
            function factory($injector) {
                function makeInjectable(fn) {
                    if (isFunction(fn) || isArray(fn)) {
                        return function(tElement, tAttrs) {
                            return $injector.invoke(fn, this, {
                                $element: tElement,
                                $attrs: tAttrs
                            });
                        };
                    } else {
                        return fn;
                    }
                }
                var template = !options.template && !options.templateUrl ? "" : options.template;
                var ddo = {
                    controller: controller,
                    controllerAs: identifierForController(options.controller) || options.controllerAs || "$ctrl",
                    template: makeInjectable(template),
                    templateUrl: makeInjectable(options.templateUrl),
                    transclude: options.transclude,
                    scope: {},
                    bindToController: options.bindings || {},
                    restrict: "E",
                    require: options.require
                };
                forEach(options, function(val, key) {
                    if (key.charAt(0) === "$") ddo[key] = val;
                });
                return ddo;
            }
            forEach(options, function(val, key) {
                if (key.charAt(0) === "$") {
                    factory[key] = val;
                    if (isFunction(controller)) controller[key] = val;
                }
            });
            factory.$inject = [ "$injector" ];
            return this.directive(name, factory);
        };
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
                return this;
            } else {
                return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
            }
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
                return this;
            } else {
                return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
            }
        };
        var debugInfoEnabled = true;
        this.debugInfoEnabled = function(enabled) {
            if (isDefined(enabled)) {
                debugInfoEnabled = enabled;
                return this;
            }
            return debugInfoEnabled;
        };
        var preAssignBindingsEnabled = false;
        this.preAssignBindingsEnabled = function(enabled) {
            if (isDefined(enabled)) {
                preAssignBindingsEnabled = enabled;
                return this;
            }
            return preAssignBindingsEnabled;
        };
        var TTL = 10;
        this.onChangesTtl = function(value) {
            if (arguments.length) {
                TTL = value;
                return this;
            }
            return TTL;
        };
        var commentDirectivesEnabledConfig = true;
        this.commentDirectivesEnabled = function(value) {
            if (arguments.length) {
                commentDirectivesEnabledConfig = value;
                return this;
            }
            return commentDirectivesEnabledConfig;
        };
        var cssClassDirectivesEnabledConfig = true;
        this.cssClassDirectivesEnabled = function(value) {
            if (arguments.length) {
                cssClassDirectivesEnabledConfig = value;
                return this;
            }
            return cssClassDirectivesEnabledConfig;
        };
        this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $sce, $animate, $$sanitizeUri) {
            var SIMPLE_ATTR_NAME = /^\w/;
            var specialAttrHolder = window.document.createElement("div");
            var commentDirectivesEnabled = commentDirectivesEnabledConfig;
            var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;
            var onChangesTtl = TTL;
            var onChangesQueue;
            function flushOnChangesQueue() {
                try {
                    if (!--onChangesTtl) {
                        onChangesQueue = undefined;
                        throw $compileMinErr("infchng", "{0} $onChanges() iterations reached. Aborting!\n", TTL);
                    }
                    $rootScope.$apply(function() {
                        var errors = [];
                        for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
                            try {
                                onChangesQueue[i]();
                            } catch (e) {
                                errors.push(e);
                            }
                        }
                        onChangesQueue = undefined;
                        if (errors.length) {
                            throw errors;
                        }
                    });
                } finally {
                    onChangesTtl++;
                }
            }
            function Attributes(element, attributesToCopy) {
                if (attributesToCopy) {
                    var keys = Object.keys(attributesToCopy);
                    var i, l, key;
                    for (i = 0, l = keys.length; i < l; i++) {
                        key = keys[i];
                        this[key] = attributesToCopy[key];
                    }
                } else {
                    this.$attr = {};
                }
                this.$$element = element;
            }
            Attributes.prototype = {
                $normalize: directiveNormalize,
                $addClass: function(classVal) {
                    if (classVal && classVal.length > 0) {
                        $animate.addClass(this.$$element, classVal);
                    }
                },
                $removeClass: function(classVal) {
                    if (classVal && classVal.length > 0) {
                        $animate.removeClass(this.$$element, classVal);
                    }
                },
                $updateClass: function(newClasses, oldClasses) {
                    var toAdd = tokenDifference(newClasses, oldClasses);
                    if (toAdd && toAdd.length) {
                        $animate.addClass(this.$$element, toAdd);
                    }
                    var toRemove = tokenDifference(oldClasses, newClasses);
                    if (toRemove && toRemove.length) {
                        $animate.removeClass(this.$$element, toRemove);
                    }
                },
                $set: function(key, value, writeAttr, attrName) {
                    var node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(key), observer = key, nodeName;
                    if (booleanKey) {
                        this.$$element.prop(key, value);
                        attrName = booleanKey;
                    } else if (aliasedKey) {
                        this[aliasedKey] = value;
                        observer = aliasedKey;
                    }
                    this[key] = value;
                    if (attrName) {
                        this.$attr[key] = attrName;
                    } else {
                        attrName = this.$attr[key];
                        if (!attrName) {
                            this.$attr[key] = attrName = snake_case(key, "-");
                        }
                    }
                    nodeName = nodeName_(this.$$element);
                    if (nodeName === "a" && (key === "href" || key === "xlinkHref") || nodeName === "img" && key === "src") {
                        this[key] = value = $$sanitizeUri(value, key === "src");
                    } else if (nodeName === "img" && key === "srcset" && isDefined(value)) {
                        var result = "";
                        var trimmedSrcset = trim(value);
                        var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
                        var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
                        var rawUris = trimmedSrcset.split(pattern);
                        var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
                        for (var i = 0; i < nbrUrisWith2parts; i++) {
                            var innerIdx = i * 2;
                            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
                            result += " " + trim(rawUris[innerIdx + 1]);
                        }
                        var lastTuple = trim(rawUris[i * 2]).split(/\s/);
                        result += $$sanitizeUri(trim(lastTuple[0]), true);
                        if (lastTuple.length === 2) {
                            result += " " + trim(lastTuple[1]);
                        }
                        this[key] = value = result;
                    }
                    if (writeAttr !== false) {
                        if (value === null || isUndefined(value)) {
                            this.$$element.removeAttr(attrName);
                        } else {
                            if (SIMPLE_ATTR_NAME.test(attrName)) {
                                this.$$element.attr(attrName, value);
                            } else {
                                setSpecialAttr(this.$$element[0], attrName, value);
                            }
                        }
                    }
                    var $$observers = this.$$observers;
                    if ($$observers) {
                        forEach($$observers[observer], function(fn) {
                            try {
                                fn(value);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                    }
                },
                $observe: function(key, fn) {
                    var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
                    listeners.push(fn);
                    $rootScope.$evalAsync(function() {
                        if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
                            fn(attrs[key]);
                        }
                    });
                    return function() {
                        arrayRemove(listeners, fn);
                    };
                }
            };
            function setSpecialAttr(element, attrName, value) {
                specialAttrHolder.innerHTML = "<span " + attrName + ">";
                var attributes = specialAttrHolder.firstChild.attributes;
                var attribute = attributes[0];
                attributes.removeNamedItem(attribute.name);
                attribute.value = value;
                element.attributes.setNamedItem(attribute);
            }
            function safeAddClass($element, className) {
                try {
                    $element.addClass(className);
                } catch (e) {}
            }
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol === "{{" && endSymbol === "}}" ? identity : function denormalizeTemplate(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
            }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
            var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
            compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
                var bindings = $element.data("$binding") || [];
                if (isArray(binding)) {
                    bindings = bindings.concat(binding);
                } else {
                    bindings.push(binding);
                }
                $element.data("$binding", bindings);
            } : noop;
            compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
                safeAddClass($element, "ng-binding");
            } : noop;
            compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
                var dataName = isolated ? noTemplate ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
                $element.data(dataName, scope);
            } : noop;
            compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
                safeAddClass($element, isolated ? "ng-isolate-scope" : "ng-scope");
            } : noop;
            compile.$$createComment = function(directiveName, comment) {
                var content = "";
                if (debugInfoEnabled) {
                    content = " " + (directiveName || "") + ": ";
                    if (comment) content += comment + " ";
                }
                return window.document.createComment(content);
            };
            return compile;
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                if (!($compileNodes instanceof jqLite)) {
                    $compileNodes = jqLite($compileNodes);
                }
                var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                compile.$$addScopeClass($compileNodes);
                var namespace = null;
                return function publicLinkFn(scope, cloneConnectFn, options) {
                    if (!$compileNodes) {
                        throw $compileMinErr("multilink", "This element has already been linked.");
                    }
                    assertArg(scope, "scope");
                    if (previousCompileContext && previousCompileContext.needsNewScope) {
                        scope = scope.$parent.$new();
                    }
                    options = options || {};
                    var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                    if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
                        parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
                    }
                    if (!namespace) {
                        namespace = detectNamespaceForChildElements(futureParentElement);
                    }
                    var $linkNode;
                    if (namespace !== "html") {
                        $linkNode = jqLite(wrapTemplate(namespace, jqLite("<div>").append($compileNodes).html()));
                    } else if (cloneConnectFn) {
                        $linkNode = JQLitePrototype.clone.call($compileNodes);
                    } else {
                        $linkNode = $compileNodes;
                    }
                    if (transcludeControllers) {
                        for (var controllerName in transcludeControllers) {
                            $linkNode.data("$" + controllerName + "Controller", transcludeControllers[controllerName].instance);
                        }
                    }
                    compile.$$addScopeInfo($linkNode, scope);
                    if (cloneConnectFn) cloneConnectFn($linkNode, scope);
                    if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                    if (!cloneConnectFn) {
                        $compileNodes = compositeLinkFn = null;
                    }
                    return $linkNode;
                };
            }
            function detectNamespaceForChildElements(parentElement) {
                var node = parentElement && parentElement[0];
                if (!node) {
                    return "html";
                } else {
                    return nodeName_(node) !== "foreignobject" && toString.call(node).match(/SVG/) ? "svg" : "html";
                }
            }
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                var linkFns = [], notLiveList = isArray(nodeList) || nodeList instanceof jqLite, attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
                for (var i = 0; i < nodeList.length; i++) {
                    attrs = new Attributes();
                    if (msie === 11) {
                        mergeConsecutiveTextNodes(nodeList, i, notLiveList);
                    }
                    directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
                    nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
                    if (nodeLinkFn && nodeLinkFn.scope) {
                        compile.$$addScopeClass(attrs.$$element);
                    }
                    childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
                    if (nodeLinkFn || childLinkFn) {
                        linkFns.push(i, nodeLinkFn, childLinkFn);
                        linkFnFound = true;
                        nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                    }
                    previousCompileContext = null;
                }
                return linkFnFound ? compositeLinkFn : null;
                function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                    var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
                    var stableNodeList;
                    if (nodeLinkFnFound) {
                        var nodeListLength = nodeList.length;
                        stableNodeList = new Array(nodeListLength);
                        for (i = 0; i < linkFns.length; i += 3) {
                            idx = linkFns[i];
                            stableNodeList[idx] = nodeList[idx];
                        }
                    } else {
                        stableNodeList = nodeList;
                    }
                    for (i = 0, ii = linkFns.length; i < ii; ) {
                        node = stableNodeList[linkFns[i++]];
                        nodeLinkFn = linkFns[i++];
                        childLinkFn = linkFns[i++];
                        if (nodeLinkFn) {
                            if (nodeLinkFn.scope) {
                                childScope = scope.$new();
                                compile.$$addScopeInfo(jqLite(node), childScope);
                            } else {
                                childScope = scope;
                            }
                            if (nodeLinkFn.transcludeOnThisElement) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                                childBoundTranscludeFn = parentBoundTranscludeFn;
                            } else if (!parentBoundTranscludeFn && transcludeFn) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                            } else {
                                childBoundTranscludeFn = null;
                            }
                            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                        } else if (childLinkFn) {
                            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                        }
                    }
                }
            }
            function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
                var node = nodeList[idx];
                var parent = node.parentNode;
                var sibling;
                if (node.nodeType !== NODE_TYPE_TEXT) {
                    return;
                }
                while (true) {
                    sibling = parent ? node.nextSibling : nodeList[idx + 1];
                    if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
                        break;
                    }
                    node.nodeValue = node.nodeValue + sibling.nodeValue;
                    if (sibling.parentNode) {
                        sibling.parentNode.removeChild(sibling);
                    }
                    if (notLiveList && sibling === nodeList[idx + 1]) {
                        nodeList.splice(idx + 1, 1);
                    }
                }
            }
            function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
                function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                    if (!transcludedScope) {
                        transcludedScope = scope.$new(false, containingScope);
                        transcludedScope.$$transcluded = true;
                    }
                    return transcludeFn(transcludedScope, cloneFn, {
                        parentBoundTranscludeFn: previousBoundTranscludeFn,
                        transcludeControllers: controllers,
                        futureParentElement: futureParentElement
                    });
                }
                var boundSlots = boundTranscludeFn.$$slots = createMap();
                for (var slotName in transcludeFn.$$slots) {
                    if (transcludeFn.$$slots[slotName]) {
                        boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
                    } else {
                        boundSlots[slotName] = null;
                    }
                }
                return boundTranscludeFn;
            }
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                var nodeType = node.nodeType, attrsMap = attrs.$attr, match, nodeName, className;
                switch (nodeType) {
                  case NODE_TYPE_ELEMENT:
                    nodeName = nodeName_(node);
                    addDirective(directives, directiveNormalize(nodeName), "E", maxPriority, ignoreDirective);
                    for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                        var attrStartName = false;
                        var attrEndName = false;
                        attr = nAttrs[j];
                        name = attr.name;
                        value = attr.value;
                        ngAttrName = directiveNormalize(name);
                        isNgAttr = NG_ATTR_BINDING.test(ngAttrName);
                        if (isNgAttr) {
                            name = name.replace(PREFIX_REGEXP, "").substr(8).replace(/_(.)/g, function(match, letter) {
                                return letter.toUpperCase();
                            });
                        }
                        var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
                        if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
                            attrStartName = name;
                            attrEndName = name.substr(0, name.length - 5) + "end";
                            name = name.substr(0, name.length - 6);
                        }
                        nName = directiveNormalize(name.toLowerCase());
                        attrsMap[nName] = name;
                        if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                            attrs[nName] = value;
                            if (getBooleanAttrName(node, nName)) {
                                attrs[nName] = true;
                            }
                        }
                        addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                        addDirective(directives, nName, "A", maxPriority, ignoreDirective, attrStartName, attrEndName);
                    }
                    if (nodeName === "input" && node.getAttribute("type") === "hidden") {
                        node.setAttribute("autocomplete", "off");
                    }
                    if (!cssClassDirectivesEnabled) break;
                    className = node.className;
                    if (isObject(className)) {
                        className = className.animVal;
                    }
                    if (isString(className) && className !== "") {
                        while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                            nName = directiveNormalize(match[2]);
                            if (addDirective(directives, nName, "C", maxPriority, ignoreDirective)) {
                                attrs[nName] = trim(match[3]);
                            }
                            className = className.substr(match.index + match[0].length);
                        }
                    }
                    break;

                  case NODE_TYPE_TEXT:
                    addTextInterpolateDirective(directives, node.nodeValue);
                    break;

                  case NODE_TYPE_COMMENT:
                    if (!commentDirectivesEnabled) break;
                    collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
                    break;
                }
                directives.sort(byPriority);
                return directives;
            }
            function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                try {
                    var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                    if (match) {
                        var nName = directiveNormalize(match[1]);
                        if (addDirective(directives, nName, "M", maxPriority, ignoreDirective)) {
                            attrs[nName] = trim(match[2]);
                        }
                    }
                } catch (e) {}
            }
            function groupScan(node, attrStart, attrEnd) {
                var nodes = [];
                var depth = 0;
                if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
                    do {
                        if (!node) {
                            throw $compileMinErr("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                        }
                        if (node.nodeType === NODE_TYPE_ELEMENT) {
                            if (node.hasAttribute(attrStart)) depth++;
                            if (node.hasAttribute(attrEnd)) depth--;
                        }
                        nodes.push(node);
                        node = node.nextSibling;
                    } while (depth > 0);
                } else {
                    nodes.push(node);
                }
                return jqLite(nodes);
            }
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
                    element = groupScan(element[0], attrStart, attrEnd);
                    return linkFn(scope, element, attrs, controllers, transcludeFn);
                };
            }
            function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                var compiled;
                if (eager) {
                    return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
                }
                return function lazyCompilation() {
                    if (!compiled) {
                        compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
                        $compileNodes = transcludeFn = previousCompileContext = null;
                    }
                    return compiled.apply(this, arguments);
                };
            }
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                previousCompileContext = previousCompileContext || {};
                var terminalPriority = -Number.MAX_VALUE, newScopeDirective = previousCompileContext.newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, didScanForMultipleTransclusion = false, mightHaveMultipleTransclusionError = false, directiveValue;
                for (var i = 0, ii = directives.length; i < ii; i++) {
                    directive = directives[i];
                    var attrStart = directive.$$start;
                    var attrEnd = directive.$$end;
                    if (attrStart) {
                        $compileNode = groupScan(compileNode, attrStart, attrEnd);
                    }
                    $template = undefined;
                    if (terminalPriority > directive.priority) {
                        break;
                    }
                    directiveValue = directive.scope;
                    if (directiveValue) {
                        if (!directive.templateUrl) {
                            if (isObject(directiveValue)) {
                                assertNoDuplicate("new/isolated scope", newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                                newIsolateScopeDirective = directive;
                            } else {
                                assertNoDuplicate("new/isolated scope", newIsolateScopeDirective, directive, $compileNode);
                            }
                        }
                        newScopeDirective = newScopeDirective || directive;
                    }
                    directiveName = directive.name;
                    if (!didScanForMultipleTransclusion && (directive.replace && (directive.templateUrl || directive.template) || directive.transclude && !directive.$$tlb)) {
                        var candidateDirective;
                        for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++]; ) {
                            if (candidateDirective.transclude && !candidateDirective.$$tlb || candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template)) {
                                mightHaveMultipleTransclusionError = true;
                                break;
                            }
                        }
                        didScanForMultipleTransclusion = true;
                    }
                    if (!directive.templateUrl && directive.controller) {
                        controllerDirectives = controllerDirectives || createMap();
                        assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                        controllerDirectives[directiveName] = directive;
                    }
                    directiveValue = directive.transclude;
                    if (directiveValue) {
                        hasTranscludeDirective = true;
                        if (!directive.$$tlb) {
                            assertNoDuplicate("transclusion", nonTlbTranscludeDirective, directive, $compileNode);
                            nonTlbTranscludeDirective = directive;
                        }
                        if (directiveValue === "element") {
                            hasElementTranscludeDirective = true;
                            terminalPriority = directive.priority;
                            $template = $compileNode;
                            $compileNode = templateAttrs.$$element = jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
                            compileNode = $compileNode[0];
                            replaceWith(jqCollection, sliceArgs($template), compileNode);
                            $template[0].$$parentNode = $template[0].parentNode;
                            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                                nonTlbTranscludeDirective: nonTlbTranscludeDirective
                            });
                        } else {
                            var slots = createMap();
                            if (!isObject(directiveValue)) {
                                $template = jqLite(jqLiteClone(compileNode)).contents();
                            } else {
                                $template = [];
                                var slotMap = createMap();
                                var filledSlots = createMap();
                                forEach(directiveValue, function(elementSelector, slotName) {
                                    var optional = elementSelector.charAt(0) === "?";
                                    elementSelector = optional ? elementSelector.substring(1) : elementSelector;
                                    slotMap[elementSelector] = slotName;
                                    slots[slotName] = null;
                                    filledSlots[slotName] = optional;
                                });
                                forEach($compileNode.contents(), function(node) {
                                    var slotName = slotMap[directiveNormalize(nodeName_(node))];
                                    if (slotName) {
                                        filledSlots[slotName] = true;
                                        slots[slotName] = slots[slotName] || [];
                                        slots[slotName].push(node);
                                    } else {
                                        $template.push(node);
                                    }
                                });
                                forEach(filledSlots, function(filled, slotName) {
                                    if (!filled) {
                                        throw $compileMinErr("reqslot", "Required transclusion slot `{0}` was not filled.", slotName);
                                    }
                                });
                                for (var slotName in slots) {
                                    if (slots[slotName]) {
                                        slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
                                    }
                                }
                            }
                            $compileNode.empty();
                            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined, undefined, {
                                needsNewScope: directive.$$isolateScope || directive.$$newScope
                            });
                            childTranscludeFn.$$slots = slots;
                        }
                    }
                    if (directive.template) {
                        hasTemplate = true;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
                        directiveValue = denormalizeTemplate(directiveValue);
                        if (directive.replace) {
                            replaceDirective = directive;
                            if (jqLiteIsTextNode(directiveValue)) {
                                $template = [];
                            } else {
                                $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                            }
                            compileNode = $template[0];
                            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                                throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", directiveName, "");
                            }
                            replaceWith(jqCollection, $compileNode, compileNode);
                            var newTemplateAttrs = {
                                $attr: {}
                            };
                            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                            if (newIsolateScopeDirective || newScopeDirective) {
                                markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
                            }
                            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                            ii = directives.length;
                        } else {
                            $compileNode.html(directiveValue);
                        }
                    }
                    if (directive.templateUrl) {
                        hasTemplate = true;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        if (directive.replace) {
                            replaceDirective = directive;
                        }
                        nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                            controllerDirectives: controllerDirectives,
                            newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                            newIsolateScopeDirective: newIsolateScopeDirective,
                            templateDirective: templateDirective,
                            nonTlbTranscludeDirective: nonTlbTranscludeDirective
                        });
                        ii = directives.length;
                    } else if (directive.compile) {
                        try {
                            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                            var context = directive.$$originalDirective || directive;
                            if (isFunction(linkFn)) {
                                addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
                            } else if (linkFn) {
                                addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
                            }
                        } catch (e) {
                            $exceptionHandler(e, startingTag($compileNode));
                        }
                    }
                    if (directive.terminal) {
                        nodeLinkFn.terminal = true;
                        terminalPriority = Math.max(terminalPriority, directive.priority);
                    }
                }
                nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
                nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
                nodeLinkFn.templateOnThisElement = hasTemplate;
                nodeLinkFn.transclude = childTranscludeFn;
                previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
                return nodeLinkFn;
                function addLinkFns(pre, post, attrStart, attrEnd) {
                    if (pre) {
                        if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
                        pre.require = directive.require;
                        pre.directiveName = directiveName;
                        if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                            pre = cloneAndAnnotateFn(pre, {
                                isolateScope: true
                            });
                        }
                        preLinkFns.push(pre);
                    }
                    if (post) {
                        if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
                        post.require = directive.require;
                        post.directiveName = directiveName;
                        if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                            post = cloneAndAnnotateFn(post, {
                                isolateScope: true
                            });
                        }
                        postLinkFns.push(post);
                    }
                }
                function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                    var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element, attrs, scopeBindingInfo;
                    if (compileNode === linkNode) {
                        attrs = templateAttrs;
                        $element = templateAttrs.$$element;
                    } else {
                        $element = jqLite(linkNode);
                        attrs = new Attributes($element, templateAttrs);
                    }
                    controllerScope = scope;
                    if (newIsolateScopeDirective) {
                        isolateScope = scope.$new(true);
                    } else if (newScopeDirective) {
                        controllerScope = scope.$parent;
                    }
                    if (boundTranscludeFn) {
                        transcludeFn = controllersBoundTransclude;
                        transcludeFn.$$boundTransclude = boundTranscludeFn;
                        transcludeFn.isSlotFilled = function(slotName) {
                            return !!boundTranscludeFn.$$slots[slotName];
                        };
                    }
                    if (controllerDirectives) {
                        elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
                    }
                    if (newIsolateScopeDirective) {
                        compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                        compile.$$addScopeClass($element, true);
                        isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                        scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective);
                        if (scopeBindingInfo.removeWatches) {
                            isolateScope.$on("$destroy", scopeBindingInfo.removeWatches);
                        }
                    }
                    for (var name in elementControllers) {
                        var controllerDirective = controllerDirectives[name];
                        var controller = elementControllers[name];
                        var bindings = controllerDirective.$$bindings.bindToController;
                        if (preAssignBindingsEnabled) {
                            if (bindings) {
                                controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                            } else {
                                controller.bindingInfo = {};
                            }
                            var controllerResult = controller();
                            if (controllerResult !== controller.instance) {
                                controller.instance = controllerResult;
                                $element.data("$" + controllerDirective.name + "Controller", controllerResult);
                                if (controller.bindingInfo.removeWatches) {
                                    controller.bindingInfo.removeWatches();
                                }
                                controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                            }
                        } else {
                            controller.instance = controller();
                            $element.data("$" + controllerDirective.name + "Controller", controller.instance);
                            controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                        }
                    }
                    forEach(controllerDirectives, function(controllerDirective, name) {
                        var require = controllerDirective.require;
                        if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
                            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
                        }
                    });
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        if (isFunction(controllerInstance.$onChanges)) {
                            try {
                                controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (isFunction(controllerInstance.$onInit)) {
                            try {
                                controllerInstance.$onInit();
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (isFunction(controllerInstance.$doCheck)) {
                            controllerScope.$watch(function() {
                                controllerInstance.$doCheck();
                            });
                            controllerInstance.$doCheck();
                        }
                        if (isFunction(controllerInstance.$onDestroy)) {
                            controllerScope.$on("$destroy", function callOnDestroyHook() {
                                controllerInstance.$onDestroy();
                            });
                        }
                    });
                    for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                        linkFn = preLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                    var scopeToChild = scope;
                    if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
                        scopeToChild = isolateScope;
                    }
                    if (childLinkFn) {
                        childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
                    }
                    for (i = postLinkFns.length - 1; i >= 0; i--) {
                        linkFn = postLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        if (isFunction(controllerInstance.$postLink)) {
                            controllerInstance.$postLink();
                        }
                    });
                    function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
                        var transcludeControllers;
                        if (!isScope(scope)) {
                            slotName = futureParentElement;
                            futureParentElement = cloneAttachFn;
                            cloneAttachFn = scope;
                            scope = undefined;
                        }
                        if (hasElementTranscludeDirective) {
                            transcludeControllers = elementControllers;
                        }
                        if (!futureParentElement) {
                            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
                        }
                        if (slotName) {
                            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
                            if (slotTranscludeFn) {
                                return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                            } else if (isUndefined(slotTranscludeFn)) {
                                throw $compileMinErr("noslot", 'No parent directive that requires a transclusion with slot name "{0}". ' + "Element: {1}", slotName, startingTag($element));
                            }
                        } else {
                            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                        }
                    }
                }
            }
            function getControllers(directiveName, require, $element, elementControllers) {
                var value;
                if (isString(require)) {
                    var match = require.match(REQUIRE_PREFIX_REGEXP);
                    var name = require.substring(match[0].length);
                    var inheritType = match[1] || match[3];
                    var optional = match[2] === "?";
                    if (inheritType === "^^") {
                        $element = $element.parent();
                    } else {
                        value = elementControllers && elementControllers[name];
                        value = value && value.instance;
                    }
                    if (!value) {
                        var dataName = "$" + name + "Controller";
                        value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
                    }
                    if (!value && !optional) {
                        throw $compileMinErr("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", name, directiveName);
                    }
                } else if (isArray(require)) {
                    value = [];
                    for (var i = 0, ii = require.length; i < ii; i++) {
                        value[i] = getControllers(directiveName, require[i], $element, elementControllers);
                    }
                } else if (isObject(require)) {
                    value = {};
                    forEach(require, function(controller, property) {
                        value[property] = getControllers(directiveName, controller, $element, elementControllers);
                    });
                }
                return value || null;
            }
            function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
                var elementControllers = createMap();
                for (var controllerKey in controllerDirectives) {
                    var directive = controllerDirectives[controllerKey];
                    var locals = {
                        $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                        $element: $element,
                        $attrs: attrs,
                        $transclude: transcludeFn
                    };
                    var controller = directive.controller;
                    if (controller === "@") {
                        controller = attrs[directive.name];
                    }
                    var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
                    elementControllers[directive.name] = controllerInstance;
                    $element.data("$" + directive.name + "Controller", controllerInstance.instance);
                }
                return elementControllers;
            }
            function markDirectiveScope(directives, isolateScope, newScope) {
                for (var j = 0, jj = directives.length; j < jj; j++) {
                    directives[j] = inherit(directives[j], {
                        $$isolateScope: isolateScope,
                        $$newScope: newScope
                    });
                }
            }
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                if (name === ignoreDirective) return null;
                var match = null;
                if (hasDirectives.hasOwnProperty(name)) {
                    for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                        directive = directives[i];
                        if ((isUndefined(maxPriority) || maxPriority > directive.priority) && directive.restrict.indexOf(location) !== -1) {
                            if (startAttrName) {
                                directive = inherit(directive, {
                                    $$start: startAttrName,
                                    $$end: endAttrName
                                });
                            }
                            if (!directive.$$bindings) {
                                var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                                if (isObject(bindings.isolateScope)) {
                                    directive.$$isolateBindings = bindings.isolateScope;
                                }
                            }
                            tDirectives.push(directive);
                            match = directive;
                        }
                    }
                }
                return match;
            }
            function directiveIsMultiElement(name) {
                if (hasDirectives.hasOwnProperty(name)) {
                    for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                        directive = directives[i];
                        if (directive.multiElement) {
                            return true;
                        }
                    }
                }
                return false;
            }
            function mergeTemplateAttributes(dst, src) {
                var srcAttr = src.$attr, dstAttr = dst.$attr;
                forEach(dst, function(value, key) {
                    if (key.charAt(0) !== "$") {
                        if (src[key] && src[key] !== value) {
                            if (value.length) {
                                value += (key === "style" ? ";" : " ") + src[key];
                            } else {
                                value = src[key];
                            }
                        }
                        dst.$set(key, value, true, srcAttr[key]);
                    }
                });
                forEach(src, function(value, key) {
                    if (!dst.hasOwnProperty(key) && key.charAt(0) !== "$") {
                        dst[key] = value;
                        if (key !== "class" && key !== "style") {
                            dstAttr[key] = srcAttr[key];
                        }
                    }
                });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
                $compileNode.empty();
                $templateRequest(templateUrl).then(function(content) {
                    var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                    content = denormalizeTemplate(content);
                    if (origAsyncDirective.replace) {
                        if (jqLiteIsTextNode(content)) {
                            $template = [];
                        } else {
                            $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
                        }
                        compileNode = $template[0];
                        if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                            throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                        }
                        tempTemplateAttrs = {
                            $attr: {}
                        };
                        replaceWith($rootElement, $compileNode, compileNode);
                        var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                        if (isObject(origAsyncDirective.scope)) {
                            markDirectiveScope(templateDirectives, true);
                        }
                        directives = templateDirectives.concat(directives);
                        mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                    } else {
                        compileNode = beforeTemplateCompileNode;
                        $compileNode.html(content);
                    }
                    directives.unshift(derivedSyncDirective);
                    afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                    forEach($rootElement, function(node, i) {
                        if (node === compileNode) {
                            $rootElement[i] = $compileNode[0];
                        }
                    });
                    afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                    while (linkQueue.length) {
                        var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                        if (scope.$$destroyed) continue;
                        if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                            var oldClasses = beforeTemplateLinkNode.className;
                            if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                                linkNode = jqLiteClone(compileNode);
                            }
                            replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                            safeAddClass(jqLite(linkNode), oldClasses);
                        }
                        if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                        } else {
                            childBoundTranscludeFn = boundTranscludeFn;
                        }
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                    }
                    linkQueue = null;
                }).catch(function(error) {
                    if (error instanceof Error) {
                        $exceptionHandler(error);
                    }
                });
                return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                    var childBoundTranscludeFn = boundTranscludeFn;
                    if (scope.$$destroyed) return;
                    if (linkQueue) {
                        linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
                    } else {
                        if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                        }
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
                    }
                };
            }
            function byPriority(a, b) {
                var diff = b.priority - a.priority;
                if (diff !== 0) return diff;
                if (a.name !== b.name) return a.name < b.name ? -1 : 1;
                return a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
                function wrapModuleNameIfDefined(moduleName) {
                    return moduleName ? " (module: " + moduleName + ")" : "";
                }
                if (previousDirective) {
                    throw $compileMinErr("multidir", "Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}", previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
                }
            }
            function addTextInterpolateDirective(directives, text) {
                var interpolateFn = $interpolate(text, true);
                if (interpolateFn) {
                    directives.push({
                        priority: 0,
                        compile: function textInterpolateCompileFn(templateNode) {
                            var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);
                            return function textInterpolateLinkFn(scope, node) {
                                var parent = node.parent();
                                if (!hasCompileParent) compile.$$addBindingClass(parent);
                                compile.$$addBindingInfo(parent, interpolateFn.expressions);
                                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                                    node[0].nodeValue = value;
                                });
                            };
                        }
                    });
                }
            }
            function wrapTemplate(type, template) {
                type = lowercase(type || "html");
                switch (type) {
                  case "svg":
                  case "math":
                    var wrapper = window.document.createElement("div");
                    wrapper.innerHTML = "<" + type + ">" + template + "</" + type + ">";
                    return wrapper.childNodes[0].childNodes;

                  default:
                    return template;
                }
            }
            function getTrustedContext(node, attrNormalizedName) {
                if (attrNormalizedName === "srcdoc") {
                    return $sce.HTML;
                }
                var tag = nodeName_(node);
                if (attrNormalizedName === "src" || attrNormalizedName === "ngSrc") {
                    if ([ "img", "video", "audio", "source", "track" ].indexOf(tag) === -1) {
                        return $sce.RESOURCE_URL;
                    }
                } else if (attrNormalizedName === "xlinkHref" || tag === "form" && attrNormalizedName === "action" || tag === "link" && attrNormalizedName === "href") {
                    return $sce.RESOURCE_URL;
                }
            }
            function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
                var trustedContext = getTrustedContext(node, name);
                var mustHaveExpression = !isNgAttr;
                var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;
                var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);
                if (!interpolateFn) return;
                if (name === "multiple" && nodeName_(node) === "select") {
                    throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                }
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the " + "ng- versions (such as ng-click instead of onclick) instead.");
                }
                directives.push({
                    priority: 100,
                    compile: function() {
                        return {
                            pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                                var $$observers = attr.$$observers || (attr.$$observers = createMap());
                                var newValue = attr[name];
                                if (newValue !== value) {
                                    interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                                    value = newValue;
                                }
                                if (!interpolateFn) return;
                                attr[name] = interpolateFn(scope);
                                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                                (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                                    if (name === "class" && newValue !== oldValue) {
                                        attr.$updateClass(newValue, oldValue);
                                    } else {
                                        attr.$set(name, newValue);
                                    }
                                });
                            }
                        };
                    }
                });
            }
            function replaceWith($rootElement, elementsToRemove, newNode) {
                var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
                if ($rootElement) {
                    for (i = 0, ii = $rootElement.length; i < ii; i++) {
                        if ($rootElement[i] === firstElementToRemove) {
                            $rootElement[i++] = newNode;
                            for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, 
                            j2++) {
                                if (j2 < jj) {
                                    $rootElement[j] = $rootElement[j2];
                                } else {
                                    delete $rootElement[j];
                                }
                            }
                            $rootElement.length -= removeCount - 1;
                            if ($rootElement.context === firstElementToRemove) {
                                $rootElement.context = newNode;
                            }
                            break;
                        }
                    }
                }
                if (parent) {
                    parent.replaceChild(newNode, firstElementToRemove);
                }
                var fragment = window.document.createDocumentFragment();
                for (i = 0; i < removeCount; i++) {
                    fragment.appendChild(elementsToRemove[i]);
                }
                if (jqLite.hasData(firstElementToRemove)) {
                    jqLite.data(newNode, jqLite.data(firstElementToRemove));
                    jqLite(firstElementToRemove).off("$destroy");
                }
                jqLite.cleanData(fragment.querySelectorAll("*"));
                for (i = 1; i < removeCount; i++) {
                    delete elementsToRemove[i];
                }
                elementsToRemove[0] = newNode;
                elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
                return extend(function() {
                    return fn.apply(null, arguments);
                }, fn, annotation);
            }
            function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
                try {
                    linkFn(scope, $element, attrs, controllers, transcludeFn);
                } catch (e) {
                    $exceptionHandler(e, startingTag($element));
                }
            }
            function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
                var removeWatchCollection = [];
                var initialChanges = {};
                var changes;
                forEach(bindings, function initializeBinding(definition, scopeName) {
                    var attrName = definition.attrName, optional = definition.optional, mode = definition.mode, lastValue, parentGet, parentSet, compare, removeWatch;
                    switch (mode) {
                      case "@":
                        if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                            destination[scopeName] = attrs[attrName] = undefined;
                        }
                        removeWatch = attrs.$observe(attrName, function(value) {
                            if (isString(value) || isBoolean(value)) {
                                var oldValue = destination[scopeName];
                                recordChanges(scopeName, value, oldValue);
                                destination[scopeName] = value;
                            }
                        });
                        attrs.$$observers[attrName].$$scope = scope;
                        lastValue = attrs[attrName];
                        if (isString(lastValue)) {
                            destination[scopeName] = $interpolate(lastValue)(scope);
                        } else if (isBoolean(lastValue)) {
                            destination[scopeName] = lastValue;
                        }
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "=":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            attrs[attrName] = undefined;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        if (parentGet.literal) {
                            compare = equals;
                        } else {
                            compare = simpleCompare;
                        }
                        parentSet = parentGet.assign || function() {
                            lastValue = destination[scopeName] = parentGet(scope);
                            throw $compileMinErr("nonassign", "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!", attrs[attrName], attrName, directive.name);
                        };
                        lastValue = destination[scopeName] = parentGet(scope);
                        var parentValueWatch = function parentValueWatch(parentValue) {
                            if (!compare(parentValue, destination[scopeName])) {
                                if (!compare(parentValue, lastValue)) {
                                    destination[scopeName] = parentValue;
                                } else {
                                    parentSet(scope, parentValue = destination[scopeName]);
                                }
                            }
                            lastValue = parentValue;
                            return lastValue;
                        };
                        parentValueWatch.$stateful = true;
                        if (definition.collection) {
                            removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                        } else {
                            removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                        }
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "<":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            attrs[attrName] = undefined;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        var deepWatch = parentGet.literal;
                        var initialValue = destination[scopeName] = parentGet(scope);
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
                            if (oldValue === newValue) {
                                if (oldValue === initialValue || deepWatch && equals(oldValue, initialValue)) {
                                    return;
                                }
                                oldValue = initialValue;
                            }
                            recordChanges(scopeName, newValue, oldValue);
                            destination[scopeName] = newValue;
                        }, deepWatch);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "&":
                        parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
                        if (parentGet === noop && optional) break;
                        destination[scopeName] = function(locals) {
                            return parentGet(scope, locals);
                        };
                        break;
                    }
                });
                function recordChanges(key, currentValue, previousValue) {
                    if (isFunction(destination.$onChanges) && !simpleCompare(currentValue, previousValue)) {
                        if (!onChangesQueue) {
                            scope.$$postDigest(flushOnChangesQueue);
                            onChangesQueue = [];
                        }
                        if (!changes) {
                            changes = {};
                            onChangesQueue.push(triggerOnChangesHook);
                        }
                        if (changes[key]) {
                            previousValue = changes[key].previousValue;
                        }
                        changes[key] = new SimpleChange(previousValue, currentValue);
                    }
                }
                function triggerOnChangesHook() {
                    destination.$onChanges(changes);
                    changes = undefined;
                }
                return {
                    initialChanges: initialChanges,
                    removeWatches: removeWatchCollection.length && function removeWatches() {
                        for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
                            removeWatchCollection[i]();
                        }
                    }
                };
            }
        } ];
    }
    function SimpleChange(previous, current) {
        this.previousValue = previous;
        this.currentValue = current;
    }
    SimpleChange.prototype.isFirstChange = function() {
        return this.previousValue === _UNINITIALIZED_VALUE;
    };
    var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
    var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;
    function directiveNormalize(name) {
        return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, fnCamelCaseReplace);
    }
    function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {}
    function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {}
    function tokenDifference(str1, str2) {
        var values = "", tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for (var j = 0; j < tokens2.length; j++) {
                if (token === tokens2[j]) continue outer;
            }
            values += (values.length > 0 ? " " : "") + token;
        }
        return values;
    }
    function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;
        if (i <= 1) {
            return jqNodes;
        }
        while (i--) {
            var node = jqNodes[i];
            if (node.nodeType === NODE_TYPE_COMMENT || node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === "") {
                splice.call(jqNodes, i, 1);
            }
        }
        return jqNodes;
    }
    var $controllerMinErr = minErr("$controller");
    var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
    function identifierForController(controller, ident) {
        if (ident && isString(ident)) return ident;
        if (isString(controller)) {
            var match = CNTRL_REG.exec(controller);
            if (match) return match[3];
        }
    }
    function $ControllerProvider() {
        var controllers = {}, globals = false;
        this.has = function(name) {
            return controllers.hasOwnProperty(name);
        };
        this.register = function(name, constructor) {
            assertNotHasOwnProperty(name, "controller");
            if (isObject(name)) {
                extend(controllers, name);
            } else {
                controllers[name] = constructor;
            }
        };
        this.allowGlobals = function() {
            globals = true;
        };
        this.$get = [ "$injector", "$window", function($injector, $window) {
            return function $controller(expression, locals, later, ident) {
                var instance, match, constructor, identifier;
                later = later === true;
                if (ident && isString(ident)) {
                    identifier = ident;
                }
                if (isString(expression)) {
                    match = expression.match(CNTRL_REG);
                    if (!match) {
                        throw $controllerMinErr("ctrlfmt", "Badly formed controller string '{0}'. " + "Must match `__name__ as __id__` or `__name__`.", expression);
                    }
                    constructor = match[1];
                    identifier = identifier || match[3];
                    expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || (globals ? getter($window, constructor, true) : undefined);
                    if (!expression) {
                        throw $controllerMinErr("ctrlreg", "The controller with the name '{0}' is not registered.", constructor);
                    }
                    assertArgFn(expression, constructor, true);
                }
                if (later) {
                    var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
                    instance = Object.create(controllerPrototype || null);
                    if (identifier) {
                        addIdentifier(locals, identifier, instance, constructor || expression.name);
                    }
                    return extend(function $controllerInit() {
                        var result = $injector.invoke(expression, instance, locals, constructor);
                        if (result !== instance && (isObject(result) || isFunction(result))) {
                            instance = result;
                            if (identifier) {
                                addIdentifier(locals, identifier, instance, constructor || expression.name);
                            }
                        }
                        return instance;
                    }, {
                        instance: instance,
                        identifier: identifier
                    });
                }
                instance = $injector.instantiate(expression, locals, constructor);
                if (identifier) {
                    addIdentifier(locals, identifier, instance, constructor || expression.name);
                }
                return instance;
            };
            function addIdentifier(locals, identifier, instance, name) {
                if (!(locals && isObject(locals.$scope))) {
                    throw minErr("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
                }
                locals.$scope[identifier] = instance;
            }
        } ];
    }
    function $DocumentProvider() {
        this.$get = [ "$window", function(window) {
            return jqLite(window.document);
        } ];
    }
    function $$IsDocumentHiddenProvider() {
        this.$get = [ "$document", "$rootScope", function($document, $rootScope) {
            var doc = $document[0];
            var hidden = doc && doc.hidden;
            $document.on("visibilitychange", changeListener);
            $rootScope.$on("$destroy", function() {
                $document.off("visibilitychange", changeListener);
            });
            function changeListener() {
                hidden = doc.hidden;
            }
            return function() {
                return hidden;
            };
        } ];
    }
    function $ExceptionHandlerProvider() {
        this.$get = [ "$log", function($log) {
            return function(exception, cause) {
                $log.error.apply($log, arguments);
            };
        } ];
    }
    var $$ForceReflowProvider = function() {
        this.$get = [ "$document", function($document) {
            return function(domNode) {
                if (domNode) {
                    if (!domNode.nodeType && domNode instanceof jqLite) {
                        domNode = domNode[0];
                    }
                } else {
                    domNode = $document[0].body;
                }
                return domNode.offsetWidth + 1;
            };
        } ];
    };
    var APPLICATION_JSON = "application/json";
    var CONTENT_TYPE_APPLICATION_JSON = {
        "Content-Type": APPLICATION_JSON + ";charset=utf-8"
    };
    var JSON_START = /^\[|^\{(?!\{)/;
    var JSON_ENDS = {
        "[": /]$/,
        "{": /}$/
    };
    var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/;
    var $httpMinErr = minErr("$http");
    function serializeValue(v) {
        if (isObject(v)) {
            return isDate(v) ? v.toISOString() : toJson(v);
        }
        return v;
    }
    function $HttpParamSerializerProvider() {
        this.$get = function() {
            return function ngParamSerializer(params) {
                if (!params) return "";
                var parts = [];
                forEachSorted(params, function(value, key) {
                    if (value === null || isUndefined(value)) return;
                    if (isArray(value)) {
                        forEach(value, function(v) {
                            parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(v)));
                        });
                    } else {
                        parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(value)));
                    }
                });
                return parts.join("&");
            };
        };
    }
    function $HttpParamSerializerJQLikeProvider() {
        this.$get = function() {
            return function jQueryLikeParamSerializer(params) {
                if (!params) return "";
                var parts = [];
                serialize(params, "", true);
                return parts.join("&");
                function serialize(toSerialize, prefix, topLevel) {
                    if (toSerialize === null || isUndefined(toSerialize)) return;
                    if (isArray(toSerialize)) {
                        forEach(toSerialize, function(value, index) {
                            serialize(value, prefix + "[" + (isObject(value) ? index : "") + "]");
                        });
                    } else if (isObject(toSerialize) && !isDate(toSerialize)) {
                        forEachSorted(toSerialize, function(value, key) {
                            serialize(value, prefix + (topLevel ? "" : "[") + key + (topLevel ? "" : "]"));
                        });
                    } else {
                        parts.push(encodeUriQuery(prefix) + "=" + encodeUriQuery(serializeValue(toSerialize)));
                    }
                }
            };
        };
    }
    function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
            var tempData = data.replace(JSON_PROTECTION_PREFIX, "").trim();
            if (tempData) {
                var contentType = headers("Content-Type");
                if (contentType && contentType.indexOf(APPLICATION_JSON) === 0 || isJsonLike(tempData)) {
                    try {
                        data = fromJson(tempData);
                    } catch (e) {
                        throw $httpMinErr("baddata", 'Data must be a valid JSON object. Received: "{0}". ' + 'Parse error: "{1}"', data, e);
                    }
                }
            }
        }
        return data;
    }
    function isJsonLike(str) {
        var jsonStart = str.match(JSON_START);
        return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
    }
    function parseHeaders(headers) {
        var parsed = createMap(), i;
        function fillInParsed(key, val) {
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
        }
        if (isString(headers)) {
            forEach(headers.split("\n"), function(line) {
                i = line.indexOf(":");
                fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
            });
        } else if (isObject(headers)) {
            forEach(headers, function(headerVal, headerKey) {
                fillInParsed(lowercase(headerKey), trim(headerVal));
            });
        }
        return parsed;
    }
    function headersGetter(headers) {
        var headersObj;
        return function(name) {
            if (!headersObj) headersObj = parseHeaders(headers);
            if (name) {
                var value = headersObj[lowercase(name)];
                if (value === undefined) {
                    value = null;
                }
                return value;
            }
            return headersObj;
        };
    }
    function transformData(data, headers, status, fns) {
        if (isFunction(fns)) {
            return fns(data, headers, status);
        }
        forEach(fns, function(fn) {
            data = fn(data, headers, status);
        });
        return data;
    }
    function isSuccess(status) {
        return 200 <= status && status < 300;
    }
    function $HttpProvider() {
        var defaults = this.defaults = {
            transformResponse: [ defaultHttpResponseTransform ],
            transformRequest: [ function(d) {
                return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer",
            jsonpCallbackParam: "callback"
        };
        var useApplyAsync = false;
        this.useApplyAsync = function(value) {
            if (isDefined(value)) {
                useApplyAsync = !!value;
                return this;
            }
            return useApplyAsync;
        };
        var interceptorFactories = this.interceptors = [];
        this.$get = [ "$browser", "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", "$sce", function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {
            var defaultCache = $cacheFactory("$http");
            defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
            var reversedInterceptors = [];
            forEach(interceptorFactories, function(interceptorFactory) {
                reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            });
            function $http(requestConfig) {
                if (!isObject(requestConfig)) {
                    throw minErr("$http")("badreq", "Http request configuration must be an object.  Received: {0}", requestConfig);
                }
                if (!isString($sce.valueOf(requestConfig.url))) {
                    throw minErr("$http")("badreq", "Http request configuration url must be a string or a $sce trusted object.  Received: {0}", requestConfig.url);
                }
                var config = extend({
                    method: "get",
                    transformRequest: defaults.transformRequest,
                    transformResponse: defaults.transformResponse,
                    paramSerializer: defaults.paramSerializer,
                    jsonpCallbackParam: defaults.jsonpCallbackParam
                }, requestConfig);
                config.headers = mergeHeaders(requestConfig);
                config.method = uppercase(config.method);
                config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;
                $browser.$$incOutstandingRequestCount();
                var requestInterceptors = [];
                var responseInterceptors = [];
                var promise = $q.resolve(config);
                forEach(reversedInterceptors, function(interceptor) {
                    if (interceptor.request || interceptor.requestError) {
                        requestInterceptors.unshift(interceptor.request, interceptor.requestError);
                    }
                    if (interceptor.response || interceptor.responseError) {
                        responseInterceptors.push(interceptor.response, interceptor.responseError);
                    }
                });
                promise = chainInterceptors(promise, requestInterceptors);
                promise = promise.then(serverRequest);
                promise = chainInterceptors(promise, responseInterceptors);
                promise = promise.finally(completeOutstandingRequest);
                return promise;
                function chainInterceptors(promise, interceptors) {
                    for (var i = 0, ii = interceptors.length; i < ii; ) {
                        var thenFn = interceptors[i++];
                        var rejectFn = interceptors[i++];
                        promise = promise.then(thenFn, rejectFn);
                    }
                    interceptors.length = 0;
                    return promise;
                }
                function completeOutstandingRequest() {
                    $browser.$$completeOutstandingRequest(noop);
                }
                function executeHeaderFns(headers, config) {
                    var headerContent, processedHeaders = {};
                    forEach(headers, function(headerFn, header) {
                        if (isFunction(headerFn)) {
                            headerContent = headerFn(config);
                            if (headerContent != null) {
                                processedHeaders[header] = headerContent;
                            }
                        } else {
                            processedHeaders[header] = headerFn;
                        }
                    });
                    return processedHeaders;
                }
                function mergeHeaders(config) {
                    var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
                    defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                    defaultHeadersIteration: for (defHeaderName in defHeaders) {
                        lowercaseDefHeaderName = lowercase(defHeaderName);
                        for (reqHeaderName in reqHeaders) {
                            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                                continue defaultHeadersIteration;
                            }
                        }
                        reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                    }
                    return executeHeaderFns(reqHeaders, shallowCopy(config));
                }
                function serverRequest(config) {
                    var headers = config.headers;
                    var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
                    if (isUndefined(reqData)) {
                        forEach(headers, function(value, header) {
                            if (lowercase(header) === "content-type") {
                                delete headers[header];
                            }
                        });
                    }
                    if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
                        config.withCredentials = defaults.withCredentials;
                    }
                    return sendReq(config, reqData).then(transformResponse, transformResponse);
                }
                function transformResponse(response) {
                    var resp = extend({}, response);
                    resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
                    return isSuccess(response.status) ? resp : $q.reject(resp);
                }
            }
            $http.pendingRequests = [];
            createShortMethods("get", "delete", "head", "jsonp");
            createShortMethodsWithData("post", "put", "patch");
            $http.defaults = defaults;
            return $http;
            function createShortMethods(names) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url
                        }));
                    };
                });
            }
            function createShortMethodsWithData(name) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, data, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url,
                            data: data
                        }));
                    };
                });
            }
            function sendReq(config, reqData) {
                var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, reqHeaders = config.headers, isJsonp = lowercase(config.method) === "jsonp", url = config.url;
                if (isJsonp) {
                    url = $sce.getTrustedResourceUrl(url);
                } else if (!isString(url)) {
                    url = $sce.valueOf(url);
                }
                url = buildUrl(url, config.paramSerializer(config.params));
                if (isJsonp) {
                    url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);
                }
                $http.pendingRequests.push(config);
                promise.then(removePendingReq, removePendingReq);
                if ((config.cache || defaults.cache) && config.cache !== false && (config.method === "GET" || config.method === "JSONP")) {
                    cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
                }
                if (cache) {
                    cachedResp = cache.get(url);
                    if (isDefined(cachedResp)) {
                        if (isPromiseLike(cachedResp)) {
                            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
                        } else {
                            if (isArray(cachedResp)) {
                                resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                            } else {
                                resolvePromise(cachedResp, 200, {}, "OK");
                            }
                        }
                    } else {
                        cache.put(url, promise);
                    }
                }
                if (isUndefined(cachedResp)) {
                    var xsrfValue = urlIsSameOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
                    if (xsrfValue) {
                        reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
                    }
                    $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType, createApplyHandlers(config.eventHandlers), createApplyHandlers(config.uploadEventHandlers));
                }
                return promise;
                function createApplyHandlers(eventHandlers) {
                    if (eventHandlers) {
                        var applyHandlers = {};
                        forEach(eventHandlers, function(eventHandler, key) {
                            applyHandlers[key] = function(event) {
                                if (useApplyAsync) {
                                    $rootScope.$applyAsync(callEventHandler);
                                } else if ($rootScope.$$phase) {
                                    callEventHandler();
                                } else {
                                    $rootScope.$apply(callEventHandler);
                                }
                                function callEventHandler() {
                                    eventHandler(event);
                                }
                            };
                        });
                        return applyHandlers;
                    }
                }
                function done(status, response, headersString, statusText) {
                    if (cache) {
                        if (isSuccess(status)) {
                            cache.put(url, [ status, response, parseHeaders(headersString), statusText ]);
                        } else {
                            cache.remove(url);
                        }
                    }
                    function resolveHttpPromise() {
                        resolvePromise(response, status, headersString, statusText);
                    }
                    if (useApplyAsync) {
                        $rootScope.$applyAsync(resolveHttpPromise);
                    } else {
                        resolveHttpPromise();
                        if (!$rootScope.$$phase) $rootScope.$apply();
                    }
                }
                function resolvePromise(response, status, headers, statusText) {
                    status = status >= -1 ? status : 0;
                    (isSuccess(status) ? deferred.resolve : deferred.reject)({
                        data: response,
                        status: status,
                        headers: headersGetter(headers),
                        config: config,
                        statusText: statusText
                    });
                }
                function resolvePromiseWithResult(result) {
                    resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
                }
                function removePendingReq() {
                    var idx = $http.pendingRequests.indexOf(config);
                    if (idx !== -1) $http.pendingRequests.splice(idx, 1);
                }
            }
            function buildUrl(url, serializedParams) {
                if (serializedParams.length > 0) {
                    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
                }
                return url;
            }
            function sanitizeJsonpCallbackParam(url, key) {
                if (/[&?][^=]+=JSON_CALLBACK/.test(url)) {
                    throw $httpMinErr("badjsonp", 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
                }
                var callbackParamRegex = new RegExp("[&?]" + key + "=");
                if (callbackParamRegex.test(url)) {
                    throw $httpMinErr("badjsonp", 'Illegal use of callback param, "{0}", in url, "{1}"', key, url);
                }
                url += (url.indexOf("?") === -1 ? "?" : "&") + key + "=JSON_CALLBACK";
                return url;
            }
        } ];
    }
    function $xhrFactoryProvider() {
        this.$get = function() {
            return function createXhr() {
                return new window.XMLHttpRequest();
            };
        };
    }
    function $HttpBackendProvider() {
        this.$get = [ "$browser", "$jsonpCallbacks", "$document", "$xhrFactory", function($browser, $jsonpCallbacks, $document, $xhrFactory) {
            return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
        } ];
    }
    function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
            url = url || $browser.url();
            if (lowercase(method) === "jsonp") {
                var callbackPath = callbacks.createCallback(url);
                var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
                    var response = status === 200 && callbacks.getResponse(callbackPath);
                    completeRequest(callback, status, response, "", text);
                    callbacks.removeCallback(callbackPath);
                });
            } else {
                var xhr = createXhr(method, url);
                xhr.open(method, url, true);
                forEach(headers, function(value, key) {
                    if (isDefined(value)) {
                        xhr.setRequestHeader(key, value);
                    }
                });
                xhr.onload = function requestLoaded() {
                    var statusText = xhr.statusText || "";
                    var response = "response" in xhr ? xhr.response : xhr.responseText;
                    var status = xhr.status === 1223 ? 204 : xhr.status;
                    if (status === 0) {
                        status = response ? 200 : urlResolve(url).protocol === "file" ? 404 : 0;
                    }
                    completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
                };
                var requestError = function() {
                    completeRequest(callback, -1, null, null, "");
                };
                xhr.onerror = requestError;
                xhr.onabort = requestError;
                xhr.ontimeout = requestError;
                forEach(eventHandlers, function(value, key) {
                    xhr.addEventListener(key, value);
                });
                forEach(uploadEventHandlers, function(value, key) {
                    xhr.upload.addEventListener(key, value);
                });
                if (withCredentials) {
                    xhr.withCredentials = true;
                }
                if (responseType) {
                    try {
                        xhr.responseType = responseType;
                    } catch (e) {
                        if (responseType !== "json") {
                            throw e;
                        }
                    }
                }
                xhr.send(isUndefined(post) ? null : post);
            }
            if (timeout > 0) {
                var timeoutId = $browserDefer(timeoutRequest, timeout);
            } else if (isPromiseLike(timeout)) {
                timeout.then(timeoutRequest);
            }
            function timeoutRequest() {
                if (jsonpDone) {
                    jsonpDone();
                }
                if (xhr) {
                    xhr.abort();
                }
            }
            function completeRequest(callback, status, response, headersString, statusText) {
                if (isDefined(timeoutId)) {
                    $browserDefer.cancel(timeoutId);
                }
                jsonpDone = xhr = null;
                callback(status, response, headersString, statusText);
            }
        };
        function jsonpReq(url, callbackPath, done) {
            url = url.replace("JSON_CALLBACK", callbackPath);
            var script = rawDocument.createElement("script"), callback = null;
            script.type = "text/javascript";
            script.src = url;
            script.async = true;
            callback = function(event) {
                script.removeEventListener("load", callback);
                script.removeEventListener("error", callback);
                rawDocument.body.removeChild(script);
                script = null;
                var status = -1;
                var text = "unknown";
                if (event) {
                    if (event.type === "load" && !callbacks.wasCalled(callbackPath)) {
                        event = {
                            type: "error"
                        };
                    }
                    text = event.type;
                    status = event.type === "error" ? 404 : 200;
                }
                if (done) {
                    done(status, text);
                }
            };
            script.addEventListener("load", callback);
            script.addEventListener("error", callback);
            rawDocument.body.appendChild(script);
            return callback;
        }
    }
    var $interpolateMinErr = angular.$interpolateMinErr = minErr("$interpolate");
    $interpolateMinErr.throwNoconcat = function(text) {
        throw $interpolateMinErr("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows " + "interpolations that concatenate multiple expressions when a trusted value is " + "required.  See http://docs.angularjs.org/api/ng.$sce", text);
    };
    $interpolateMinErr.interr = function(text, err) {
        return $interpolateMinErr("interr", "Can't interpolate: {0}\n{1}", text, err.toString());
    };
    function $InterpolateProvider() {
        var startSymbol = "{{";
        var endSymbol = "}}";
        this.startSymbol = function(value) {
            if (value) {
                startSymbol = value;
                return this;
            } else {
                return startSymbol;
            }
        };
        this.endSymbol = function(value) {
            if (value) {
                endSymbol = value;
                return this;
            } else {
                return endSymbol;
            }
        };
        this.$get = [ "$parse", "$exceptionHandler", "$sce", function($parse, $exceptionHandler, $sce) {
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), "g"), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), "g");
            function escape(ch) {
                return "\\\\\\" + ch;
            }
            function unescapeText(text) {
                return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
            }
            function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
                var unwatch = scope.$watch(function constantInterpolateWatch(scope) {
                    unwatch();
                    return constantInterp(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
                if (!text.length || text.indexOf(startSymbol) === -1) {
                    var constantInterp;
                    if (!mustHaveExpression) {
                        var unescapedText = unescapeText(text);
                        constantInterp = valueFn(unescapedText);
                        constantInterp.exp = text;
                        constantInterp.expressions = [];
                        constantInterp.$$watchDelegate = constantWatchDelegate;
                    }
                    return constantInterp;
                }
                allOrNothing = !!allOrNothing;
                var startIndex, endIndex, index = 0, expressions = [], parseFns = [], textLength = text.length, exp, concat = [], expressionPositions = [];
                while (index < textLength) {
                    if ((startIndex = text.indexOf(startSymbol, index)) !== -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1) {
                        if (index !== startIndex) {
                            concat.push(unescapeText(text.substring(index, startIndex)));
                        }
                        exp = text.substring(startIndex + startSymbolLength, endIndex);
                        expressions.push(exp);
                        parseFns.push($parse(exp, parseStringifyInterceptor));
                        index = endIndex + endSymbolLength;
                        expressionPositions.push(concat.length);
                        concat.push("");
                    } else {
                        if (index !== textLength) {
                            concat.push(unescapeText(text.substring(index)));
                        }
                        break;
                    }
                }
                if (trustedContext && concat.length > 1) {
                    $interpolateMinErr.throwNoconcat(text);
                }
                if (!mustHaveExpression || expressions.length) {
                    var compute = function(values) {
                        for (var i = 0, ii = expressions.length; i < ii; i++) {
                            if (allOrNothing && isUndefined(values[i])) return;
                            concat[expressionPositions[i]] = values[i];
                        }
                        return concat.join("");
                    };
                    var getValue = function(value) {
                        return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
                    };
                    return extend(function interpolationFn(context) {
                        var i = 0;
                        var ii = expressions.length;
                        var values = new Array(ii);
                        try {
                            for (;i < ii; i++) {
                                values[i] = parseFns[i](context);
                            }
                            return compute(values);
                        } catch (err) {
                            $exceptionHandler($interpolateMinErr.interr(text, err));
                        }
                    }, {
                        exp: text,
                        expressions: expressions,
                        $$watchDelegate: function(scope, listener) {
                            var lastValue;
                            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                                var currValue = compute(values);
                                if (isFunction(listener)) {
                                    listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                                }
                                lastValue = currValue;
                            });
                        }
                    });
                }
                function parseStringifyInterceptor(value) {
                    try {
                        value = getValue(value);
                        return allOrNothing && !isDefined(value) ? value : stringify(value);
                    } catch (err) {
                        $exceptionHandler($interpolateMinErr.interr(text, err));
                    }
                }
            }
            $interpolate.startSymbol = function() {
                return startSymbol;
            };
            $interpolate.endSymbol = function() {
                return endSymbol;
            };
            return $interpolate;
        } ];
    }
    function $IntervalProvider() {
        this.$get = [ "$rootScope", "$window", "$q", "$$q", "$browser", function($rootScope, $window, $q, $$q, $browser) {
            var intervals = {};
            function interval(fn, delay, count, invokeApply) {
                var hasParams = arguments.length > 4, args = hasParams ? sliceArgs(arguments, 4) : [], setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                count = isDefined(count) ? count : 0;
                promise.$$intervalId = setInterval(function tick() {
                    if (skipApply) {
                        $browser.defer(callback);
                    } else {
                        $rootScope.$evalAsync(callback);
                    }
                    deferred.notify(iteration++);
                    if (count > 0 && iteration >= count) {
                        deferred.resolve(iteration);
                        clearInterval(promise.$$intervalId);
                        delete intervals[promise.$$intervalId];
                    }
                    if (!skipApply) $rootScope.$apply();
                }, delay);
                intervals[promise.$$intervalId] = deferred;
                return promise;
                function callback() {
                    if (!hasParams) {
                        fn(iteration);
                    } else {
                        fn.apply(null, args);
                    }
                }
            }
            interval.cancel = function(promise) {
                if (promise && promise.$$intervalId in intervals) {
                    intervals[promise.$$intervalId].promise.catch(noop);
                    intervals[promise.$$intervalId].reject("canceled");
                    $window.clearInterval(promise.$$intervalId);
                    delete intervals[promise.$$intervalId];
                    return true;
                }
                return false;
            };
            return interval;
        } ];
    }
    var $jsonpCallbacksProvider = function() {
        this.$get = function() {
            var callbacks = angular.callbacks;
            var callbackMap = {};
            function createCallback(callbackId) {
                var callback = function(data) {
                    callback.data = data;
                    callback.called = true;
                };
                callback.id = callbackId;
                return callback;
            }
            return {
                createCallback: function(url) {
                    var callbackId = "_" + (callbacks.$$counter++).toString(36);
                    var callbackPath = "angular.callbacks." + callbackId;
                    var callback = createCallback(callbackId);
                    callbackMap[callbackPath] = callbacks[callbackId] = callback;
                    return callbackPath;
                },
                wasCalled: function(callbackPath) {
                    return callbackMap[callbackPath].called;
                },
                getResponse: function(callbackPath) {
                    return callbackMap[callbackPath].data;
                },
                removeCallback: function(callbackPath) {
                    var callback = callbackMap[callbackPath];
                    delete callbacks[callback.id];
                    delete callbackMap[callbackPath];
                }
            };
        };
    };
    var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
        http: 80,
        https: 443,
        ftp: 21
    };
    var $locationMinErr = minErr("$location");
    function encodePath(path) {
        var segments = path.split("/"), i = segments.length;
        while (i--) {
            segments[i] = encodeUriSegment(segments[i]);
        }
        return segments.join("/");
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
    function parseAppUrl(url, locationObj) {
        if (DOUBLE_SLASH_REGEX.test(url)) {
            throw $locationMinErr("badpath", 'Invalid url "{0}".', url);
        }
        var prefixed = url.charAt(0) !== "/";
        if (prefixed) {
            url = "/" + url;
        }
        var match = urlResolve(url);
        locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === "/" ? match.pathname.substring(1) : match.pathname);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        if (locationObj.$$path && locationObj.$$path.charAt(0) !== "/") {
            locationObj.$$path = "/" + locationObj.$$path;
        }
    }
    function startsWith(str, search) {
        return str.slice(0, search.length) === search;
    }
    function stripBaseUrl(base, url) {
        if (startsWith(url, base)) {
            return url.substr(base.length);
        }
    }
    function stripHash(url) {
        var index = url.indexOf("#");
        return index === -1 ? url : url.substr(0, index);
    }
    function trimEmptyHash(url) {
        return url.replace(/(#.+)|#$/, "$1");
    }
    function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf("/") + 1);
    }
    function serverBase(url) {
        return url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
    }
    function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = true;
        basePrefix = basePrefix || "";
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var pathUrl = stripBaseUrl(appBaseNoFile, url);
            if (!isString(pathUrl)) {
                throw $locationMinErr("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            }
            parseAppUrl(pathUrl, this);
            if (!this.$$path) {
                this.$$path = "/";
            }
            this.$$compose();
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBaseNoFile + this.$$url.substr(1);
            this.$$urlUpdatedByLocation = true;
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && relHref[0] === "#") {
                this.hash(relHref.slice(1));
                return true;
            }
            var appUrl, prevAppUrl;
            var rewrittenUrl;
            if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
                prevAppUrl = appUrl;
                if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
                    rewrittenUrl = appBaseNoFile + (stripBaseUrl("/", appUrl) || appUrl);
                } else {
                    rewrittenUrl = appBase + prevAppUrl;
                }
            } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
                rewrittenUrl = appBaseNoFile + appUrl;
            } else if (appBaseNoFile === url + "/") {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
    }
    function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
            var withoutHashUrl;
            if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === "#") {
                withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
                if (isUndefined(withoutHashUrl)) {
                    withoutHashUrl = withoutBaseUrl;
                }
            } else {
                if (this.$$html5) {
                    withoutHashUrl = withoutBaseUrl;
                } else {
                    withoutHashUrl = "";
                    if (isUndefined(withoutBaseUrl)) {
                        appBase = url;
                        this.replace();
                    }
                }
            }
            parseAppUrl(withoutHashUrl, this);
            this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
            this.$$compose();
            function removeWindowsDriveName(path, url, base) {
                var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
                var firstPathSegmentMatch;
                if (startsWith(url, base)) {
                    url = url.replace(base, "");
                }
                if (windowsFilePathExp.exec(url)) {
                    return path;
                }
                firstPathSegmentMatch = windowsFilePathExp.exec(path);
                return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
            }
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : "");
            this.$$urlUpdatedByLocation = true;
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (stripHash(appBase) === stripHash(url)) {
                this.$$parse(url);
                return true;
            }
            return false;
        };
    }
    function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = true;
        LocationHashbangUrl.apply(this, arguments);
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && relHref[0] === "#") {
                this.hash(relHref.slice(1));
                return true;
            }
            var rewrittenUrl;
            var appUrl;
            if (appBase === stripHash(url)) {
                rewrittenUrl = url;
            } else if (appUrl = stripBaseUrl(appBaseNoFile, url)) {
                rewrittenUrl = appBase + hashPrefix + appUrl;
            } else if (appBaseNoFile === url + "/") {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + hashPrefix + this.$$url;
            this.$$urlUpdatedByLocation = true;
        };
    }
    var locationPrototype = {
        $$absUrl: "",
        $$html5: false,
        $$replace: false,
        absUrl: locationGetter("$$absUrl"),
        url: function(url) {
            if (isUndefined(url)) {
                return this.$$url;
            }
            var match = PATH_MATCH.exec(url);
            if (match[1] || url === "") this.path(decodeURIComponent(match[1]));
            if (match[2] || match[1] || url === "") this.search(match[3] || "");
            this.hash(match[5] || "");
            return this;
        },
        protocol: locationGetter("$$protocol"),
        host: locationGetter("$$host"),
        port: locationGetter("$$port"),
        path: locationGetterSetter("$$path", function(path) {
            path = path !== null ? path.toString() : "";
            return path.charAt(0) === "/" ? path : "/" + path;
        }),
        search: function(search, paramValue) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (isString(search) || isNumber(search)) {
                    search = search.toString();
                    this.$$search = parseKeyValue(search);
                } else if (isObject(search)) {
                    search = copy(search, {});
                    forEach(search, function(value, key) {
                        if (value == null) delete search[key];
                    });
                    this.$$search = search;
                } else {
                    throw $locationMinErr("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                }
                break;

              default:
                if (isUndefined(paramValue) || paramValue === null) {
                    delete this.$$search[search];
                } else {
                    this.$$search[search] = paramValue;
                }
            }
            this.$$compose();
            return this;
        },
        hash: locationGetterSetter("$$hash", function(hash) {
            return hash !== null ? hash.toString() : "";
        }),
        replace: function() {
            this.$$replace = true;
            return this;
        }
    };
    forEach([ LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url ], function(Location) {
        Location.prototype = Object.create(locationPrototype);
        Location.prototype.state = function(state) {
            if (!arguments.length) {
                return this.$$state;
            }
            if (Location !== LocationHtml5Url || !this.$$html5) {
                throw $locationMinErr("nostate", "History API state support is available only " + "in HTML5 mode and only in browsers supporting HTML5 History API");
            }
            this.$$state = isUndefined(state) ? null : state;
            this.$$urlUpdatedByLocation = true;
            return this;
        };
    });
    function locationGetter(property) {
        return function() {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function(value) {
            if (isUndefined(value)) {
                return this[property];
            }
            this[property] = preprocess(value);
            this.$$compose();
            return this;
        };
    }
    function $LocationProvider() {
        var hashPrefix = "!", html5Mode = {
            enabled: false,
            requireBase: true,
            rewriteLinks: true
        };
        this.hashPrefix = function(prefix) {
            if (isDefined(prefix)) {
                hashPrefix = prefix;
                return this;
            } else {
                return hashPrefix;
            }
        };
        this.html5Mode = function(mode) {
            if (isBoolean(mode)) {
                html5Mode.enabled = mode;
                return this;
            } else if (isObject(mode)) {
                if (isBoolean(mode.enabled)) {
                    html5Mode.enabled = mode.enabled;
                }
                if (isBoolean(mode.requireBase)) {
                    html5Mode.requireBase = mode.requireBase;
                }
                if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
                    html5Mode.rewriteLinks = mode.rewriteLinks;
                }
                return this;
            } else {
                return html5Mode;
            }
        };
        this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function($rootScope, $browser, $sniffer, $rootElement, $window) {
            var $location, LocationMode, baseHref = $browser.baseHref(), initialUrl = $browser.url(), appBase;
            if (html5Mode.enabled) {
                if (!baseHref && html5Mode.requireBase) {
                    throw $locationMinErr("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
                }
                appBase = serverBase(initialUrl) + (baseHref || "/");
                LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
            } else {
                appBase = stripHash(initialUrl);
                LocationMode = LocationHashbangUrl;
            }
            var appBaseNoFile = stripFile(appBase);
            $location = new LocationMode(appBase, appBaseNoFile, "#" + hashPrefix);
            $location.$$parseLinkUrl(initialUrl, initialUrl);
            $location.$$state = $browser.state();
            var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
            function setBrowserUrlWithFallback(url, replace, state) {
                var oldUrl = $location.url();
                var oldState = $location.$$state;
                try {
                    $browser.url(url, replace, state);
                    $location.$$state = $browser.state();
                } catch (e) {
                    $location.url(oldUrl);
                    $location.$$state = oldState;
                    throw e;
                }
            }
            $rootElement.on("click", function(event) {
                var rewriteLinks = html5Mode.rewriteLinks;
                if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;
                var elm = jqLite(event.target);
                while (nodeName_(elm[0]) !== "a") {
                    if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
                }
                if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;
                var absHref = elm.prop("href");
                var relHref = elm.attr("href") || elm.attr("xlink:href");
                if (isObject(absHref) && absHref.toString() === "[object SVGAnimatedString]") {
                    absHref = urlResolve(absHref.animVal).href;
                }
                if (IGNORE_URI_REGEXP.test(absHref)) return;
                if (absHref && !elm.attr("target") && !event.isDefaultPrevented()) {
                    if ($location.$$parseLinkUrl(absHref, relHref)) {
                        event.preventDefault();
                        if ($location.absUrl() !== $browser.url()) {
                            $rootScope.$apply();
                            $window.angular["ff-684208-preventDefault"] = true;
                        }
                    }
                }
            });
            if (trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl)) {
                $browser.url($location.absUrl(), true);
            }
            var initializing = true;
            $browser.onUrlChange(function(newUrl, newState) {
                if (!startsWith(newUrl, appBaseNoFile)) {
                    $window.location.href = newUrl;
                    return;
                }
                $rootScope.$evalAsync(function() {
                    var oldUrl = $location.absUrl();
                    var oldState = $location.$$state;
                    var defaultPrevented;
                    newUrl = trimEmptyHash(newUrl);
                    $location.$$parse(newUrl);
                    $location.$$state = newState;
                    defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, newState, oldState).defaultPrevented;
                    if ($location.absUrl() !== newUrl) return;
                    if (defaultPrevented) {
                        $location.$$parse(oldUrl);
                        $location.$$state = oldState;
                        setBrowserUrlWithFallback(oldUrl, false, oldState);
                    } else {
                        initializing = false;
                        afterLocationChange(oldUrl, oldState);
                    }
                });
                if (!$rootScope.$$phase) $rootScope.$digest();
            });
            $rootScope.$watch(function $locationWatch() {
                if (initializing || $location.$$urlUpdatedByLocation) {
                    $location.$$urlUpdatedByLocation = false;
                    var oldUrl = trimEmptyHash($browser.url());
                    var newUrl = trimEmptyHash($location.absUrl());
                    var oldState = $browser.state();
                    var currentReplace = $location.$$replace;
                    var urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
                    if (initializing || urlOrStateChanged) {
                        initializing = false;
                        $rootScope.$evalAsync(function() {
                            var newUrl = $location.absUrl();
                            var defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                            if ($location.absUrl() !== newUrl) return;
                            if (defaultPrevented) {
                                $location.$$parse(oldUrl);
                                $location.$$state = oldState;
                            } else {
                                if (urlOrStateChanged) {
                                    setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                                }
                                afterLocationChange(oldUrl, oldState);
                            }
                        });
                    }
                }
                $location.$$replace = false;
            });
            return $location;
            function afterLocationChange(oldUrl, oldState) {
                $rootScope.$broadcast("$locationChangeSuccess", $location.absUrl(), oldUrl, $location.$$state, oldState);
            }
        } ];
    }
    function $LogProvider() {
        var debug = true, self = this;
        this.debugEnabled = function(flag) {
            if (isDefined(flag)) {
                debug = flag;
                return this;
            } else {
                return debug;
            }
        };
        this.$get = [ "$window", function($window) {
            var formatStackTrace = msie || /\bEdge\//.test($window.navigator && $window.navigator.userAgent);
            return {
                log: consoleLog("log"),
                info: consoleLog("info"),
                warn: consoleLog("warn"),
                error: consoleLog("error"),
                debug: function() {
                    var fn = consoleLog("debug");
                    return function() {
                        if (debug) {
                            fn.apply(self, arguments);
                        }
                    };
                }()
            };
            function formatError(arg) {
                if (arg instanceof Error) {
                    if (arg.stack && formatStackTrace) {
                        arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? "Error: " + arg.message + "\n" + arg.stack : arg.stack;
                    } else if (arg.sourceURL) {
                        arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line;
                    }
                }
                return arg;
            }
            function consoleLog(type) {
                var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
                try {
                    hasApply = !!logFn.apply;
                } catch (e) {}
                if (hasApply) {
                    return function() {
                        var args = [];
                        forEach(arguments, function(arg) {
                            args.push(formatError(arg));
                        });
                        return logFn.apply(console, args);
                    };
                }
                return function(arg1, arg2) {
                    logFn(arg1, arg2 == null ? "" : arg2);
                };
            }
        } ];
    }
    var $parseMinErr = minErr("$parse");
    var objectValueOf = {}.constructor.prototype.valueOf;
    function getStringValue(name) {
        return name + "";
    }
    var OPERATORS = createMap();
    forEach("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(operator) {
        OPERATORS[operator] = true;
    });
    var ESCAPE = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    };
    var Lexer = function Lexer(options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function(text) {
            this.text = text;
            this.index = 0;
            this.tokens = [];
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                if (ch === '"' || ch === "'") {
                    this.readString(ch);
                } else if (this.isNumber(ch) || ch === "." && this.isNumber(this.peek())) {
                    this.readNumber();
                } else if (this.isIdentifierStart(this.peekMultichar())) {
                    this.readIdent();
                } else if (this.is(ch, "(){}[].,;:?")) {
                    this.tokens.push({
                        index: this.index,
                        text: ch
                    });
                    this.index++;
                } else if (this.isWhitespace(ch)) {
                    this.index++;
                } else {
                    var ch2 = ch + this.peek();
                    var ch3 = ch2 + this.peek(2);
                    var op1 = OPERATORS[ch];
                    var op2 = OPERATORS[ch2];
                    var op3 = OPERATORS[ch3];
                    if (op1 || op2 || op3) {
                        var token = op3 ? ch3 : op2 ? ch2 : ch;
                        this.tokens.push({
                            index: this.index,
                            text: token,
                            operator: true
                        });
                        this.index += token.length;
                    } else {
                        this.throwError("Unexpected next character ", this.index, this.index + 1);
                    }
                }
            }
            return this.tokens;
        },
        is: function(ch, chars) {
            return chars.indexOf(ch) !== -1;
        },
        peek: function(i) {
            var num = i || 1;
            return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
        },
        isNumber: function(ch) {
            return "0" <= ch && ch <= "9" && typeof ch === "string";
        },
        isWhitespace: function(ch) {
            return ch === " " || ch === "\r" || ch === "\t" || ch === "\n" || ch === "\v" || ch === " ";
        },
        isIdentifierStart: function(ch) {
            return this.options.isIdentifierStart ? this.options.isIdentifierStart(ch, this.codePointAt(ch)) : this.isValidIdentifierStart(ch);
        },
        isValidIdentifierStart: function(ch) {
            return "a" <= ch && ch <= "z" || "A" <= ch && ch <= "Z" || "_" === ch || ch === "$";
        },
        isIdentifierContinue: function(ch) {
            return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(ch, this.codePointAt(ch)) : this.isValidIdentifierContinue(ch);
        },
        isValidIdentifierContinue: function(ch, cp) {
            return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
        },
        codePointAt: function(ch) {
            if (ch.length === 1) return ch.charCodeAt(0);
            return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 56613888;
        },
        peekMultichar: function() {
            var ch = this.text.charAt(this.index);
            var peek = this.peek();
            if (!peek) {
                return ch;
            }
            var cp1 = ch.charCodeAt(0);
            var cp2 = peek.charCodeAt(0);
            if (cp1 >= 55296 && cp1 <= 56319 && cp2 >= 56320 && cp2 <= 57343) {
                return ch + peek;
            }
            return ch;
        },
        isExpOperator: function(ch) {
            return ch === "-" || ch === "+" || this.isNumber(ch);
        },
        throwError: function(error, start, end) {
            end = end || this.index;
            var colStr = isDefined(start) ? "s " + start + "-" + this.index + " [" + this.text.substring(start, end) + "]" : " " + end;
            throw $parseMinErr("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", error, colStr, this.text);
        },
        readNumber: function() {
            var number = "";
            var start = this.index;
            while (this.index < this.text.length) {
                var ch = lowercase(this.text.charAt(this.index));
                if (ch === "." || this.isNumber(ch)) {
                    number += ch;
                } else {
                    var peekCh = this.peek();
                    if (ch === "e" && this.isExpOperator(peekCh)) {
                        number += ch;
                    } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) === "e") {
                        number += ch;
                    } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) === "e") {
                        this.throwError("Invalid exponent");
                    } else {
                        break;
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: number,
                constant: true,
                value: Number(number)
            });
        },
        readIdent: function() {
            var start = this.index;
            this.index += this.peekMultichar().length;
            while (this.index < this.text.length) {
                var ch = this.peekMultichar();
                if (!this.isIdentifierContinue(ch)) {
                    break;
                }
                this.index += ch.length;
            }
            this.tokens.push({
                index: start,
                text: this.text.slice(start, this.index),
                identifier: true
            });
        },
        readString: function(quote) {
            var start = this.index;
            this.index++;
            var string = "";
            var rawString = quote;
            var escape = false;
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                rawString += ch;
                if (escape) {
                    if (ch === "u") {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        if (!hex.match(/[\da-f]{4}/i)) {
                            this.throwError("Invalid unicode escape [\\u" + hex + "]");
                        }
                        this.index += 4;
                        string += String.fromCharCode(parseInt(hex, 16));
                    } else {
                        var rep = ESCAPE[ch];
                        string = string + (rep || ch);
                    }
                    escape = false;
                } else if (ch === "\\") {
                    escape = true;
                } else if (ch === quote) {
                    this.index++;
                    this.tokens.push({
                        index: start,
                        text: rawString,
                        constant: true,
                        value: string
                    });
                    return;
                } else {
                    string += ch;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", start);
        }
    };
    var AST = function AST(lexer, options) {
        this.lexer = lexer;
        this.options = options;
    };
    AST.Program = "Program";
    AST.ExpressionStatement = "ExpressionStatement";
    AST.AssignmentExpression = "AssignmentExpression";
    AST.ConditionalExpression = "ConditionalExpression";
    AST.LogicalExpression = "LogicalExpression";
    AST.BinaryExpression = "BinaryExpression";
    AST.UnaryExpression = "UnaryExpression";
    AST.CallExpression = "CallExpression";
    AST.MemberExpression = "MemberExpression";
    AST.Identifier = "Identifier";
    AST.Literal = "Literal";
    AST.ArrayExpression = "ArrayExpression";
    AST.Property = "Property";
    AST.ObjectExpression = "ObjectExpression";
    AST.ThisExpression = "ThisExpression";
    AST.LocalsExpression = "LocalsExpression";
    AST.NGValueParameter = "NGValueParameter";
    AST.prototype = {
        ast: function(text) {
            this.text = text;
            this.tokens = this.lexer.lex(text);
            var value = this.program();
            if (this.tokens.length !== 0) {
                this.throwError("is an unexpected token", this.tokens[0]);
            }
            return value;
        },
        program: function() {
            var body = [];
            while (true) {
                if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]")) body.push(this.expressionStatement());
                if (!this.expect(";")) {
                    return {
                        type: AST.Program,
                        body: body
                    };
                }
            }
        },
        expressionStatement: function() {
            return {
                type: AST.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            var left = this.expression();
            while (this.expect("|")) {
                left = this.filter(left);
            }
            return left;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var result = this.ternary();
            if (this.expect("=")) {
                if (!isAssignable(result)) {
                    throw $parseMinErr("lval", "Trying to assign a value to a non l-value");
                }
                result = {
                    type: AST.AssignmentExpression,
                    left: result,
                    right: this.assignment(),
                    operator: "="
                };
            }
            return result;
        },
        ternary: function() {
            var test = this.logicalOR();
            var alternate;
            var consequent;
            if (this.expect("?")) {
                alternate = this.expression();
                if (this.consume(":")) {
                    consequent = this.expression();
                    return {
                        type: AST.ConditionalExpression,
                        test: test,
                        alternate: alternate,
                        consequent: consequent
                    };
                }
            }
            return test;
        },
        logicalOR: function() {
            var left = this.logicalAND();
            while (this.expect("||")) {
                left = {
                    type: AST.LogicalExpression,
                    operator: "||",
                    left: left,
                    right: this.logicalAND()
                };
            }
            return left;
        },
        logicalAND: function() {
            var left = this.equality();
            while (this.expect("&&")) {
                left = {
                    type: AST.LogicalExpression,
                    operator: "&&",
                    left: left,
                    right: this.equality()
                };
            }
            return left;
        },
        equality: function() {
            var left = this.relational();
            var token;
            while (token = this.expect("==", "!=", "===", "!==")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.relational()
                };
            }
            return left;
        },
        relational: function() {
            var left = this.additive();
            var token;
            while (token = this.expect("<", ">", "<=", ">=")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.additive()
                };
            }
            return left;
        },
        additive: function() {
            var left = this.multiplicative();
            var token;
            while (token = this.expect("+", "-")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.multiplicative()
                };
            }
            return left;
        },
        multiplicative: function() {
            var left = this.unary();
            var token;
            while (token = this.expect("*", "/", "%")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.unary()
                };
            }
            return left;
        },
        unary: function() {
            var token;
            if (token = this.expect("+", "-", "!")) {
                return {
                    type: AST.UnaryExpression,
                    operator: token.text,
                    prefix: true,
                    argument: this.unary()
                };
            } else {
                return this.primary();
            }
        },
        primary: function() {
            var primary;
            if (this.expect("(")) {
                primary = this.filterChain();
                this.consume(")");
            } else if (this.expect("[")) {
                primary = this.arrayDeclaration();
            } else if (this.expect("{")) {
                primary = this.object();
            } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
                primary = copy(this.selfReferential[this.consume().text]);
            } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
                primary = {
                    type: AST.Literal,
                    value: this.options.literals[this.consume().text]
                };
            } else if (this.peek().identifier) {
                primary = this.identifier();
            } else if (this.peek().constant) {
                primary = this.constant();
            } else {
                this.throwError("not a primary expression", this.peek());
            }
            var next;
            while (next = this.expect("(", "[", ".")) {
                if (next.text === "(") {
                    primary = {
                        type: AST.CallExpression,
                        callee: primary,
                        arguments: this.parseArguments()
                    };
                    this.consume(")");
                } else if (next.text === "[") {
                    primary = {
                        type: AST.MemberExpression,
                        object: primary,
                        property: this.expression(),
                        computed: true
                    };
                    this.consume("]");
                } else if (next.text === ".") {
                    primary = {
                        type: AST.MemberExpression,
                        object: primary,
                        property: this.identifier(),
                        computed: false
                    };
                } else {
                    this.throwError("IMPOSSIBLE");
                }
            }
            return primary;
        },
        filter: function(baseExpression) {
            var args = [ baseExpression ];
            var result = {
                type: AST.CallExpression,
                callee: this.identifier(),
                arguments: args,
                filter: true
            };
            while (this.expect(":")) {
                args.push(this.expression());
            }
            return result;
        },
        parseArguments: function() {
            var args = [];
            if (this.peekToken().text !== ")") {
                do {
                    args.push(this.filterChain());
                } while (this.expect(","));
            }
            return args;
        },
        identifier: function() {
            var token = this.consume();
            if (!token.identifier) {
                this.throwError("is not a valid identifier", token);
            }
            return {
                type: AST.Identifier,
                name: token.text
            };
        },
        constant: function() {
            return {
                type: AST.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var elements = [];
            if (this.peekToken().text !== "]") {
                do {
                    if (this.peek("]")) {
                        break;
                    }
                    elements.push(this.expression());
                } while (this.expect(","));
            }
            this.consume("]");
            return {
                type: AST.ArrayExpression,
                elements: elements
            };
        },
        object: function() {
            var properties = [], property;
            if (this.peekToken().text !== "}") {
                do {
                    if (this.peek("}")) {
                        break;
                    }
                    property = {
                        type: AST.Property,
                        kind: "init"
                    };
                    if (this.peek().constant) {
                        property.key = this.constant();
                        property.computed = false;
                        this.consume(":");
                        property.value = this.expression();
                    } else if (this.peek().identifier) {
                        property.key = this.identifier();
                        property.computed = false;
                        if (this.peek(":")) {
                            this.consume(":");
                            property.value = this.expression();
                        } else {
                            property.value = property.key;
                        }
                    } else if (this.peek("[")) {
                        this.consume("[");
                        property.key = this.expression();
                        this.consume("]");
                        property.computed = true;
                        this.consume(":");
                        property.value = this.expression();
                    } else {
                        this.throwError("invalid key", this.peek());
                    }
                    properties.push(property);
                } while (this.expect(","));
            }
            this.consume("}");
            return {
                type: AST.ObjectExpression,
                properties: properties
            };
        },
        throwError: function(msg, token) {
            throw $parseMinErr("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        consume: function(e1) {
            if (this.tokens.length === 0) {
                throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            }
            var token = this.expect(e1);
            if (!token) {
                this.throwError("is unexpected, expecting [" + e1 + "]", this.peek());
            }
            return token;
        },
        peekToken: function() {
            if (this.tokens.length === 0) {
                throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            }
            return this.tokens[0];
        },
        peek: function(e1, e2, e3, e4) {
            return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function(i, e1, e2, e3, e4) {
            if (this.tokens.length > i) {
                var token = this.tokens[i];
                var t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
                    return token;
                }
            }
            return false;
        },
        expect: function(e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            if (token) {
                this.tokens.shift();
                return token;
            }
            return false;
        },
        selfReferential: {
            this: {
                type: AST.ThisExpression
            },
            $locals: {
                type: AST.LocalsExpression
            }
        }
    };
    function ifDefined(v, d) {
        return typeof v !== "undefined" ? v : d;
    }
    function plusFn(l, r) {
        if (typeof l === "undefined") return r;
        if (typeof r === "undefined") return l;
        return l + r;
    }
    function isStateless($filter, filterName) {
        var fn = $filter(filterName);
        return !fn.$stateful;
    }
    function findConstantAndWatchExpressions(ast, $filter) {
        var allConstants;
        var argsToWatch;
        var isStatelessFilter;
        switch (ast.type) {
          case AST.Program:
            allConstants = true;
            forEach(ast.body, function(expr) {
                findConstantAndWatchExpressions(expr.expression, $filter);
                allConstants = allConstants && expr.expression.constant;
            });
            ast.constant = allConstants;
            break;

          case AST.Literal:
            ast.constant = true;
            ast.toWatch = [];
            break;

          case AST.UnaryExpression:
            findConstantAndWatchExpressions(ast.argument, $filter);
            ast.constant = ast.argument.constant;
            ast.toWatch = ast.argument.toWatch;
            break;

          case AST.BinaryExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
            break;

          case AST.LogicalExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.ConditionalExpression:
            findConstantAndWatchExpressions(ast.test, $filter);
            findConstantAndWatchExpressions(ast.alternate, $filter);
            findConstantAndWatchExpressions(ast.consequent, $filter);
            ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.Identifier:
            ast.constant = false;
            ast.toWatch = [ ast ];
            break;

          case AST.MemberExpression:
            findConstantAndWatchExpressions(ast.object, $filter);
            if (ast.computed) {
                findConstantAndWatchExpressions(ast.property, $filter);
            }
            ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
            ast.toWatch = [ ast ];
            break;

          case AST.CallExpression:
            isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;
            allConstants = isStatelessFilter;
            argsToWatch = [];
            forEach(ast.arguments, function(expr) {
                findConstantAndWatchExpressions(expr, $filter);
                allConstants = allConstants && expr.constant;
                if (!expr.constant) {
                    argsToWatch.push.apply(argsToWatch, expr.toWatch);
                }
            });
            ast.constant = allConstants;
            ast.toWatch = isStatelessFilter ? argsToWatch : [ ast ];
            break;

          case AST.AssignmentExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = [ ast ];
            break;

          case AST.ArrayExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.elements, function(expr) {
                findConstantAndWatchExpressions(expr, $filter);
                allConstants = allConstants && expr.constant;
                if (!expr.constant) {
                    argsToWatch.push.apply(argsToWatch, expr.toWatch);
                }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ObjectExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.properties, function(property) {
                findConstantAndWatchExpressions(property.value, $filter);
                allConstants = allConstants && property.value.constant && !property.computed;
                if (!property.value.constant) {
                    argsToWatch.push.apply(argsToWatch, property.value.toWatch);
                }
                if (property.computed) {
                    findConstantAndWatchExpressions(property.key, $filter);
                    if (!property.key.constant) {
                        argsToWatch.push.apply(argsToWatch, property.key.toWatch);
                    }
                }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ThisExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;

          case AST.LocalsExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;
        }
    }
    function getInputs(body) {
        if (body.length !== 1) return;
        var lastExpression = body[0].expression;
        var candidate = lastExpression.toWatch;
        if (candidate.length !== 1) return candidate;
        return candidate[0] !== lastExpression ? candidate : undefined;
    }
    function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
    }
    function assignableAST(ast) {
        if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
            return {
                type: AST.AssignmentExpression,
                left: ast.body[0].expression,
                right: {
                    type: AST.NGValueParameter
                },
                operator: "="
            };
        }
    }
    function isLiteral(ast) {
        return ast.body.length === 0 || ast.body.length === 1 && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
    }
    function isConstant(ast) {
        return ast.constant;
    }
    function ASTCompiler($filter) {
        this.$filter = $filter;
    }
    ASTCompiler.prototype = {
        compile: function(ast) {
            var self = this;
            this.state = {
                nextId: 0,
                filters: {},
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            findConstantAndWatchExpressions(ast, self.$filter);
            var extra = "";
            var assignable;
            this.stage = "assign";
            if (assignable = assignableAST(ast)) {
                this.state.computing = "assign";
                var result = this.nextId();
                this.recurse(assignable, result);
                this.return_(result);
                extra = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            }
            var toWatch = getInputs(ast.body);
            self.stage = "inputs";
            forEach(toWatch, function(watch, key) {
                var fnKey = "fn" + key;
                self.state[fnKey] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                self.state.computing = fnKey;
                var intoId = self.nextId();
                self.recurse(watch, intoId);
                self.return_(intoId);
                self.state.inputs.push(fnKey);
                watch.watchId = key;
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(ast);
            var fnString = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + extra + this.watchFns() + "return fn;";
            var fn = new Function("$filter", "getStringValue", "ifDefined", "plus", fnString)(this.$filter, getStringValue, ifDefined, plusFn);
            this.state = this.stage = undefined;
            return fn;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var result = [];
            var fns = this.state.inputs;
            var self = this;
            forEach(fns, function(name) {
                result.push("var " + name + "=" + self.generateFunction(name, "s"));
            });
            if (fns.length) {
                result.push("fn.inputs=[" + fns.join(",") + "];");
            }
            return result.join("");
        },
        generateFunction: function(name, params) {
            return "function(" + params + "){" + this.varsPrefix(name) + this.body(name) + "};";
        },
        filterPrefix: function() {
            var parts = [];
            var self = this;
            forEach(this.state.filters, function(id, filter) {
                parts.push(id + "=$filter(" + self.escape(filter) + ")");
            });
            if (parts.length) return "var " + parts.join(",") + ";";
            return "";
        },
        varsPrefix: function(section) {
            return this.state[section].vars.length ? "var " + this.state[section].vars.join(",") + ";" : "";
        },
        body: function(section) {
            return this.state[section].body.join("");
        },
        recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var left, right, self = this, args, expression, computed;
            recursionFn = recursionFn || noop;
            if (!skipWatchIdCheck && isDefined(ast.watchId)) {
                intoId = intoId || this.nextId();
                this.if_("i", this.lazyAssign(intoId, this.computedMember("i", ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true));
                return;
            }
            switch (ast.type) {
              case AST.Program:
                forEach(ast.body, function(expression, pos) {
                    self.recurse(expression.expression, undefined, undefined, function(expr) {
                        right = expr;
                    });
                    if (pos !== ast.body.length - 1) {
                        self.current().body.push(right, ";");
                    } else {
                        self.return_(right);
                    }
                });
                break;

              case AST.Literal:
                expression = this.escape(ast.value);
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.UnaryExpression:
                this.recurse(ast.argument, undefined, undefined, function(expr) {
                    right = expr;
                });
                expression = ast.operator + "(" + this.ifDefined(right, 0) + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.BinaryExpression:
                this.recurse(ast.left, undefined, undefined, function(expr) {
                    left = expr;
                });
                this.recurse(ast.right, undefined, undefined, function(expr) {
                    right = expr;
                });
                if (ast.operator === "+") {
                    expression = this.plus(left, right);
                } else if (ast.operator === "-") {
                    expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
                } else {
                    expression = "(" + left + ")" + ast.operator + "(" + right + ")";
                }
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.LogicalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.left, intoId);
                self.if_(ast.operator === "&&" ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
                recursionFn(intoId);
                break;

              case AST.ConditionalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.test, intoId);
                self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
                recursionFn(intoId);
                break;

              case AST.Identifier:
                intoId = intoId || this.nextId();
                if (nameId) {
                    nameId.context = self.stage === "inputs" ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", ast.name) + "?l:s");
                    nameId.computed = false;
                    nameId.name = ast.name;
                }
                self.if_(self.stage === "inputs" || self.not(self.getHasOwnProperty("l", ast.name)), function() {
                    self.if_(self.stage === "inputs" || "s", function() {
                        if (create && create !== 1) {
                            self.if_(self.isNull(self.nonComputedMember("s", ast.name)), self.lazyAssign(self.nonComputedMember("s", ast.name), "{}"));
                        }
                        self.assign(intoId, self.nonComputedMember("s", ast.name));
                    });
                }, intoId && self.lazyAssign(intoId, self.nonComputedMember("l", ast.name)));
                recursionFn(intoId);
                break;

              case AST.MemberExpression:
                left = nameId && (nameId.context = this.nextId()) || this.nextId();
                intoId = intoId || this.nextId();
                self.recurse(ast.object, left, undefined, function() {
                    self.if_(self.notNull(left), function() {
                        if (ast.computed) {
                            right = self.nextId();
                            self.recurse(ast.property, right);
                            self.getStringValue(right);
                            if (create && create !== 1) {
                                self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), "{}"));
                            }
                            expression = self.computedMember(left, right);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = true;
                                nameId.name = right;
                            }
                        } else {
                            if (create && create !== 1) {
                                self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), "{}"));
                            }
                            expression = self.nonComputedMember(left, ast.property.name);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = false;
                                nameId.name = ast.property.name;
                            }
                        }
                    }, function() {
                        self.assign(intoId, "undefined");
                    });
                    recursionFn(intoId);
                }, !!create);
                break;

              case AST.CallExpression:
                intoId = intoId || this.nextId();
                if (ast.filter) {
                    right = self.filter(ast.callee.name);
                    args = [];
                    forEach(ast.arguments, function(expr) {
                        var argument = self.nextId();
                        self.recurse(expr, argument);
                        args.push(argument);
                    });
                    expression = right + "(" + args.join(",") + ")";
                    self.assign(intoId, expression);
                    recursionFn(intoId);
                } else {
                    right = self.nextId();
                    left = {};
                    args = [];
                    self.recurse(ast.callee, right, left, function() {
                        self.if_(self.notNull(right), function() {
                            forEach(ast.arguments, function(expr) {
                                self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
                                    args.push(argument);
                                });
                            });
                            if (left.name) {
                                expression = self.member(left.context, left.name, left.computed) + "(" + args.join(",") + ")";
                            } else {
                                expression = right + "(" + args.join(",") + ")";
                            }
                            self.assign(intoId, expression);
                        }, function() {
                            self.assign(intoId, "undefined");
                        });
                        recursionFn(intoId);
                    });
                }
                break;

              case AST.AssignmentExpression:
                right = this.nextId();
                left = {};
                this.recurse(ast.left, undefined, left, function() {
                    self.if_(self.notNull(left.context), function() {
                        self.recurse(ast.right, right);
                        expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                        self.assign(intoId, expression);
                        recursionFn(intoId || expression);
                    });
                }, 1);
                break;

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
                        args.push(argument);
                    });
                });
                expression = "[" + args.join(",") + "]";
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.ObjectExpression:
                args = [];
                computed = false;
                forEach(ast.properties, function(property) {
                    if (property.computed) {
                        computed = true;
                    }
                });
                if (computed) {
                    intoId = intoId || this.nextId();
                    this.assign(intoId, "{}");
                    forEach(ast.properties, function(property) {
                        if (property.computed) {
                            left = self.nextId();
                            self.recurse(property.key, left);
                        } else {
                            left = property.key.type === AST.Identifier ? property.key.name : "" + property.key.value;
                        }
                        right = self.nextId();
                        self.recurse(property.value, right);
                        self.assign(self.member(intoId, left, property.computed), right);
                    });
                } else {
                    forEach(ast.properties, function(property) {
                        self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
                            args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : "" + property.key.value) + ":" + expr);
                        });
                    });
                    expression = "{" + args.join(",") + "}";
                    this.assign(intoId, expression);
                }
                recursionFn(intoId || expression);
                break;

              case AST.ThisExpression:
                this.assign(intoId, "s");
                recursionFn(intoId || "s");
                break;

              case AST.LocalsExpression:
                this.assign(intoId, "l");
                recursionFn(intoId || "l");
                break;

              case AST.NGValueParameter:
                this.assign(intoId, "v");
                recursionFn(intoId || "v");
                break;
            }
        },
        getHasOwnProperty: function(element, property) {
            var key = element + "." + property;
            var own = this.current().own;
            if (!own.hasOwnProperty(key)) {
                own[key] = this.nextId(false, element + "&&(" + this.escape(property) + " in " + element + ")");
            }
            return own[key];
        },
        assign: function(id, value) {
            if (!id) return;
            this.current().body.push(id, "=", value, ";");
            return id;
        },
        filter: function(filterName) {
            if (!this.state.filters.hasOwnProperty(filterName)) {
                this.state.filters[filterName] = this.nextId(true);
            }
            return this.state.filters[filterName];
        },
        ifDefined: function(id, defaultValue) {
            return "ifDefined(" + id + "," + this.escape(defaultValue) + ")";
        },
        plus: function(left, right) {
            return "plus(" + left + "," + right + ")";
        },
        return_: function(id) {
            this.current().body.push("return ", id, ";");
        },
        if_: function(test, alternate, consequent) {
            if (test === true) {
                alternate();
            } else {
                var body = this.current().body;
                body.push("if(", test, "){");
                alternate();
                body.push("}");
                if (consequent) {
                    body.push("else{");
                    consequent();
                    body.push("}");
                }
            }
        },
        not: function(expression) {
            return "!(" + expression + ")";
        },
        isNull: function(expression) {
            return expression + "==null";
        },
        notNull: function(expression) {
            return expression + "!=null";
        },
        nonComputedMember: function(left, right) {
            var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;
            var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
            if (SAFE_IDENTIFIER.test(right)) {
                return left + "." + right;
            } else {
                return left + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
            }
        },
        computedMember: function(left, right) {
            return left + "[" + right + "]";
        },
        member: function(left, right, computed) {
            if (computed) return this.computedMember(left, right);
            return this.nonComputedMember(left, right);
        },
        getStringValue: function(item) {
            this.assign(item, "getStringValue(" + item + ")");
        },
        lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var self = this;
            return function() {
                self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
            };
        },
        lazyAssign: function(id, value) {
            var self = this;
            return function() {
                self.assign(id, value);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(c) {
            return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(value) {
            if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (isNumber(value)) return value.toString();
            if (value === true) return "true";
            if (value === false) return "false";
            if (value === null) return "null";
            if (typeof value === "undefined") return "undefined";
            throw $parseMinErr("esc", "IMPOSSIBLE");
        },
        nextId: function(skip, init) {
            var id = "v" + this.state.nextId++;
            if (!skip) {
                this.current().vars.push(id + (init ? "=" + init : ""));
            }
            return id;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    };
    function ASTInterpreter($filter) {
        this.$filter = $filter;
    }
    ASTInterpreter.prototype = {
        compile: function(ast) {
            var self = this;
            findConstantAndWatchExpressions(ast, self.$filter);
            var assignable;
            var assign;
            if (assignable = assignableAST(ast)) {
                assign = this.recurse(assignable);
            }
            var toWatch = getInputs(ast.body);
            var inputs;
            if (toWatch) {
                inputs = [];
                forEach(toWatch, function(watch, key) {
                    var input = self.recurse(watch);
                    watch.input = input;
                    inputs.push(input);
                    watch.watchId = key;
                });
            }
            var expressions = [];
            forEach(ast.body, function(expression) {
                expressions.push(self.recurse(expression.expression));
            });
            var fn = ast.body.length === 0 ? noop : ast.body.length === 1 ? expressions[0] : function(scope, locals) {
                var lastValue;
                forEach(expressions, function(exp) {
                    lastValue = exp(scope, locals);
                });
                return lastValue;
            };
            if (assign) {
                fn.assign = function(scope, value, locals) {
                    return assign(scope, locals, value);
                };
            }
            if (inputs) {
                fn.inputs = inputs;
            }
            return fn;
        },
        recurse: function(ast, context, create) {
            var left, right, self = this, args;
            if (ast.input) {
                return this.inputs(ast.input, ast.watchId);
            }
            switch (ast.type) {
              case AST.Literal:
                return this.value(ast.value, context);

              case AST.UnaryExpression:
                right = this.recurse(ast.argument);
                return this["unary" + ast.operator](right, context);

              case AST.BinaryExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.LogicalExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.ConditionalExpression:
                return this["ternary?:"](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);

              case AST.Identifier:
                return self.identifier(ast.name, context, create);

              case AST.MemberExpression:
                left = this.recurse(ast.object, false, !!create);
                if (!ast.computed) {
                    right = ast.property.name;
                }
                if (ast.computed) right = this.recurse(ast.property);
                return ast.computed ? this.computedMember(left, right, context, create) : this.nonComputedMember(left, right, context, create);

              case AST.CallExpression:
                args = [];
                forEach(ast.arguments, function(expr) {
                    args.push(self.recurse(expr));
                });
                if (ast.filter) right = this.$filter(ast.callee.name);
                if (!ast.filter) right = this.recurse(ast.callee, true);
                return ast.filter ? function(scope, locals, assign, inputs) {
                    var values = [];
                    for (var i = 0; i < args.length; ++i) {
                        values.push(args[i](scope, locals, assign, inputs));
                    }
                    var value = right.apply(undefined, values, inputs);
                    return context ? {
                        context: undefined,
                        name: undefined,
                        value: value
                    } : value;
                } : function(scope, locals, assign, inputs) {
                    var rhs = right(scope, locals, assign, inputs);
                    var value;
                    if (rhs.value != null) {
                        var values = [];
                        for (var i = 0; i < args.length; ++i) {
                            values.push(args[i](scope, locals, assign, inputs));
                        }
                        value = rhs.value.apply(rhs.context, values);
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.AssignmentExpression:
                left = this.recurse(ast.left, true, 1);
                right = this.recurse(ast.right);
                return function(scope, locals, assign, inputs) {
                    var lhs = left(scope, locals, assign, inputs);
                    var rhs = right(scope, locals, assign, inputs);
                    lhs.context[lhs.name] = rhs;
                    return context ? {
                        value: rhs
                    } : rhs;
                };

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    args.push(self.recurse(expr));
                });
                return function(scope, locals, assign, inputs) {
                    var value = [];
                    for (var i = 0; i < args.length; ++i) {
                        value.push(args[i](scope, locals, assign, inputs));
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ObjectExpression:
                args = [];
                forEach(ast.properties, function(property) {
                    if (property.computed) {
                        args.push({
                            key: self.recurse(property.key),
                            computed: true,
                            value: self.recurse(property.value)
                        });
                    } else {
                        args.push({
                            key: property.key.type === AST.Identifier ? property.key.name : "" + property.key.value,
                            computed: false,
                            value: self.recurse(property.value)
                        });
                    }
                });
                return function(scope, locals, assign, inputs) {
                    var value = {};
                    for (var i = 0; i < args.length; ++i) {
                        if (args[i].computed) {
                            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
                        } else {
                            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
                        }
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ThisExpression:
                return function(scope) {
                    return context ? {
                        value: scope
                    } : scope;
                };

              case AST.LocalsExpression:
                return function(scope, locals) {
                    return context ? {
                        value: locals
                    } : locals;
                };

              case AST.NGValueParameter:
                return function(scope, locals, assign) {
                    return context ? {
                        value: assign
                    } : assign;
                };
            }
        },
        "unary+": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                if (isDefined(arg)) {
                    arg = +arg;
                } else {
                    arg = 0;
                }
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary-": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                if (isDefined(arg)) {
                    arg = -arg;
                } else {
                    arg = -0;
                }
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary!": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = !argument(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary+": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs = right(scope, locals, assign, inputs);
                var arg = plusFn(lhs, rhs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary-": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs = right(scope, locals, assign, inputs);
                var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary*": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary/": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary%": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary===": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary&&": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary||": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "ternary?:": function(test, alternate, consequent, context) {
            return function(scope, locals, assign, inputs) {
                var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        value: function(value, context) {
            return function() {
                return context ? {
                    context: undefined,
                    name: undefined,
                    value: value
                } : value;
            };
        },
        identifier: function(name, context, create) {
            return function(scope, locals, assign, inputs) {
                var base = locals && name in locals ? locals : scope;
                if (create && create !== 1 && base && base[name] == null) {
                    base[name] = {};
                }
                var value = base ? base[name] : undefined;
                if (context) {
                    return {
                        context: base,
                        name: name,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        computedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs;
                var value;
                if (lhs != null) {
                    rhs = right(scope, locals, assign, inputs);
                    rhs = getStringValue(rhs);
                    if (create && create !== 1) {
                        if (lhs && !lhs[rhs]) {
                            lhs[rhs] = {};
                        }
                    }
                    value = lhs[rhs];
                }
                if (context) {
                    return {
                        context: lhs,
                        name: rhs,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        nonComputedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                if (create && create !== 1) {
                    if (lhs && lhs[right] == null) {
                        lhs[right] = {};
                    }
                }
                var value = lhs != null ? lhs[right] : undefined;
                if (context) {
                    return {
                        context: lhs,
                        name: right,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        inputs: function(input, watchId) {
            return function(scope, value, locals, inputs) {
                if (inputs) return inputs[watchId];
                return input(scope, value, locals);
            };
        }
    };
    function Parser(lexer, $filter, options) {
        this.ast = new AST(lexer, options);
        this.astCompiler = options.csp ? new ASTInterpreter($filter) : new ASTCompiler($filter);
    }
    Parser.prototype = {
        constructor: Parser,
        parse: function(text) {
            var ast = this.ast.ast(text);
            var fn = this.astCompiler.compile(ast);
            fn.literal = isLiteral(ast);
            fn.constant = isConstant(ast);
            return fn;
        }
    };
    function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
    }
    function $ParseProvider() {
        var cache = createMap();
        var literals = {
            true: true,
            false: false,
            null: null,
            undefined: undefined
        };
        var identStart, identContinue;
        this.addLiteral = function(literalName, literalValue) {
            literals[literalName] = literalValue;
        };
        this.setIdentifierFns = function(identifierStart, identifierContinue) {
            identStart = identifierStart;
            identContinue = identifierContinue;
            return this;
        };
        this.$get = [ "$filter", function($filter) {
            var noUnsafeEval = csp().noUnsafeEval;
            var $parseOptions = {
                csp: noUnsafeEval,
                literals: copy(literals),
                isIdentifierStart: isFunction(identStart) && identStart,
                isIdentifierContinue: isFunction(identContinue) && identContinue
            };
            return $parse;
            function $parse(exp, interceptorFn) {
                var parsedExpression, oneTime, cacheKey;
                switch (typeof exp) {
                  case "string":
                    exp = exp.trim();
                    cacheKey = exp;
                    parsedExpression = cache[cacheKey];
                    if (!parsedExpression) {
                        if (exp.charAt(0) === ":" && exp.charAt(1) === ":") {
                            oneTime = true;
                            exp = exp.substring(2);
                        }
                        var lexer = new Lexer($parseOptions);
                        var parser = new Parser(lexer, $filter, $parseOptions);
                        parsedExpression = parser.parse(exp);
                        if (parsedExpression.constant) {
                            parsedExpression.$$watchDelegate = constantWatchDelegate;
                        } else if (oneTime) {
                            parsedExpression.oneTime = true;
                            parsedExpression.$$watchDelegate = oneTimeWatchDelegate;
                        } else if (parsedExpression.inputs) {
                            parsedExpression.$$watchDelegate = inputsWatchDelegate;
                        }
                        cache[cacheKey] = parsedExpression;
                    }
                    return addInterceptor(parsedExpression, interceptorFn);

                  case "function":
                    return addInterceptor(exp, interceptorFn);

                  default:
                    return addInterceptor(noop, interceptorFn);
                }
            }
            function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {
                if (newValue == null || oldValueOfValue == null) {
                    return newValue === oldValueOfValue;
                }
                if (typeof newValue === "object") {
                    newValue = getValueOf(newValue);
                    if (typeof newValue === "object" && !compareObjectIdentity) {
                        return false;
                    }
                }
                return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
            }
            function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var inputExpressions = parsedExpression.inputs;
                var lastResult;
                if (inputExpressions.length === 1) {
                    var oldInputValueOf = expressionInputDirtyCheck;
                    inputExpressions = inputExpressions[0];
                    return scope.$watch(function expressionInputWatch(scope) {
                        var newInputValue = inputExpressions(scope);
                        if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf, parsedExpression.literal)) {
                            lastResult = parsedExpression(scope, undefined, undefined, [ newInputValue ]);
                            oldInputValueOf = newInputValue && getValueOf(newInputValue);
                        }
                        return lastResult;
                    }, listener, objectEquality, prettyPrintExpression);
                }
                var oldInputValueOfValues = [];
                var oldInputValues = [];
                for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                    oldInputValueOfValues[i] = expressionInputDirtyCheck;
                    oldInputValues[i] = null;
                }
                return scope.$watch(function expressionInputsWatch(scope) {
                    var changed = false;
                    for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                        var newInputValue = inputExpressions[i](scope);
                        if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i], parsedExpression.literal))) {
                            oldInputValues[i] = newInputValue;
                            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                        }
                    }
                    if (changed) {
                        lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
                    }
                    return lastResult;
                }, listener, objectEquality, prettyPrintExpression);
            }
            function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var isDone = parsedExpression.literal ? isAllDefined : isDefined;
                var unwatch, lastValue;
                if (parsedExpression.inputs) {
                    unwatch = inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression);
                } else {
                    unwatch = scope.$watch(oneTimeWatch, oneTimeListener, objectEquality);
                }
                return unwatch;
                function oneTimeWatch(scope) {
                    return parsedExpression(scope);
                }
                function oneTimeListener(value, old, scope) {
                    lastValue = value;
                    if (isFunction(listener)) {
                        listener(value, old, scope);
                    }
                    if (isDone(value)) {
                        scope.$$postDigest(function() {
                            if (isDone(lastValue)) {
                                unwatch();
                            }
                        });
                    }
                }
            }
            function isAllDefined(value) {
                var allDefined = true;
                forEach(value, function(val) {
                    if (!isDefined(val)) allDefined = false;
                });
                return allDefined;
            }
            function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch = scope.$watch(function constantWatch(scope) {
                    unwatch();
                    return parsedExpression(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function addInterceptor(parsedExpression, interceptorFn) {
                if (!interceptorFn) return parsedExpression;
                var watchDelegate = parsedExpression.$$watchDelegate;
                var useInputs = false;
                var isDone = parsedExpression.literal ? isAllDefined : isDefined;
                function regularInterceptedExpression(scope, locals, assign, inputs) {
                    var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
                    return interceptorFn(value, scope, locals);
                }
                function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
                    var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
                    var result = interceptorFn(value, scope, locals);
                    return isDone(value) ? result : value;
                }
                var fn = parsedExpression.oneTime ? oneTimeInterceptedExpression : regularInterceptedExpression;
                fn.literal = parsedExpression.literal;
                fn.oneTime = parsedExpression.oneTime;
                useInputs = !parsedExpression.inputs;
                if (watchDelegate && watchDelegate !== inputsWatchDelegate) {
                    fn.$$watchDelegate = watchDelegate;
                    fn.inputs = parsedExpression.inputs;
                } else if (!interceptorFn.$stateful) {
                    fn.$$watchDelegate = inputsWatchDelegate;
                    fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [ parsedExpression ];
                }
                return fn;
            }
        } ];
    }
    function $QProvider() {
        var errorOnUnhandledRejections = true;
        this.$get = [ "$rootScope", "$exceptionHandler", function($rootScope, $exceptionHandler) {
            return qFactory(function(callback) {
                $rootScope.$evalAsync(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            } else {
                return errorOnUnhandledRejections;
            }
        };
    }
    function $$QProvider() {
        var errorOnUnhandledRejections = true;
        this.$get = [ "$browser", "$exceptionHandler", function($browser, $exceptionHandler) {
            return qFactory(function(callback) {
                $browser.defer(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            } else {
                return errorOnUnhandledRejections;
            }
        };
    }
    function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
        var $qMinErr = minErr("$q", TypeError);
        var queueSize = 0;
        var checkQueue = [];
        function defer() {
            return new Deferred();
        }
        function Deferred() {
            var promise = this.promise = new Promise();
            this.resolve = function(val) {
                resolvePromise(promise, val);
            };
            this.reject = function(reason) {
                rejectPromise(promise, reason);
            };
            this.notify = function(progress) {
                notifyPromise(promise, progress);
            };
        }
        function Promise() {
            this.$$state = {
                status: 0
            };
        }
        extend(Promise.prototype, {
            then: function(onFulfilled, onRejected, progressBack) {
                if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
                    return this;
                }
                var result = new Promise();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([ result, onFulfilled, onRejected, progressBack ]);
                if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);
                return result;
            },
            catch: function(callback) {
                return this.then(null, callback);
            },
            finally: function(callback, progressBack) {
                return this.then(function(value) {
                    return handleCallback(value, resolve, callback);
                }, function(error) {
                    return handleCallback(error, reject, callback);
                }, progressBack);
            }
        });
        function processQueue(state) {
            var fn, promise, pending;
            pending = state.pending;
            state.processScheduled = false;
            state.pending = undefined;
            try {
                for (var i = 0, ii = pending.length; i < ii; ++i) {
                    state.pur = true;
                    promise = pending[i][0];
                    fn = pending[i][state.status];
                    try {
                        if (isFunction(fn)) {
                            resolvePromise(promise, fn(state.value));
                        } else if (state.status === 1) {
                            resolvePromise(promise, state.value);
                        } else {
                            rejectPromise(promise, state.value);
                        }
                    } catch (e) {
                        rejectPromise(promise, e);
                    }
                }
            } finally {
                --queueSize;
                if (errorOnUnhandledRejections && queueSize === 0) {
                    nextTick(processChecks);
                }
            }
        }
        function processChecks() {
            while (!queueSize && checkQueue.length) {
                var toCheck = checkQueue.shift();
                if (!toCheck.pur) {
                    toCheck.pur = true;
                    var errorMessage = "Possibly unhandled rejection: " + toDebugString(toCheck.value);
                    if (toCheck.value instanceof Error) {
                        exceptionHandler(toCheck.value, errorMessage);
                    } else {
                        exceptionHandler(errorMessage);
                    }
                }
            }
        }
        function scheduleProcessQueue(state) {
            if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !state.pur) {
                if (queueSize === 0 && checkQueue.length === 0) {
                    nextTick(processChecks);
                }
                checkQueue.push(state);
            }
            if (state.processScheduled || !state.pending) return;
            state.processScheduled = true;
            ++queueSize;
            nextTick(function() {
                processQueue(state);
            });
        }
        function resolvePromise(promise, val) {
            if (promise.$$state.status) return;
            if (val === promise) {
                $$reject(promise, $qMinErr("qcycle", "Expected promise to be resolved with value other than itself '{0}'", val));
            } else {
                $$resolve(promise, val);
            }
        }
        function $$resolve(promise, val) {
            var then;
            var done = false;
            try {
                if (isObject(val) || isFunction(val)) then = val.then;
                if (isFunction(then)) {
                    promise.$$state.status = -1;
                    then.call(val, doResolve, doReject, doNotify);
                } else {
                    promise.$$state.value = val;
                    promise.$$state.status = 1;
                    scheduleProcessQueue(promise.$$state);
                }
            } catch (e) {
                doReject(e);
            }
            function doResolve(val) {
                if (done) return;
                done = true;
                $$resolve(promise, val);
            }
            function doReject(val) {
                if (done) return;
                done = true;
                $$reject(promise, val);
            }
            function doNotify(progress) {
                notifyPromise(promise, progress);
            }
        }
        function rejectPromise(promise, reason) {
            if (promise.$$state.status) return;
            $$reject(promise, reason);
        }
        function $$reject(promise, reason) {
            promise.$$state.value = reason;
            promise.$$state.status = 2;
            scheduleProcessQueue(promise.$$state);
        }
        function notifyPromise(promise, progress) {
            var callbacks = promise.$$state.pending;
            if (promise.$$state.status <= 0 && callbacks && callbacks.length) {
                nextTick(function() {
                    var callback, result;
                    for (var i = 0, ii = callbacks.length; i < ii; i++) {
                        result = callbacks[i][0];
                        callback = callbacks[i][3];
                        try {
                            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
                        } catch (e) {
                            exceptionHandler(e);
                        }
                    }
                });
            }
        }
        function reject(reason) {
            var result = new Promise();
            rejectPromise(result, reason);
            return result;
        }
        function handleCallback(value, resolver, callback) {
            var callbackOutput = null;
            try {
                if (isFunction(callback)) callbackOutput = callback();
            } catch (e) {
                return reject(e);
            }
            if (isPromiseLike(callbackOutput)) {
                return callbackOutput.then(function() {
                    return resolver(value);
                }, reject);
            } else {
                return resolver(value);
            }
        }
        function when(value, callback, errback, progressBack) {
            var result = new Promise();
            resolvePromise(result, value);
            return result.then(callback, errback, progressBack);
        }
        var resolve = when;
        function all(promises) {
            var result = new Promise(), counter = 0, results = isArray(promises) ? [] : {};
            forEach(promises, function(promise, key) {
                counter++;
                when(promise).then(function(value) {
                    results[key] = value;
                    if (!--counter) resolvePromise(result, results);
                }, function(reason) {
                    rejectPromise(result, reason);
                });
            });
            if (counter === 0) {
                resolvePromise(result, results);
            }
            return result;
        }
        function race(promises) {
            var deferred = defer();
            forEach(promises, function(promise) {
                when(promise).then(deferred.resolve, deferred.reject);
            });
            return deferred.promise;
        }
        function $Q(resolver) {
            if (!isFunction(resolver)) {
                throw $qMinErr("norslvr", "Expected resolverFn, got '{0}'", resolver);
            }
            var promise = new Promise();
            function resolveFn(value) {
                resolvePromise(promise, value);
            }
            function rejectFn(reason) {
                rejectPromise(promise, reason);
            }
            resolver(resolveFn, rejectFn);
            return promise;
        }
        $Q.prototype = Promise.prototype;
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = all;
        $Q.race = race;
        return $Q;
    }
    function $$RAFProvider() {
        this.$get = [ "$window", "$timeout", function($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame;
            var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
            var rafSupported = !!requestAnimationFrame;
            var raf = rafSupported ? function(fn) {
                var id = requestAnimationFrame(fn);
                return function() {
                    cancelAnimationFrame(id);
                };
            } : function(fn) {
                var timer = $timeout(fn, 16.66, false);
                return function() {
                    $timeout.cancel(timer);
                };
            };
            raf.supported = rafSupported;
            return raf;
        } ];
    }
    function $RootScopeProvider() {
        var TTL = 10;
        var $rootScopeMinErr = minErr("$rootScope");
        var lastDirtyWatch = null;
        var applyAsyncId = null;
        this.digestTtl = function(value) {
            if (arguments.length) {
                TTL = value;
            }
            return TTL;
        };
        function createChildScopeClass(parent) {
            function ChildScope() {
                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$id = nextUid();
                this.$$ChildScope = null;
            }
            ChildScope.prototype = parent;
            return ChildScope;
        }
        this.$get = [ "$exceptionHandler", "$parse", "$browser", function($exceptionHandler, $parse, $browser) {
            function destroyChildScope($event) {
                $event.currentScope.$$destroyed = true;
            }
            function cleanUpScope($scope) {
                if (msie === 9) {
                    if ($scope.$$childHead) {
                        cleanUpScope($scope.$$childHead);
                    }
                    if ($scope.$$nextSibling) {
                        cleanUpScope($scope.$$nextSibling);
                    }
                }
                $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead = $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
            }
            function Scope() {
                this.$id = nextUid();
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed = false;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null;
            }
            Scope.prototype = {
                constructor: Scope,
                $new: function(isolate, parent) {
                    var child;
                    parent = parent || this;
                    if (isolate) {
                        child = new Scope();
                        child.$root = this.$root;
                    } else {
                        if (!this.$$ChildScope) {
                            this.$$ChildScope = createChildScopeClass(this);
                        }
                        child = new this.$$ChildScope();
                    }
                    child.$parent = parent;
                    child.$$prevSibling = parent.$$childTail;
                    if (parent.$$childHead) {
                        parent.$$childTail.$$nextSibling = child;
                        parent.$$childTail = child;
                    } else {
                        parent.$$childHead = parent.$$childTail = child;
                    }
                    if (isolate || parent !== this) child.$on("$destroy", destroyChildScope);
                    return child;
                },
                $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
                    var get = $parse(watchExp);
                    if (get.$$watchDelegate) {
                        return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
                    }
                    var scope = this, array = scope.$$watchers, watcher = {
                        fn: listener,
                        last: initWatchVal,
                        get: get,
                        exp: prettyPrintExpression || watchExp,
                        eq: !!objectEquality
                    };
                    lastDirtyWatch = null;
                    if (!isFunction(listener)) {
                        watcher.fn = noop;
                    }
                    if (!array) {
                        array = scope.$$watchers = [];
                        array.$$digestWatchIndex = -1;
                    }
                    array.unshift(watcher);
                    array.$$digestWatchIndex++;
                    incrementWatchersCount(this, 1);
                    return function deregisterWatch() {
                        var index = arrayRemove(array, watcher);
                        if (index >= 0) {
                            incrementWatchersCount(scope, -1);
                            if (index < array.$$digestWatchIndex) {
                                array.$$digestWatchIndex--;
                            }
                        }
                        lastDirtyWatch = null;
                    };
                },
                $watchGroup: function(watchExpressions, listener) {
                    var oldValues = new Array(watchExpressions.length);
                    var newValues = new Array(watchExpressions.length);
                    var deregisterFns = [];
                    var self = this;
                    var changeReactionScheduled = false;
                    var firstRun = true;
                    if (!watchExpressions.length) {
                        var shouldCall = true;
                        self.$evalAsync(function() {
                            if (shouldCall) listener(newValues, newValues, self);
                        });
                        return function deregisterWatchGroup() {
                            shouldCall = false;
                        };
                    }
                    if (watchExpressions.length === 1) {
                        return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                            newValues[0] = value;
                            oldValues[0] = oldValue;
                            listener(newValues, value === oldValue ? newValues : oldValues, scope);
                        });
                    }
                    forEach(watchExpressions, function(expr, i) {
                        var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
                            newValues[i] = value;
                            oldValues[i] = oldValue;
                            if (!changeReactionScheduled) {
                                changeReactionScheduled = true;
                                self.$evalAsync(watchGroupAction);
                            }
                        });
                        deregisterFns.push(unwatchFn);
                    });
                    function watchGroupAction() {
                        changeReactionScheduled = false;
                        if (firstRun) {
                            firstRun = false;
                            listener(newValues, newValues, self);
                        } else {
                            listener(newValues, oldValues, self);
                        }
                    }
                    return function deregisterWatchGroup() {
                        while (deregisterFns.length) {
                            deregisterFns.shift()();
                        }
                    };
                },
                $watchCollection: function(obj, listener) {
                    $watchCollectionInterceptor.$stateful = true;
                    var self = this;
                    var newValue;
                    var oldValue;
                    var veryOldValue;
                    var trackVeryOldValue = listener.length > 1;
                    var changeDetected = 0;
                    var changeDetector = $parse(obj, $watchCollectionInterceptor);
                    var internalArray = [];
                    var internalObject = {};
                    var initRun = true;
                    var oldLength = 0;
                    function $watchCollectionInterceptor(_value) {
                        newValue = _value;
                        var newLength, key, bothNaN, newItem, oldItem;
                        if (isUndefined(newValue)) return;
                        if (!isObject(newValue)) {
                            if (oldValue !== newValue) {
                                oldValue = newValue;
                                changeDetected++;
                            }
                        } else if (isArrayLike(newValue)) {
                            if (oldValue !== internalArray) {
                                oldValue = internalArray;
                                oldLength = oldValue.length = 0;
                                changeDetected++;
                            }
                            newLength = newValue.length;
                            if (oldLength !== newLength) {
                                changeDetected++;
                                oldValue.length = oldLength = newLength;
                            }
                            for (var i = 0; i < newLength; i++) {
                                oldItem = oldValue[i];
                                newItem = newValue[i];
                                bothNaN = oldItem !== oldItem && newItem !== newItem;
                                if (!bothNaN && oldItem !== newItem) {
                                    changeDetected++;
                                    oldValue[i] = newItem;
                                }
                            }
                        } else {
                            if (oldValue !== internalObject) {
                                oldValue = internalObject = {};
                                oldLength = 0;
                                changeDetected++;
                            }
                            newLength = 0;
                            for (key in newValue) {
                                if (hasOwnProperty.call(newValue, key)) {
                                    newLength++;
                                    newItem = newValue[key];
                                    oldItem = oldValue[key];
                                    if (key in oldValue) {
                                        bothNaN = oldItem !== oldItem && newItem !== newItem;
                                        if (!bothNaN && oldItem !== newItem) {
                                            changeDetected++;
                                            oldValue[key] = newItem;
                                        }
                                    } else {
                                        oldLength++;
                                        oldValue[key] = newItem;
                                        changeDetected++;
                                    }
                                }
                            }
                            if (oldLength > newLength) {
                                changeDetected++;
                                for (key in oldValue) {
                                    if (!hasOwnProperty.call(newValue, key)) {
                                        oldLength--;
                                        delete oldValue[key];
                                    }
                                }
                            }
                        }
                        return changeDetected;
                    }
                    function $watchCollectionAction() {
                        if (initRun) {
                            initRun = false;
                            listener(newValue, newValue, self);
                        } else {
                            listener(newValue, veryOldValue, self);
                        }
                        if (trackVeryOldValue) {
                            if (!isObject(newValue)) {
                                veryOldValue = newValue;
                            } else if (isArrayLike(newValue)) {
                                veryOldValue = new Array(newValue.length);
                                for (var i = 0; i < newValue.length; i++) {
                                    veryOldValue[i] = newValue[i];
                                }
                            } else {
                                veryOldValue = {};
                                for (var key in newValue) {
                                    if (hasOwnProperty.call(newValue, key)) {
                                        veryOldValue[key] = newValue[key];
                                    }
                                }
                            }
                        }
                    }
                    return this.$watch(changeDetector, $watchCollectionAction);
                },
                $digest: function() {
                    var watch, value, last, fn, get, watchers, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, asyncTask;
                    beginPhase("$digest");
                    $browser.$$checkUrlChange();
                    if (this === $rootScope && applyAsyncId !== null) {
                        $browser.defer.cancel(applyAsyncId);
                        flushApplyAsync();
                    }
                    lastDirtyWatch = null;
                    do {
                        dirty = false;
                        current = target;
                        for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
                            try {
                                asyncTask = asyncQueue[asyncQueuePosition];
                                fn = asyncTask.fn;
                                fn(asyncTask.scope, asyncTask.locals);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                            lastDirtyWatch = null;
                        }
                        asyncQueue.length = 0;
                        traverseScopesLoop: do {
                            if (watchers = current.$$watchers) {
                                watchers.$$digestWatchIndex = watchers.length;
                                while (watchers.$$digestWatchIndex--) {
                                    try {
                                        watch = watchers[watchers.$$digestWatchIndex];
                                        if (watch) {
                                            get = watch.get;
                                            if ((value = get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : isNumberNaN(value) && isNumberNaN(last))) {
                                                dirty = true;
                                                lastDirtyWatch = watch;
                                                watch.last = watch.eq ? copy(value, null) : value;
                                                fn = watch.fn;
                                                fn(value, last === initWatchVal ? value : last, current);
                                                if (ttl < 5) {
                                                    logIdx = 4 - ttl;
                                                    if (!watchLog[logIdx]) watchLog[logIdx] = [];
                                                    watchLog[logIdx].push({
                                                        msg: isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                                        newVal: value,
                                                        oldVal: last
                                                    });
                                                }
                                            } else if (watch === lastDirtyWatch) {
                                                dirty = false;
                                                break traverseScopesLoop;
                                            }
                                        }
                                    } catch (e) {
                                        $exceptionHandler(e);
                                    }
                                }
                            }
                            if (!(next = current.$$watchersCount && current.$$childHead || current !== target && current.$$nextSibling)) {
                                while (current !== target && !(next = current.$$nextSibling)) {
                                    current = current.$parent;
                                }
                            }
                        } while (current = next);
                        if ((dirty || asyncQueue.length) && !ttl--) {
                            clearPhase();
                            throw $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\n" + "Watchers fired in the last 5 iterations: {1}", TTL, watchLog);
                        }
                    } while (dirty || asyncQueue.length);
                    clearPhase();
                    while (postDigestQueuePosition < postDigestQueue.length) {
                        try {
                            postDigestQueue[postDigestQueuePosition++]();
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                    }
                    postDigestQueue.length = postDigestQueuePosition = 0;
                    $browser.$$checkUrlChange();
                },
                $destroy: function() {
                    if (this.$$destroyed) return;
                    var parent = this.$parent;
                    this.$broadcast("$destroy");
                    this.$$destroyed = true;
                    if (this === $rootScope) {
                        $browser.$$applicationDestroyed();
                    }
                    incrementWatchersCount(this, -this.$$watchersCount);
                    for (var eventName in this.$$listenerCount) {
                        decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                    }
                    if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;
                    if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;
                    if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
                    if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;
                    this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                    this.$on = this.$watch = this.$watchGroup = function() {
                        return noop;
                    };
                    this.$$listeners = {};
                    this.$$nextSibling = null;
                    cleanUpScope(this);
                },
                $eval: function(expr, locals) {
                    return $parse(expr)(this, locals);
                },
                $evalAsync: function(expr, locals) {
                    if (!$rootScope.$$phase && !asyncQueue.length) {
                        $browser.defer(function() {
                            if (asyncQueue.length) {
                                $rootScope.$digest();
                            }
                        });
                    }
                    asyncQueue.push({
                        scope: this,
                        fn: $parse(expr),
                        locals: locals
                    });
                },
                $$postDigest: function(fn) {
                    postDigestQueue.push(fn);
                },
                $apply: function(expr) {
                    try {
                        beginPhase("$apply");
                        try {
                            return this.$eval(expr);
                        } finally {
                            clearPhase();
                        }
                    } catch (e) {
                        $exceptionHandler(e);
                    } finally {
                        try {
                            $rootScope.$digest();
                        } catch (e) {
                            $exceptionHandler(e);
                            throw e;
                        }
                    }
                },
                $applyAsync: function(expr) {
                    var scope = this;
                    if (expr) {
                        applyAsyncQueue.push($applyAsyncExpression);
                    }
                    expr = $parse(expr);
                    scheduleApplyAsync();
                    function $applyAsyncExpression() {
                        scope.$eval(expr);
                    }
                },
                $on: function(name, listener) {
                    var namedListeners = this.$$listeners[name];
                    if (!namedListeners) {
                        this.$$listeners[name] = namedListeners = [];
                    }
                    namedListeners.push(listener);
                    var current = this;
                    do {
                        if (!current.$$listenerCount[name]) {
                            current.$$listenerCount[name] = 0;
                        }
                        current.$$listenerCount[name]++;
                    } while (current = current.$parent);
                    var self = this;
                    return function() {
                        var indexOfListener = namedListeners.indexOf(listener);
                        if (indexOfListener !== -1) {
                            namedListeners[indexOfListener] = null;
                            decrementListenerCount(self, 1, name);
                        }
                    };
                },
                $emit: function(name, args) {
                    var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                        name: name,
                        targetScope: scope,
                        stopPropagation: function() {
                            stopPropagation = true;
                        },
                        preventDefault: function() {
                            event.defaultPrevented = true;
                        },
                        defaultPrevented: false
                    }, listenerArgs = concat([ event ], arguments, 1), i, length;
                    do {
                        namedListeners = scope.$$listeners[name] || empty;
                        event.currentScope = scope;
                        for (i = 0, length = namedListeners.length; i < length; i++) {
                            if (!namedListeners[i]) {
                                namedListeners.splice(i, 1);
                                i--;
                                length--;
                                continue;
                            }
                            try {
                                namedListeners[i].apply(null, listenerArgs);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (stopPropagation) {
                            event.currentScope = null;
                            return event;
                        }
                        scope = scope.$parent;
                    } while (scope);
                    event.currentScope = null;
                    return event;
                },
                $broadcast: function(name, args) {
                    var target = this, current = target, next = target, event = {
                        name: name,
                        targetScope: target,
                        preventDefault: function() {
                            event.defaultPrevented = true;
                        },
                        defaultPrevented: false
                    };
                    if (!target.$$listenerCount[name]) return event;
                    var listenerArgs = concat([ event ], arguments, 1), listeners, i, length;
                    while (current = next) {
                        event.currentScope = current;
                        listeners = current.$$listeners[name] || [];
                        for (i = 0, length = listeners.length; i < length; i++) {
                            if (!listeners[i]) {
                                listeners.splice(i, 1);
                                i--;
                                length--;
                                continue;
                            }
                            try {
                                listeners[i].apply(null, listenerArgs);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                            while (current !== target && !(next = current.$$nextSibling)) {
                                current = current.$parent;
                            }
                        }
                    }
                    event.currentScope = null;
                    return event;
                }
            };
            var $rootScope = new Scope();
            var asyncQueue = $rootScope.$$asyncQueue = [];
            var postDigestQueue = $rootScope.$$postDigestQueue = [];
            var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
            var postDigestQueuePosition = 0;
            return $rootScope;
            function beginPhase(phase) {
                if ($rootScope.$$phase) {
                    throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
                }
                $rootScope.$$phase = phase;
            }
            function clearPhase() {
                $rootScope.$$phase = null;
            }
            function incrementWatchersCount(current, count) {
                do {
                    current.$$watchersCount += count;
                } while (current = current.$parent);
            }
            function decrementListenerCount(current, count, name) {
                do {
                    current.$$listenerCount[name] -= count;
                    if (current.$$listenerCount[name] === 0) {
                        delete current.$$listenerCount[name];
                    }
                } while (current = current.$parent);
            }
            function initWatchVal() {}
            function flushApplyAsync() {
                while (applyAsyncQueue.length) {
                    try {
                        applyAsyncQueue.shift()();
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                }
                applyAsyncId = null;
            }
            function scheduleApplyAsync() {
                if (applyAsyncId === null) {
                    applyAsyncId = $browser.defer(function() {
                        $rootScope.$apply(flushApplyAsync);
                    });
                }
            }
        } ];
    }
    function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                aHrefSanitizationWhitelist = regexp;
                return this;
            }
            return aHrefSanitizationWhitelist;
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                imgSrcSanitizationWhitelist = regexp;
                return this;
            }
            return imgSrcSanitizationWhitelist;
        };
        this.$get = function() {
            return function sanitizeUri(uri, isImage) {
                var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
                var normalizedVal;
                normalizedVal = urlResolve(uri).href;
                if (normalizedVal !== "" && !normalizedVal.match(regex)) {
                    return "unsafe:" + normalizedVal;
                }
                return uri;
            };
        };
    }
    var $sceMinErr = minErr("$sce");
    var SCE_CONTEXTS = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    };
    var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;
    function snakeToCamel(name) {
        return name.replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    function adjustMatcher(matcher) {
        if (matcher === "self") {
            return matcher;
        } else if (isString(matcher)) {
            if (matcher.indexOf("***") > -1) {
                throw $sceMinErr("iwcard", "Illegal sequence *** in string matcher.  String: {0}", matcher);
            }
            matcher = escapeForRegexp(matcher).replace(/\\\*\\\*/g, ".*").replace(/\\\*/g, "[^:/.?&;]*");
            return new RegExp("^" + matcher + "$");
        } else if (isRegExp(matcher)) {
            return new RegExp("^" + matcher.source + "$");
        } else {
            throw $sceMinErr("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
        }
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        if (isDefined(matchers)) {
            forEach(matchers, function(matcher) {
                adjustedMatchers.push(adjustMatcher(matcher));
            });
        }
        return adjustedMatchers;
    }
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        var resourceUrlWhitelist = [ "self" ], resourceUrlBlacklist = [];
        this.resourceUrlWhitelist = function(value) {
            if (arguments.length) {
                resourceUrlWhitelist = adjustMatchers(value);
            }
            return resourceUrlWhitelist;
        };
        this.resourceUrlBlacklist = function(value) {
            if (arguments.length) {
                resourceUrlBlacklist = adjustMatchers(value);
            }
            return resourceUrlBlacklist;
        };
        this.$get = [ "$injector", function($injector) {
            var htmlSanitizer = function htmlSanitizer(html) {
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            if ($injector.has("$sanitize")) {
                htmlSanitizer = $injector.get("$sanitize");
            }
            function matchUrl(matcher, parsedUrl) {
                if (matcher === "self") {
                    return urlIsSameOrigin(parsedUrl);
                } else {
                    return !!matcher.exec(parsedUrl.href);
                }
            }
            function isResourceUrlAllowedByPolicy(url) {
                var parsedUrl = urlResolve(url.toString());
                var i, n, allowed = false;
                for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
                    if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                        allowed = true;
                        break;
                    }
                }
                if (allowed) {
                    for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
                        if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                            allowed = false;
                            break;
                        }
                    }
                }
                return allowed;
            }
            function generateHolderType(Base) {
                var holderType = function TrustedValueHolderType(trustedValue) {
                    this.$$unwrapTrustedValue = function() {
                        return trustedValue;
                    };
                };
                if (Base) {
                    holderType.prototype = new Base();
                }
                holderType.prototype.valueOf = function sceValueOf() {
                    return this.$$unwrapTrustedValue();
                };
                holderType.prototype.toString = function sceToString() {
                    return this.$$unwrapTrustedValue().toString();
                };
                return holderType;
            }
            var trustedValueHolderBase = generateHolderType(), byType = {};
            byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
            function trustAs(type, trustedValue) {
                var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (!Constructor) {
                    throw $sceMinErr("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", type, trustedValue);
                }
                if (trustedValue === null || isUndefined(trustedValue) || trustedValue === "") {
                    return trustedValue;
                }
                if (typeof trustedValue !== "string") {
                    throw $sceMinErr("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", type);
                }
                return new Constructor(trustedValue);
            }
            function valueOf(maybeTrusted) {
                if (maybeTrusted instanceof trustedValueHolderBase) {
                    return maybeTrusted.$$unwrapTrustedValue();
                } else {
                    return maybeTrusted;
                }
            }
            function getTrusted(type, maybeTrusted) {
                if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === "") {
                    return maybeTrusted;
                }
                var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (constructor && maybeTrusted instanceof constructor) {
                    return maybeTrusted.$$unwrapTrustedValue();
                }
                if (type === SCE_CONTEXTS.RESOURCE_URL) {
                    if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
                        return maybeTrusted;
                    } else {
                        throw $sceMinErr("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", maybeTrusted.toString());
                    }
                } else if (type === SCE_CONTEXTS.HTML) {
                    return htmlSanitizer(maybeTrusted);
                }
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            }
            return {
                trustAs: trustAs,
                getTrusted: getTrusted,
                valueOf: valueOf
            };
        } ];
    }
    function $SceProvider() {
        var enabled = true;
        this.enabled = function(value) {
            if (arguments.length) {
                enabled = !!value;
            }
            return enabled;
        };
        this.$get = [ "$parse", "$sceDelegate", function($parse, $sceDelegate) {
            if (enabled && msie < 8) {
                throw $sceMinErr("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks " + "mode.  You can fix this by adding the text <!doctype html> to the top of your HTML " + "document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            }
            var sce = shallowCopy(SCE_CONTEXTS);
            sce.isEnabled = function() {
                return enabled;
            };
            sce.trustAs = $sceDelegate.trustAs;
            sce.getTrusted = $sceDelegate.getTrusted;
            sce.valueOf = $sceDelegate.valueOf;
            if (!enabled) {
                sce.trustAs = sce.getTrusted = function(type, value) {
                    return value;
                };
                sce.valueOf = identity;
            }
            sce.parseAs = function sceParseAs(type, expr) {
                var parsed = $parse(expr);
                if (parsed.literal && parsed.constant) {
                    return parsed;
                } else {
                    return $parse(expr, function(value) {
                        return sce.getTrusted(type, value);
                    });
                }
            };
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            forEach(SCE_CONTEXTS, function(enumValue, name) {
                var lName = lowercase(name);
                sce[snakeToCamel("parse_as_" + lName)] = function(expr) {
                    return parse(enumValue, expr);
                };
                sce[snakeToCamel("get_trusted_" + lName)] = function(value) {
                    return getTrusted(enumValue, value);
                };
                sce[snakeToCamel("trust_as_" + lName)] = function(value) {
                    return trustAs(enumValue, value);
                };
            });
            return sce;
        } ];
    }
    function $SnifferProvider() {
        this.$get = [ "$window", "$document", function($window, $document) {
            var eventSupport = {}, isNw = $window.nw && $window.nw.process, isChromePackagedApp = !isNw && $window.chrome && ($window.chrome.app && $window.chrome.app.runtime || !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id), hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState, android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, bodyStyle = document.body && document.body.style, transitions = false, animations = false;
            if (bodyStyle) {
                transitions = !!("transition" in bodyStyle || "webkitTransition" in bodyStyle);
                animations = !!("animation" in bodyStyle || "webkitAnimation" in bodyStyle);
            }
            return {
                history: !!(hasHistoryPushState && !(android < 4) && !boxee),
                hasEvent: function(event) {
                    if (event === "input" && msie) return false;
                    if (isUndefined(eventSupport[event])) {
                        var divElm = document.createElement("div");
                        eventSupport[event] = "on" + event in divElm;
                    }
                    return eventSupport[event];
                },
                csp: csp(),
                transitions: transitions,
                animations: animations,
                android: android
            };
        } ];
    }
    var $templateRequestMinErr = minErr("$compile");
    function $TemplateRequestProvider() {
        var httpOptions;
        this.httpOptions = function(val) {
            if (val) {
                httpOptions = val;
                return this;
            }
            return httpOptions;
        };
        this.$get = [ "$exceptionHandler", "$templateCache", "$http", "$q", "$sce", function($exceptionHandler, $templateCache, $http, $q, $sce) {
            function handleRequestFn(tpl, ignoreRequestError) {
                handleRequestFn.totalPendingRequests++;
                if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
                    tpl = $sce.getTrustedResourceUrl(tpl);
                }
                var transformResponse = $http.defaults && $http.defaults.transformResponse;
                if (isArray(transformResponse)) {
                    transformResponse = transformResponse.filter(function(transformer) {
                        return transformer !== defaultHttpResponseTransform;
                    });
                } else if (transformResponse === defaultHttpResponseTransform) {
                    transformResponse = null;
                }
                return $http.get(tpl, extend({
                    cache: $templateCache,
                    transformResponse: transformResponse
                }, httpOptions)).finally(function() {
                    handleRequestFn.totalPendingRequests--;
                }).then(function(response) {
                    $templateCache.put(tpl, response.data);
                    return response.data;
                }, handleError);
                function handleError(resp) {
                    if (!ignoreRequestError) {
                        resp = $templateRequestMinErr("tpload", "Failed to load template: {0} (HTTP status: {1} {2})", tpl, resp.status, resp.statusText);
                        $exceptionHandler(resp);
                    }
                    return $q.reject(resp);
                }
            }
            handleRequestFn.totalPendingRequests = 0;
            return handleRequestFn;
        } ];
    }
    function $$TestabilityProvider() {
        this.$get = [ "$rootScope", "$browser", "$location", function($rootScope, $browser, $location) {
            var testability = {};
            testability.findBindings = function(element, expression, opt_exactMatch) {
                var bindings = element.getElementsByClassName("ng-binding");
                var matches = [];
                forEach(bindings, function(binding) {
                    var dataBinding = angular.element(binding).data("$binding");
                    if (dataBinding) {
                        forEach(dataBinding, function(bindingName) {
                            if (opt_exactMatch) {
                                var matcher = new RegExp("(^|\\s)" + escapeForRegexp(expression) + "(\\s|\\||$)");
                                if (matcher.test(bindingName)) {
                                    matches.push(binding);
                                }
                            } else {
                                if (bindingName.indexOf(expression) !== -1) {
                                    matches.push(binding);
                                }
                            }
                        });
                    }
                });
                return matches;
            };
            testability.findModels = function(element, expression, opt_exactMatch) {
                var prefixes = [ "ng-", "data-ng-", "ng\\:" ];
                for (var p = 0; p < prefixes.length; ++p) {
                    var attributeEquals = opt_exactMatch ? "=" : "*=";
                    var selector = "[" + prefixes[p] + "model" + attributeEquals + '"' + expression + '"]';
                    var elements = element.querySelectorAll(selector);
                    if (elements.length) {
                        return elements;
                    }
                }
            };
            testability.getLocation = function() {
                return $location.url();
            };
            testability.setLocation = function(url) {
                if (url !== $location.url()) {
                    $location.url(url);
                    $rootScope.$digest();
                }
            };
            testability.whenStable = function(callback) {
                $browser.notifyWhenNoOutstandingRequests(callback);
            };
            return testability;
        } ];
    }
    function $TimeoutProvider() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function($rootScope, $browser, $q, $$q, $exceptionHandler) {
            var deferreds = {};
            function timeout(fn, delay, invokeApply) {
                if (!isFunction(fn)) {
                    invokeApply = delay;
                    delay = fn;
                    fn = noop;
                }
                var args = sliceArgs(arguments, 3), skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise, timeoutId;
                timeoutId = $browser.defer(function() {
                    try {
                        deferred.resolve(fn.apply(null, args));
                    } catch (e) {
                        deferred.reject(e);
                        $exceptionHandler(e);
                    } finally {
                        delete deferreds[promise.$$timeoutId];
                    }
                    if (!skipApply) $rootScope.$apply();
                }, delay);
                promise.$$timeoutId = timeoutId;
                deferreds[timeoutId] = deferred;
                return promise;
            }
            timeout.cancel = function(promise) {
                if (promise && promise.$$timeoutId in deferreds) {
                    deferreds[promise.$$timeoutId].promise.catch(noop);
                    deferreds[promise.$$timeoutId].reject("canceled");
                    delete deferreds[promise.$$timeoutId];
                    return $browser.defer.cancel(promise.$$timeoutId);
                }
                return false;
            };
            return timeout;
        } ];
    }
    var urlParsingNode = window.document.createElement("a");
    var originUrl = urlResolve(window.location.href);
    function urlResolve(url) {
        var href = url;
        if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    function urlIsSameOrigin(requestUrl) {
        var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
        return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
    }
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    function $$CookieReader($document) {
        var rawDocument = $document[0] || {};
        var lastCookies = {};
        var lastCookieString = "";
        function safeGetCookie(rawDocument) {
            try {
                return rawDocument.cookie || "";
            } catch (e) {
                return "";
            }
        }
        function safeDecodeURIComponent(str) {
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return str;
            }
        }
        return function() {
            var cookieArray, cookie, i, index, name;
            var currentCookieString = safeGetCookie(rawDocument);
            if (currentCookieString !== lastCookieString) {
                lastCookieString = currentCookieString;
                cookieArray = lastCookieString.split("; ");
                lastCookies = {};
                for (i = 0; i < cookieArray.length; i++) {
                    cookie = cookieArray[i];
                    index = cookie.indexOf("=");
                    if (index > 0) {
                        name = safeDecodeURIComponent(cookie.substring(0, index));
                        if (isUndefined(lastCookies[name])) {
                            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                        }
                    }
                }
            }
            return lastCookies;
        };
    }
    $$CookieReader.$inject = [ "$document" ];
    function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
    }
    $FilterProvider.$inject = [ "$provide" ];
    function $FilterProvider($provide) {
        var suffix = "Filter";
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                forEach(name, function(filter, key) {
                    filters[key] = register(key, filter);
                });
                return filters;
            } else {
                return $provide.factory(name + suffix, factory);
            }
        }
        this.register = register;
        this.$get = [ "$injector", function($injector) {
            return function(name) {
                return $injector.get(name + suffix);
            };
        } ];
        register("currency", currencyFilter);
        register("date", dateFilter);
        register("filter", filterFilter);
        register("json", jsonFilter);
        register("limitTo", limitToFilter);
        register("lowercase", lowercaseFilter);
        register("number", numberFilter);
        register("orderBy", orderByFilter);
        register("uppercase", uppercaseFilter);
    }
    function filterFilter() {
        return function(array, expression, comparator, anyPropertyKey) {
            if (!isArrayLike(array)) {
                if (array == null) {
                    return array;
                } else {
                    throw minErr("filter")("notarray", "Expected array but received: {0}", array);
                }
            }
            anyPropertyKey = anyPropertyKey || "$";
            var expressionType = getTypeForFilter(expression);
            var predicateFn;
            var matchAgainstAnyProp;
            switch (expressionType) {
              case "function":
                predicateFn = expression;
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                matchAgainstAnyProp = true;

              case "object":
                predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
                break;

              default:
                return array;
            }
            return Array.prototype.filter.call(array, predicateFn);
        };
    }
    function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
        var shouldMatchPrimitives = isObject(expression) && anyPropertyKey in expression;
        var predicateFn;
        if (comparator === true) {
            comparator = equals;
        } else if (!isFunction(comparator)) {
            comparator = function(actual, expected) {
                if (isUndefined(actual)) {
                    return false;
                }
                if (actual === null || expected === null) {
                    return actual === expected;
                }
                if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) {
                    return false;
                }
                actual = lowercase("" + actual);
                expected = lowercase("" + expected);
                return actual.indexOf(expected) !== -1;
            };
        }
        predicateFn = function(item) {
            if (shouldMatchPrimitives && !isObject(item)) {
                return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
            }
            return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
        };
        return predicateFn;
    }
    function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual);
        var expectedType = getTypeForFilter(expected);
        if (expectedType === "string" && expected.charAt(0) === "!") {
            return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
        } else if (isArray(actual)) {
            return actual.some(function(item) {
                return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
            });
        }
        switch (actualType) {
          case "object":
            var key;
            if (matchAgainstAnyProp) {
                for (key in actual) {
                    if (key.charAt && key.charAt(0) !== "$" && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
                        return true;
                    }
                }
                return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
            } else if (expectedType === "object") {
                for (key in expected) {
                    var expectedVal = expected[key];
                    if (isFunction(expectedVal) || isUndefined(expectedVal)) {
                        continue;
                    }
                    var matchAnyProperty = key === anyPropertyKey;
                    var actualVal = matchAnyProperty ? actual : actual[key];
                    if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
                        return false;
                    }
                }
                return true;
            } else {
                return comparator(actual, expected);
            }

          case "function":
            return false;

          default:
            return comparator(actual, expected);
        }
    }
    function getTypeForFilter(val) {
        return val === null ? "null" : typeof val;
    }
    var MAX_DIGITS = 22;
    var DECIMAL_SEP = ".";
    var ZERO_CHAR = "0";
    currencyFilter.$inject = [ "$locale" ];
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(amount, currencySymbol, fractionSize) {
            if (isUndefined(currencySymbol)) {
                currencySymbol = formats.CURRENCY_SYM;
            }
            if (isUndefined(fractionSize)) {
                fractionSize = formats.PATTERNS[1].maxFrac;
            }
            return amount == null ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(/\u00A4/g, currencySymbol);
        };
    }
    numberFilter.$inject = [ "$locale" ];
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(number, fractionSize) {
            return number == null ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    function parse(numStr) {
        var exponent = 0, digits, numberOfIntegerDigits;
        var i, j, zeros;
        if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
            numStr = numStr.replace(DECIMAL_SEP, "");
        }
        if ((i = numStr.search(/e/i)) > 0) {
            if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
            numberOfIntegerDigits += +numStr.slice(i + 1);
            numStr = numStr.substring(0, i);
        } else if (numberOfIntegerDigits < 0) {
            numberOfIntegerDigits = numStr.length;
        }
        for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {}
        if (i === (zeros = numStr.length)) {
            digits = [ 0 ];
            numberOfIntegerDigits = 1;
        } else {
            zeros--;
            while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;
            numberOfIntegerDigits -= i;
            digits = [];
            for (j = 0; i <= zeros; i++, j++) {
                digits[j] = +numStr.charAt(i);
            }
        }
        if (numberOfIntegerDigits > MAX_DIGITS) {
            digits = digits.splice(0, MAX_DIGITS - 1);
            exponent = numberOfIntegerDigits - 1;
            numberOfIntegerDigits = 1;
        }
        return {
            d: digits,
            e: exponent,
            i: numberOfIntegerDigits
        };
    }
    function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
        var digits = parsedNumber.d;
        var fractionLen = digits.length - parsedNumber.i;
        fractionSize = isUndefined(fractionSize) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
        var roundAt = fractionSize + parsedNumber.i;
        var digit = digits[roundAt];
        if (roundAt > 0) {
            digits.splice(Math.max(parsedNumber.i, roundAt));
            for (var j = roundAt; j < digits.length; j++) {
                digits[j] = 0;
            }
        } else {
            fractionLen = Math.max(0, fractionLen);
            parsedNumber.i = 1;
            digits.length = Math.max(1, roundAt = fractionSize + 1);
            digits[0] = 0;
            for (var i = 1; i < roundAt; i++) digits[i] = 0;
        }
        if (digit >= 5) {
            if (roundAt - 1 < 0) {
                for (var k = 0; k > roundAt; k--) {
                    digits.unshift(0);
                    parsedNumber.i++;
                }
                digits.unshift(1);
                parsedNumber.i++;
            } else {
                digits[roundAt - 1]++;
            }
        }
        for (;fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
        var carry = digits.reduceRight(function(carry, d, i, digits) {
            d = d + carry;
            digits[i] = d % 10;
            return Math.floor(d / 10);
        }, 0);
        if (carry) {
            digits.unshift(carry);
            parsedNumber.i++;
        }
    }
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (!(isString(number) || isNumber(number)) || isNaN(number)) return "";
        var isInfinity = !isFinite(number);
        var isZero = false;
        var numStr = Math.abs(number) + "", formattedText = "", parsedNumber;
        if (isInfinity) {
            formattedText = "∞";
        } else {
            parsedNumber = parse(numStr);
            roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
            var digits = parsedNumber.d;
            var integerLen = parsedNumber.i;
            var exponent = parsedNumber.e;
            var decimals = [];
            isZero = digits.reduce(function(isZero, d) {
                return isZero && !d;
            }, true);
            while (integerLen < 0) {
                digits.unshift(0);
                integerLen++;
            }
            if (integerLen > 0) {
                decimals = digits.splice(integerLen, digits.length);
            } else {
                decimals = digits;
                digits = [ 0 ];
            }
            var groups = [];
            if (digits.length >= pattern.lgSize) {
                groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
            }
            while (digits.length > pattern.gSize) {
                groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
            }
            if (digits.length) {
                groups.unshift(digits.join(""));
            }
            formattedText = groups.join(groupSep);
            if (decimals.length) {
                formattedText += decimalSep + decimals.join("");
            }
            if (exponent) {
                formattedText += "e+" + exponent;
            }
        }
        if (number < 0 && !isZero) {
            return pattern.negPre + formattedText + pattern.negSuf;
        } else {
            return pattern.posPre + formattedText + pattern.posSuf;
        }
    }
    function padNumber(num, digits, trim, negWrap) {
        var neg = "";
        if (num < 0 || negWrap && num <= 0) {
            if (negWrap) {
                num = -num + 1;
            } else {
                num = -num;
                neg = "-";
            }
        }
        num = "" + num;
        while (num.length < digits) num = ZERO_CHAR + num;
        if (trim) {
            num = num.substr(num.length - digits);
        }
        return neg + num;
    }
    function dateGetter(name, size, offset, trim, negWrap) {
        offset = offset || 0;
        return function(date) {
            var value = date["get" + name]();
            if (offset > 0 || value > -offset) {
                value += offset;
            }
            if (value === 0 && offset === -12) value = 12;
            return padNumber(value, size, trim, negWrap);
        };
    }
    function dateStrGetter(name, shortForm, standAlone) {
        return function(date, formats) {
            var value = date["get" + name]();
            var propPrefix = (standAlone ? "STANDALONE" : "") + (shortForm ? "SHORT" : "");
            var get = uppercase(propPrefix + name);
            return formats[get][value];
        };
    }
    function timeZoneGetter(date, formats, offset) {
        var zone = -1 * offset;
        var paddedZone = zone >= 0 ? "+" : "";
        paddedZone += padNumber(Math[zone > 0 ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
        return paddedZone;
    }
    function getFirstThursdayOfYear(year) {
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
    }
    function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
    }
    function weekGetter(size) {
        return function(date) {
            var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date);
            var diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 6048e5);
            return padNumber(result, size);
        };
    }
    function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
    }
    function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
    }
    function longEraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
    }
    var DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4, 0, false, true),
        yy: dateGetter("FullYear", 2, 0, true, true),
        y: dateGetter("FullYear", 1, 0, false, true),
        MMMM: dateStrGetter("Month"),
        MMM: dateStrGetter("Month", true),
        MM: dateGetter("Month", 2, 1),
        M: dateGetter("Month", 1, 1),
        LLLL: dateStrGetter("Month", false, true),
        dd: dateGetter("Date", 2),
        d: dateGetter("Date", 1),
        HH: dateGetter("Hours", 2),
        H: dateGetter("Hours", 1),
        hh: dateGetter("Hours", 2, -12),
        h: dateGetter("Hours", 1, -12),
        mm: dateGetter("Minutes", 2),
        m: dateGetter("Minutes", 1),
        ss: dateGetter("Seconds", 2),
        s: dateGetter("Seconds", 1),
        sss: dateGetter("Milliseconds", 3),
        EEEE: dateStrGetter("Day"),
        EEE: dateStrGetter("Day", true),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1),
        G: eraGetter,
        GG: eraGetter,
        GGG: eraGetter,
        GGGG: longEraGetter
    };
    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/, NUMBER_STRING = /^-?\d+$/;
    dateFilter.$inject = [ "$locale" ];
    function dateFilter($locale) {
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        function jsonStringToDate(string) {
            var match;
            if (match = string.match(R_ISO8601_STR)) {
                var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                if (match[9]) {
                    tzHour = toInt(match[9] + match[10]);
                    tzMin = toInt(match[9] + match[11]);
                }
                dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
                var h = toInt(match[4] || 0) - tzHour;
                var m = toInt(match[5] || 0) - tzMin;
                var s = toInt(match[6] || 0);
                var ms = Math.round(parseFloat("0." + (match[7] || 0)) * 1e3);
                timeSetter.call(date, h, m, s, ms);
                return date;
            }
            return string;
        }
        return function(date, format, timezone) {
            var text = "", parts = [], fn, match;
            format = format || "mediumDate";
            format = $locale.DATETIME_FORMATS[format] || format;
            if (isString(date)) {
                date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
            }
            if (isNumber(date)) {
                date = new Date(date);
            }
            if (!isDate(date) || !isFinite(date.getTime())) {
                return date;
            }
            while (format) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = concat(parts, match, 1);
                    format = parts.pop();
                } else {
                    parts.push(format);
                    format = null;
                }
            }
            var dateTimezoneOffset = date.getTimezoneOffset();
            if (timezone) {
                dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
                date = convertTimezoneToLocal(date, timezone, true);
            }
            forEach(parts, function(value) {
                fn = DATE_FORMATS[value];
                text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : value === "''" ? "'" : value.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            });
            return text;
        };
    }
    function jsonFilter() {
        return function(object, spacing) {
            if (isUndefined(spacing)) {
                spacing = 2;
            }
            return toJson(object, spacing);
        };
    }
    var lowercaseFilter = valueFn(lowercase);
    var uppercaseFilter = valueFn(uppercase);
    function limitToFilter() {
        return function(input, limit, begin) {
            if (Math.abs(Number(limit)) === Infinity) {
                limit = Number(limit);
            } else {
                limit = toInt(limit);
            }
            if (isNumberNaN(limit)) return input;
            if (isNumber(input)) input = input.toString();
            if (!isArrayLike(input)) return input;
            begin = !begin || isNaN(begin) ? 0 : toInt(begin);
            begin = begin < 0 ? Math.max(0, input.length + begin) : begin;
            if (limit >= 0) {
                return sliceFn(input, begin, begin + limit);
            } else {
                if (begin === 0) {
                    return sliceFn(input, limit, input.length);
                } else {
                    return sliceFn(input, Math.max(0, begin + limit), begin);
                }
            }
        };
    }
    function sliceFn(input, begin, end) {
        if (isString(input)) return input.slice(begin, end);
        return slice.call(input, begin, end);
    }
    orderByFilter.$inject = [ "$parse" ];
    function orderByFilter($parse) {
        return function(array, sortPredicate, reverseOrder, compareFn) {
            if (array == null) return array;
            if (!isArrayLike(array)) {
                throw minErr("orderBy")("notarray", "Expected array but received: {0}", array);
            }
            if (!isArray(sortPredicate)) {
                sortPredicate = [ sortPredicate ];
            }
            if (sortPredicate.length === 0) {
                sortPredicate = [ "+" ];
            }
            var predicates = processPredicates(sortPredicate);
            var descending = reverseOrder ? -1 : 1;
            var compare = isFunction(compareFn) ? compareFn : defaultCompare;
            var compareValues = Array.prototype.map.call(array, getComparisonObject);
            compareValues.sort(doComparison);
            array = compareValues.map(function(item) {
                return item.value;
            });
            return array;
            function getComparisonObject(value, index) {
                return {
                    value: value,
                    tieBreaker: {
                        value: index,
                        type: "number",
                        index: index
                    },
                    predicateValues: predicates.map(function(predicate) {
                        return getPredicateValue(predicate.get(value), index);
                    })
                };
            }
            function doComparison(v1, v2) {
                for (var i = 0, ii = predicates.length; i < ii; i++) {
                    var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
                    if (result) {
                        return result * predicates[i].descending * descending;
                    }
                }
                return compare(v1.tieBreaker, v2.tieBreaker) * descending;
            }
        };
        function processPredicates(sortPredicates) {
            return sortPredicates.map(function(predicate) {
                var descending = 1, get = identity;
                if (isFunction(predicate)) {
                    get = predicate;
                } else if (isString(predicate)) {
                    if (predicate.charAt(0) === "+" || predicate.charAt(0) === "-") {
                        descending = predicate.charAt(0) === "-" ? -1 : 1;
                        predicate = predicate.substring(1);
                    }
                    if (predicate !== "") {
                        get = $parse(predicate);
                        if (get.constant) {
                            var key = get();
                            get = function(value) {
                                return value[key];
                            };
                        }
                    }
                }
                return {
                    get: get,
                    descending: descending
                };
            });
        }
        function isPrimitive(value) {
            switch (typeof value) {
              case "number":
              case "boolean":
              case "string":
                return true;

              default:
                return false;
            }
        }
        function objectValue(value) {
            if (isFunction(value.valueOf)) {
                value = value.valueOf();
                if (isPrimitive(value)) return value;
            }
            if (hasCustomToString(value)) {
                value = value.toString();
                if (isPrimitive(value)) return value;
            }
            return value;
        }
        function getPredicateValue(value, index) {
            var type = typeof value;
            if (value === null) {
                type = "string";
                value = "null";
            } else if (type === "object") {
                value = objectValue(value);
            }
            return {
                value: value,
                type: type,
                index: index
            };
        }
        function defaultCompare(v1, v2) {
            var result = 0;
            var type1 = v1.type;
            var type2 = v2.type;
            if (type1 === type2) {
                var value1 = v1.value;
                var value2 = v2.value;
                if (type1 === "string") {
                    value1 = value1.toLowerCase();
                    value2 = value2.toLowerCase();
                } else if (type1 === "object") {
                    if (isObject(value1)) value1 = v1.index;
                    if (isObject(value2)) value2 = v2.index;
                }
                if (value1 !== value2) {
                    result = value1 < value2 ? -1 : 1;
                }
            } else {
                result = type1 < type2 ? -1 : 1;
            }
            return result;
        }
    }
    function ngDirective(directive) {
        if (isFunction(directive)) {
            directive = {
                link: directive
            };
        }
        directive.restrict = directive.restrict || "AC";
        return valueFn(directive);
    }
    var htmlAnchorDirective = valueFn({
        restrict: "E",
        compile: function(element, attr) {
            if (!attr.href && !attr.xlinkHref) {
                return function(scope, element) {
                    if (element[0].nodeName.toLowerCase() !== "a") return;
                    var href = toString.call(element.prop("href")) === "[object SVGAnimatedString]" ? "xlink:href" : "href";
                    element.on("click", function(event) {
                        if (!element.attr(href)) {
                            event.preventDefault();
                        }
                    });
                };
            }
        }
    });
    var ngAttributeAliasDirectives = {};
    forEach(BOOLEAN_ATTR, function(propName, attrName) {
        if (propName === "multiple") return;
        function defaultLinkFn(scope, element, attr) {
            scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
                attr.$set(attrName, !!value);
            });
        }
        var normalized = directiveNormalize("ng-" + attrName);
        var linkFn = defaultLinkFn;
        if (propName === "checked") {
            linkFn = function(scope, element, attr) {
                if (attr.ngModel !== attr[normalized]) {
                    defaultLinkFn(scope, element, attr);
                }
            };
        }
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                restrict: "A",
                priority: 100,
                link: linkFn
            };
        };
    });
    forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function() {
            return {
                priority: 100,
                link: function(scope, element, attr) {
                    if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) === "/") {
                        var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                        if (match) {
                            attr.$set("ngPattern", new RegExp(match[1], match[2]));
                            return;
                        }
                    }
                    scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
                        attr.$set(ngAttr, value);
                    });
                }
            };
        };
    });
    forEach([ "src", "srcset", "href" ], function(attrName) {
        var normalized = directiveNormalize("ng-" + attrName);
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                priority: 99,
                link: function(scope, element, attr) {
                    var propName = attrName, name = attrName;
                    if (attrName === "href" && toString.call(element.prop("href")) === "[object SVGAnimatedString]") {
                        name = "xlinkHref";
                        attr.$attr[name] = "xlink:href";
                        propName = null;
                    }
                    attr.$observe(normalized, function(value) {
                        if (!value) {
                            if (attrName === "href") {
                                attr.$set(name, null);
                            }
                            return;
                        }
                        attr.$set(name, value);
                        if (msie && propName) element.prop(propName, attr[name]);
                    });
                }
            };
        };
    });
    var nullFormCtrl = {
        $addControl: noop,
        $$renameControl: nullFormRenameControl,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop
    }, PENDING_CLASS = "ng-pending", SUBMITTED_CLASS = "ng-submitted";
    function nullFormRenameControl(control, name) {
        control.$name = name;
    }
    FormController.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ];
    function FormController($element, $attrs, $scope, $animate, $interpolate) {
        this.$$controls = [];
        this.$error = {};
        this.$$success = {};
        this.$pending = undefined;
        this.$name = $interpolate($attrs.name || $attrs.ngForm || "")($scope);
        this.$dirty = false;
        this.$pristine = true;
        this.$valid = true;
        this.$invalid = false;
        this.$submitted = false;
        this.$$parentForm = nullFormCtrl;
        this.$$element = $element;
        this.$$animate = $animate;
        setupValidity(this);
    }
    FormController.prototype = {
        $rollbackViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$rollbackViewValue();
            });
        },
        $commitViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$commitViewValue();
            });
        },
        $addControl: function(control) {
            assertNotHasOwnProperty(control.$name, "input");
            this.$$controls.push(control);
            if (control.$name) {
                this[control.$name] = control;
            }
            control.$$parentForm = this;
        },
        $$renameControl: function(control, newName) {
            var oldName = control.$name;
            if (this[oldName] === control) {
                delete this[oldName];
            }
            this[newName] = control;
            control.$name = newName;
        },
        $removeControl: function(control) {
            if (control.$name && this[control.$name] === control) {
                delete this[control.$name];
            }
            forEach(this.$pending, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$error, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$$success, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            arrayRemove(this.$$controls, control);
            control.$$parentForm = nullFormCtrl;
        },
        $setDirty: function() {
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$dirty = true;
            this.$pristine = false;
            this.$$parentForm.$setDirty();
        },
        $setPristine: function() {
            this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + " " + SUBMITTED_CLASS);
            this.$dirty = false;
            this.$pristine = true;
            this.$submitted = false;
            forEach(this.$$controls, function(control) {
                control.$setPristine();
            });
        },
        $setUntouched: function() {
            forEach(this.$$controls, function(control) {
                control.$setUntouched();
            });
        },
        $setSubmitted: function() {
            this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);
            this.$submitted = true;
            this.$$parentForm.$setSubmitted();
        }
    };
    addSetValidityMethod({
        clazz: FormController,
        set: function(object, property, controller) {
            var list = object[property];
            if (!list) {
                object[property] = [ controller ];
            } else {
                var index = list.indexOf(controller);
                if (index === -1) {
                    list.push(controller);
                }
            }
        },
        unset: function(object, property, controller) {
            var list = object[property];
            if (!list) {
                return;
            }
            arrayRemove(list, controller);
            if (list.length === 0) {
                delete object[property];
            }
        }
    });
    var formDirectiveFactory = function(isNgForm) {
        return [ "$timeout", "$parse", function($timeout, $parse) {
            var formDirective = {
                name: "form",
                restrict: isNgForm ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: FormController,
                compile: function ngFormCompile(formElement, attr) {
                    formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                    var nameAttr = attr.name ? "name" : isNgForm && attr.ngForm ? "ngForm" : false;
                    return {
                        pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
                            var controller = ctrls[0];
                            if (!("action" in attr)) {
                                var handleFormSubmission = function(event) {
                                    scope.$apply(function() {
                                        controller.$commitViewValue();
                                        controller.$setSubmitted();
                                    });
                                    event.preventDefault();
                                };
                                formElement[0].addEventListener("submit", handleFormSubmission);
                                formElement.on("$destroy", function() {
                                    $timeout(function() {
                                        formElement[0].removeEventListener("submit", handleFormSubmission);
                                    }, 0, false);
                                });
                            }
                            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
                            parentFormCtrl.$addControl(controller);
                            var setter = nameAttr ? getSetter(controller.$name) : noop;
                            if (nameAttr) {
                                setter(scope, controller);
                                attr.$observe(nameAttr, function(newValue) {
                                    if (controller.$name === newValue) return;
                                    setter(scope, undefined);
                                    controller.$$parentForm.$$renameControl(controller, newValue);
                                    setter = getSetter(controller.$name);
                                    setter(scope, controller);
                                });
                            }
                            formElement.on("$destroy", function() {
                                controller.$$parentForm.$removeControl(controller);
                                setter(scope, undefined);
                                extend(controller, nullFormCtrl);
                            });
                        }
                    };
                }
            };
            return formDirective;
            function getSetter(expression) {
                if (expression === "") {
                    return $parse('this[""]').assign;
                }
                return $parse(expression).assign || noop;
            }
        } ];
    };
    var formDirective = formDirectiveFactory();
    var ngFormDirective = formDirectiveFactory(true);
    function setupValidity(instance) {
        instance.$$classCache = {};
        instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
    }
    function addSetValidityMethod(context) {
        var clazz = context.clazz, set = context.set, unset = context.unset;
        clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
            if (isUndefined(state)) {
                createAndSet(this, "$pending", validationErrorKey, controller);
            } else {
                unsetAndCleanup(this, "$pending", validationErrorKey, controller);
            }
            if (!isBoolean(state)) {
                unset(this.$error, validationErrorKey, controller);
                unset(this.$$success, validationErrorKey, controller);
            } else {
                if (state) {
                    unset(this.$error, validationErrorKey, controller);
                    set(this.$$success, validationErrorKey, controller);
                } else {
                    set(this.$error, validationErrorKey, controller);
                    unset(this.$$success, validationErrorKey, controller);
                }
            }
            if (this.$pending) {
                cachedToggleClass(this, PENDING_CLASS, true);
                this.$valid = this.$invalid = undefined;
                toggleValidationCss(this, "", null);
            } else {
                cachedToggleClass(this, PENDING_CLASS, false);
                this.$valid = isObjectEmpty(this.$error);
                this.$invalid = !this.$valid;
                toggleValidationCss(this, "", this.$valid);
            }
            var combinedState;
            if (this.$pending && this.$pending[validationErrorKey]) {
                combinedState = undefined;
            } else if (this.$error[validationErrorKey]) {
                combinedState = false;
            } else if (this.$$success[validationErrorKey]) {
                combinedState = true;
            } else {
                combinedState = null;
            }
            toggleValidationCss(this, validationErrorKey, combinedState);
            this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
        };
        function createAndSet(ctrl, name, value, controller) {
            if (!ctrl[name]) {
                ctrl[name] = {};
            }
            set(ctrl[name], value, controller);
        }
        function unsetAndCleanup(ctrl, name, value, controller) {
            if (ctrl[name]) {
                unset(ctrl[name], value, controller);
            }
            if (isObjectEmpty(ctrl[name])) {
                ctrl[name] = undefined;
            }
        }
        function cachedToggleClass(ctrl, className, switchValue) {
            if (switchValue && !ctrl.$$classCache[className]) {
                ctrl.$$animate.addClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = true;
            } else if (!switchValue && ctrl.$$classCache[className]) {
                ctrl.$$animate.removeClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = false;
            }
        }
        function toggleValidationCss(ctrl, validationErrorKey, isValid) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "";
            cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);
            cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);
        }
    }
    function isObjectEmpty(obj) {
        if (obj) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    return false;
                }
            }
        }
        return true;
    }
    var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
    var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
    var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
    var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
    var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
    var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
    var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
    var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var PARTIAL_VALIDATION_EVENTS = "keydown wheel mousedown";
    var PARTIAL_VALIDATION_TYPES = createMap();
    forEach("date,datetime-local,month,time,week".split(","), function(type) {
        PARTIAL_VALIDATION_TYPES[type] = true;
    });
    var inputType = {
        text: textInputType,
        date: createDateInputType("date", DATE_REGEXP, createDateParser(DATE_REGEXP, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": createDateInputType("datetimelocal", DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [ "yyyy", "MM", "dd", "HH", "mm", "ss", "sss" ]), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: createDateInputType("time", TIME_REGEXP, createDateParser(TIME_REGEXP, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: createDateInputType("week", WEEK_REGEXP, weekParser, "yyyy-Www"),
        month: createDateInputType("month", MONTH_REGEXP, createDateParser(MONTH_REGEXP, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: numberInputType,
        url: urlInputType,
        email: emailInputType,
        radio: radioInputType,
        range: rangeInputType,
        checkbox: checkboxInputType,
        hidden: noop,
        button: noop,
        submit: noop,
        reset: noop,
        file: noop
    };
    function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function(value) {
            return ctrl.$isEmpty(value) ? value : value.toString();
        });
    }
    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
    }
    function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var type = lowercase(element[0].type);
        if (!$sniffer.android) {
            var composing = false;
            element.on("compositionstart", function() {
                composing = true;
            });
            element.on("compositionend", function() {
                composing = false;
                listener();
            });
        }
        var timeout;
        var listener = function(ev) {
            if (timeout) {
                $browser.defer.cancel(timeout);
                timeout = null;
            }
            if (composing) return;
            var value = element.val(), event = ev && ev.type;
            if (type !== "password" && (!attr.ngTrim || attr.ngTrim !== "false")) {
                value = trim(value);
            }
            if (ctrl.$viewValue !== value || value === "" && ctrl.$$hasNativeValidators) {
                ctrl.$setViewValue(value, event);
            }
        };
        if ($sniffer.hasEvent("input")) {
            element.on("input", listener);
        } else {
            var deferListener = function(ev, input, origValue) {
                if (!timeout) {
                    timeout = $browser.defer(function() {
                        timeout = null;
                        if (!input || input.value !== origValue) {
                            listener(ev);
                        }
                    });
                }
            };
            element.on("keydown", function(event) {
                var key = event.keyCode;
                if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40) return;
                deferListener(event, this, this.value);
            });
            if ($sniffer.hasEvent("paste")) {
                element.on("paste cut", deferListener);
            }
        }
        element.on("change", listener);
        if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
            element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
                if (!timeout) {
                    var validity = this[VALIDITY_STATE_PROPERTY];
                    var origBadInput = validity.badInput;
                    var origTypeMismatch = validity.typeMismatch;
                    timeout = $browser.defer(function() {
                        timeout = null;
                        if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
                            listener(ev);
                        }
                    });
                }
            });
        }
        ctrl.$render = function() {
            var value = ctrl.$isEmpty(ctrl.$viewValue) ? "" : ctrl.$viewValue;
            if (element.val() !== value) {
                element.val(value);
            }
        };
    }
    function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) {
            return isoWeek;
        }
        if (isString(isoWeek)) {
            WEEK_REGEXP.lastIndex = 0;
            var parts = WEEK_REGEXP.exec(isoWeek);
            if (parts) {
                var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = (week - 1) * 7;
                if (existingDate) {
                    hours = existingDate.getHours();
                    minutes = existingDate.getMinutes();
                    seconds = existingDate.getSeconds();
                    milliseconds = existingDate.getMilliseconds();
                }
                return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
            }
        }
        return NaN;
    }
    function createDateParser(regexp, mapping) {
        return function(iso, date) {
            var parts, map;
            if (isDate(iso)) {
                return iso;
            }
            if (isString(iso)) {
                if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
                    iso = iso.substring(1, iso.length - 1);
                }
                if (ISO_DATE_REGEXP.test(iso)) {
                    return new Date(iso);
                }
                regexp.lastIndex = 0;
                parts = regexp.exec(iso);
                if (parts) {
                    parts.shift();
                    if (date) {
                        map = {
                            yyyy: date.getFullYear(),
                            MM: date.getMonth() + 1,
                            dd: date.getDate(),
                            HH: date.getHours(),
                            mm: date.getMinutes(),
                            ss: date.getSeconds(),
                            sss: date.getMilliseconds() / 1e3
                        };
                    } else {
                        map = {
                            yyyy: 1970,
                            MM: 1,
                            dd: 1,
                            HH: 0,
                            mm: 0,
                            ss: 0,
                            sss: 0
                        };
                    }
                    forEach(parts, function(part, index) {
                        if (index < mapping.length) {
                            map[mapping[index]] = +part;
                        }
                    });
                    return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1e3 || 0);
                }
            }
            return NaN;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
            badInputChecker(scope, element, attr, ctrl);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var timezone = ctrl && ctrl.$options.getOption("timezone");
            var previousDate;
            ctrl.$$parserName = type;
            ctrl.$parsers.push(function(value) {
                if (ctrl.$isEmpty(value)) return null;
                if (regexp.test(value)) {
                    var parsedDate = parseDate(value, previousDate);
                    if (timezone) {
                        parsedDate = convertTimezoneToLocal(parsedDate, timezone);
                    }
                    return parsedDate;
                }
                return undefined;
            });
            ctrl.$formatters.push(function(value) {
                if (value && !isDate(value)) {
                    throw ngModelMinErr("datefmt", "Expected `{0}` to be a date", value);
                }
                if (isValidDate(value)) {
                    previousDate = value;
                    if (previousDate && timezone) {
                        previousDate = convertTimezoneToLocal(previousDate, timezone, true);
                    }
                    return $filter("date")(value, format, timezone);
                } else {
                    previousDate = null;
                    return "";
                }
            });
            if (isDefined(attr.min) || attr.ngMin) {
                var minVal;
                ctrl.$validators.min = function(value) {
                    return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
                };
                attr.$observe("min", function(val) {
                    minVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                var maxVal;
                ctrl.$validators.max = function(value) {
                    return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
                };
                attr.$observe("max", function(val) {
                    maxVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            function isValidDate(value) {
                return value && !(value.getTime && value.getTime() !== value.getTime());
            }
            function parseObservedDateValue(val) {
                return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
            }
        };
    }
    function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
        if (nativeValidation) {
            ctrl.$parsers.push(function(value) {
                var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
                return validity.badInput || validity.typeMismatch ? undefined : value;
            });
        }
    }
    function numberFormatterParser(ctrl) {
        ctrl.$$parserName = "number";
        ctrl.$parsers.push(function(value) {
            if (ctrl.$isEmpty(value)) return null;
            if (NUMBER_REGEXP.test(value)) return parseFloat(value);
            return undefined;
        });
        ctrl.$formatters.push(function(value) {
            if (!ctrl.$isEmpty(value)) {
                if (!isNumber(value)) {
                    throw ngModelMinErr("numfmt", "Expected `{0}` to be a number", value);
                }
                value = value.toString();
            }
            return value;
        });
    }
    function parseNumberAttrVal(val) {
        if (isDefined(val) && !isNumber(val)) {
            val = parseFloat(val);
        }
        return !isNumberNaN(val) ? val : undefined;
    }
    function isNumberInteger(num) {
        return (num | 0) === num;
    }
    function countDecimals(num) {
        var numString = num.toString();
        var decimalSymbolIndex = numString.indexOf(".");
        if (decimalSymbolIndex === -1) {
            if (-1 < num && num < 1) {
                var match = /e-(\d+)$/.exec(numString);
                if (match) {
                    return Number(match[1]);
                }
            }
            return 0;
        }
        return numString.length - decimalSymbolIndex - 1;
    }
    function isValidForStep(viewValue, stepBase, step) {
        var value = Number(viewValue);
        var isNonIntegerValue = !isNumberInteger(value);
        var isNonIntegerStepBase = !isNumberInteger(stepBase);
        var isNonIntegerStep = !isNumberInteger(step);
        if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {
            var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0;
            var stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0;
            var stepDecimals = isNonIntegerStep ? countDecimals(step) : 0;
            var decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals);
            var multiplier = Math.pow(10, decimalCount);
            value = value * multiplier;
            stepBase = stepBase * multiplier;
            step = step * multiplier;
            if (isNonIntegerValue) value = Math.round(value);
            if (isNonIntegerStepBase) stepBase = Math.round(stepBase);
            if (isNonIntegerStep) step = Math.round(step);
        }
        return (value - stepBase) % step === 0;
    }
    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        numberFormatterParser(ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var minVal;
        var maxVal;
        if (isDefined(attr.min) || attr.ngMin) {
            ctrl.$validators.min = function(value) {
                return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
            };
            attr.$observe("min", function(val) {
                minVal = parseNumberAttrVal(val);
                ctrl.$validate();
            });
        }
        if (isDefined(attr.max) || attr.ngMax) {
            ctrl.$validators.max = function(value) {
                return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
            };
            attr.$observe("max", function(val) {
                maxVal = parseNumberAttrVal(val);
                ctrl.$validate();
            });
        }
        if (isDefined(attr.step) || attr.ngStep) {
            var stepVal;
            ctrl.$validators.step = function(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) || isValidForStep(viewValue, minVal || 0, stepVal);
            };
            attr.$observe("step", function(val) {
                stepVal = parseNumberAttrVal(val);
                ctrl.$validate();
            });
        }
    }
    function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        numberFormatterParser(ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var supportsRange = ctrl.$$hasNativeValidators && element[0].type === "range", minVal = supportsRange ? 0 : undefined, maxVal = supportsRange ? 100 : undefined, stepVal = supportsRange ? 1 : undefined, validity = element[0].validity, hasMinAttr = isDefined(attr.min), hasMaxAttr = isDefined(attr.max), hasStepAttr = isDefined(attr.step);
        var originalRender = ctrl.$render;
        ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ? function rangeRender() {
            originalRender();
            ctrl.$setViewValue(element.val());
        } : originalRender;
        if (hasMinAttr) {
            ctrl.$validators.min = supportsRange ? function noopMinValidator() {
                return true;
            } : function minValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;
            };
            setInitialValueAndObserver("min", minChange);
        }
        if (hasMaxAttr) {
            ctrl.$validators.max = supportsRange ? function noopMaxValidator() {
                return true;
            } : function maxValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
            };
            setInitialValueAndObserver("max", maxChange);
        }
        if (hasStepAttr) {
            ctrl.$validators.step = supportsRange ? function nativeStepValidator() {
                return !validity.stepMismatch;
            } : function stepValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) || isValidForStep(viewValue, minVal || 0, stepVal);
            };
            setInitialValueAndObserver("step", stepChange);
        }
        function setInitialValueAndObserver(htmlAttrName, changeFn) {
            element.attr(htmlAttrName, attr[htmlAttrName]);
            attr.$observe(htmlAttrName, changeFn);
        }
        function minChange(val) {
            minVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (supportsRange) {
                var elVal = element.val();
                if (minVal > elVal) {
                    elVal = minVal;
                    element.val(elVal);
                }
                ctrl.$setViewValue(elVal);
            } else {
                ctrl.$validate();
            }
        }
        function maxChange(val) {
            maxVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (supportsRange) {
                var elVal = element.val();
                if (maxVal < elVal) {
                    element.val(maxVal);
                    elVal = maxVal < minVal ? minVal : maxVal;
                }
                ctrl.$setViewValue(elVal);
            } else {
                ctrl.$validate();
            }
        }
        function stepChange(val) {
            stepVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (supportsRange && ctrl.$viewValue !== element.val()) {
                ctrl.$setViewValue(element.val());
            } else {
                ctrl.$validate();
            }
        }
    }
    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = "url";
        ctrl.$validators.url = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
    }
    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = "email";
        ctrl.$validators.email = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
    }
    function radioInputType(scope, element, attr, ctrl) {
        var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== "false";
        if (isUndefined(attr.name)) {
            element.attr("name", nextUid());
        }
        var listener = function(ev) {
            var value;
            if (element[0].checked) {
                value = attr.value;
                if (doTrim) {
                    value = trim(value);
                }
                ctrl.$setViewValue(value, ev && ev.type);
            }
        };
        element.on("click", listener);
        ctrl.$render = function() {
            var value = attr.value;
            if (doTrim) {
                value = trim(value);
            }
            element[0].checked = value === ctrl.$viewValue;
        };
        attr.$observe("value", ctrl.$render);
    }
    function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
            parseFn = $parse(expression);
            if (!parseFn.constant) {
                throw ngModelMinErr("constexpr", "Expected constant expression for `{0}`, but saw " + "`{1}`.", name, expression);
            }
            return parseFn(context);
        }
        return fallback;
    }
    function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, "ngTrueValue", attr.ngTrueValue, true);
        var falseValue = parseConstantExpr($parse, scope, "ngFalseValue", attr.ngFalseValue, false);
        var listener = function(ev) {
            ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };
        element.on("click", listener);
        ctrl.$render = function() {
            element[0].checked = ctrl.$viewValue;
        };
        ctrl.$isEmpty = function(value) {
            return value === false;
        };
        ctrl.$formatters.push(function(value) {
            return equals(value, trueValue);
        });
        ctrl.$parsers.push(function(value) {
            return value ? trueValue : falseValue;
        });
    }
    var inputDirective = [ "$browser", "$sniffer", "$filter", "$parse", function($browser, $sniffer, $filter, $parse) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(scope, element, attr, ctrls) {
                    if (ctrls[0]) {
                        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                    }
                }
            }
        };
    } ];
    var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
    var ngValueDirective = function() {
        function updateElementValue(element, attr, value) {
            var propValue = isDefined(value) ? value : msie === 9 ? "" : null;
            element.prop("value", propValue);
            attr.$set("value", value);
        }
        return {
            restrict: "A",
            priority: 100,
            compile: function(tpl, tplAttr) {
                if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
                    return function ngValueConstantLink(scope, elm, attr) {
                        var value = scope.$eval(attr.ngValue);
                        updateElementValue(elm, attr, value);
                    };
                } else {
                    return function ngValueLink(scope, elm, attr) {
                        scope.$watch(attr.ngValue, function valueWatchAction(value) {
                            updateElementValue(elm, attr, value);
                        });
                    };
                }
            }
        };
    };
    var ngBindDirective = [ "$compile", function($compile) {
        return {
            restrict: "AC",
            compile: function ngBindCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindLink(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBind);
                    element = element[0];
                    scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                        element.textContent = stringify(value);
                    });
                };
            }
        };
    } ];
    var ngBindTemplateDirective = [ "$interpolate", "$compile", function($interpolate, $compile) {
        return {
            compile: function ngBindTemplateCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindTemplateLink(scope, element, attr) {
                    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                    $compile.$$addBindingInfo(element, interpolateFn.expressions);
                    element = element[0];
                    attr.$observe("ngBindTemplate", function(value) {
                        element.textContent = isUndefined(value) ? "" : value;
                    });
                };
            }
        };
    } ];
    var ngBindHtmlDirective = [ "$sce", "$parse", "$compile", function($sce, $parse, $compile) {
        return {
            restrict: "A",
            compile: function ngBindHtmlCompile(tElement, tAttrs) {
                var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
                var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
                    return $sce.valueOf(val);
                });
                $compile.$$addBindingClass(tElement);
                return function ngBindHtmlLink(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBindHtml);
                    scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                        var value = ngBindHtmlGetter(scope);
                        element.html($sce.getTrustedHtml(value) || "");
                    });
                };
            }
        };
    } ];
    var ngChangeDirective = valueFn({
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function() {
                scope.$eval(attr.ngChange);
            });
        }
    });
    function classDirective(name, selector) {
        name = "ngClass" + name;
        var indexWatchExpression;
        return [ "$parse", function($parse) {
            return {
                restrict: "AC",
                link: function(scope, element, attr) {
                    var classCounts = element.data("$classCounts");
                    var oldModulo = true;
                    var oldClassString;
                    if (!classCounts) {
                        classCounts = createMap();
                        element.data("$classCounts", classCounts);
                    }
                    if (name !== "ngClass") {
                        if (!indexWatchExpression) {
                            indexWatchExpression = $parse("$index", function moduloTwo($index) {
                                return $index & 1;
                            });
                        }
                        scope.$watch(indexWatchExpression, ngClassIndexWatchAction);
                    }
                    scope.$watch($parse(attr[name], toClassString), ngClassWatchAction);
                    function addClasses(classString) {
                        classString = digestClassCounts(split(classString), 1);
                        attr.$addClass(classString);
                    }
                    function removeClasses(classString) {
                        classString = digestClassCounts(split(classString), -1);
                        attr.$removeClass(classString);
                    }
                    function updateClasses(oldClassString, newClassString) {
                        var oldClassArray = split(oldClassString);
                        var newClassArray = split(newClassString);
                        var toRemoveArray = arrayDifference(oldClassArray, newClassArray);
                        var toAddArray = arrayDifference(newClassArray, oldClassArray);
                        var toRemoveString = digestClassCounts(toRemoveArray, -1);
                        var toAddString = digestClassCounts(toAddArray, 1);
                        attr.$addClass(toAddString);
                        attr.$removeClass(toRemoveString);
                    }
                    function digestClassCounts(classArray, count) {
                        var classesToUpdate = [];
                        forEach(classArray, function(className) {
                            if (count > 0 || classCounts[className]) {
                                classCounts[className] = (classCounts[className] || 0) + count;
                                if (classCounts[className] === +(count > 0)) {
                                    classesToUpdate.push(className);
                                }
                            }
                        });
                        return classesToUpdate.join(" ");
                    }
                    function ngClassIndexWatchAction(newModulo) {
                        if (newModulo === selector) {
                            addClasses(oldClassString);
                        } else {
                            removeClasses(oldClassString);
                        }
                        oldModulo = newModulo;
                    }
                    function ngClassWatchAction(newClassString) {
                        if (!isString(newClassString)) {
                            newClassString = toClassString(newClassString);
                        }
                        if (oldModulo === selector) {
                            updateClasses(oldClassString, newClassString);
                        }
                        oldClassString = newClassString;
                    }
                }
            };
        } ];
        function arrayDifference(tokens1, tokens2) {
            if (!tokens1 || !tokens1.length) return [];
            if (!tokens2 || !tokens2.length) return tokens1;
            var values = [];
            outer: for (var i = 0; i < tokens1.length; i++) {
                var token = tokens1[i];
                for (var j = 0; j < tokens2.length; j++) {
                    if (token === tokens2[j]) continue outer;
                }
                values.push(token);
            }
            return values;
        }
        function split(classString) {
            return classString && classString.split(" ");
        }
        function toClassString(classValue) {
            var classString = classValue;
            if (isArray(classValue)) {
                classString = classValue.map(toClassString).join(" ");
            } else if (isObject(classValue)) {
                classString = Object.keys(classValue).filter(function(key) {
                    return classValue[key];
                }).join(" ");
            }
            return classString;
        }
    }
    var ngClassDirective = classDirective("", true);
    var ngClassOddDirective = classDirective("Odd", 0);
    var ngClassEvenDirective = classDirective("Even", 1);
    var ngCloakDirective = ngDirective({
        compile: function(element, attr) {
            attr.$set("ngCloak", undefined);
            element.removeClass("ng-cloak");
        }
    });
    var ngControllerDirective = [ function() {
        return {
            restrict: "A",
            scope: true,
            controller: "@",
            priority: 500
        };
    } ];
    var ngEventDirectives = {};
    var forceAsyncEvents = {
        blur: true,
        focus: true
    };
    forEach("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(eventName) {
        var directiveName = directiveNormalize("ng-" + eventName);
        ngEventDirectives[directiveName] = [ "$parse", "$rootScope", function($parse, $rootScope) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr[directiveName]);
                    return function ngEventHandler(scope, element) {
                        element.on(eventName, function(event) {
                            var callback = function() {
                                fn(scope, {
                                    $event: event
                                });
                            };
                            if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                                scope.$evalAsync(callback);
                            } else {
                                scope.$apply(callback);
                            }
                        });
                    };
                }
            };
        } ];
    });
    var ngIfDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            multiElement: true,
            transclude: "element",
            priority: 600,
            terminal: true,
            restrict: "A",
            $$tlb: true,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
                    if (value) {
                        if (!childScope) {
                            $transclude(function(clone, newScope) {
                                childScope = newScope;
                                clone[clone.length++] = $compile.$$createComment("end ngIf", $attr.ngIf);
                                block = {
                                    clone: clone
                                };
                                $animate.enter(clone, $element.parent(), $element);
                            });
                        }
                    } else {
                        if (previousElements) {
                            previousElements.remove();
                            previousElements = null;
                        }
                        if (childScope) {
                            childScope.$destroy();
                            childScope = null;
                        }
                        if (block) {
                            previousElements = getBlockNodes(block.clone);
                            $animate.leave(previousElements).done(function(response) {
                                if (response !== false) previousElements = null;
                            });
                            block = null;
                        }
                    }
                });
            }
        };
    } ];
    var ngIncludeDirective = [ "$templateRequest", "$anchorScroll", "$animate", function($templateRequest, $anchorScroll, $animate) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: true,
            transclude: "element",
            controller: angular.noop,
            compile: function(element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || "", autoScrollExp = attr.autoscroll;
                return function(scope, $element, $attr, ctrl, $transclude) {
                    var changeCounter = 0, currentScope, previousElement, currentElement;
                    var cleanupLastIncludeContent = function() {
                        if (previousElement) {
                            previousElement.remove();
                            previousElement = null;
                        }
                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }
                        if (currentElement) {
                            $animate.leave(currentElement).done(function(response) {
                                if (response !== false) previousElement = null;
                            });
                            previousElement = currentElement;
                            currentElement = null;
                        }
                    };
                    scope.$watch(srcExp, function ngIncludeWatchAction(src) {
                        var afterAnimation = function(response) {
                            if (response !== false && isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                $anchorScroll();
                            }
                        };
                        var thisChangeId = ++changeCounter;
                        if (src) {
                            $templateRequest(src, true).then(function(response) {
                                if (scope.$$destroyed) return;
                                if (thisChangeId !== changeCounter) return;
                                var newScope = scope.$new();
                                ctrl.template = response;
                                var clone = $transclude(newScope, function(clone) {
                                    cleanupLastIncludeContent();
                                    $animate.enter(clone, null, $element).done(afterAnimation);
                                });
                                currentScope = newScope;
                                currentElement = clone;
                                currentScope.$emit("$includeContentLoaded", src);
                                scope.$eval(onloadExp);
                            }, function() {
                                if (scope.$$destroyed) return;
                                if (thisChangeId === changeCounter) {
                                    cleanupLastIncludeContent();
                                    scope.$emit("$includeContentError", src);
                                }
                            });
                            scope.$emit("$includeContentRequested", src);
                        } else {
                            cleanupLastIncludeContent();
                            ctrl.template = null;
                        }
                    });
                };
            }
        };
    } ];
    var ngIncludeFillContentDirective = [ "$compile", function($compile) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(scope, $element, $attr, ctrl) {
                if (toString.call($element[0]).match(/SVG/)) {
                    $element.empty();
                    $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                        $element.append(clone);
                    }, {
                        futureParentElement: $element
                    });
                    return;
                }
                $element.html(ctrl.template);
                $compile($element.contents())(scope);
            }
        };
    } ];
    var ngInitDirective = ngDirective({
        priority: 450,
        compile: function() {
            return {
                pre: function(scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    });
    var ngListDirective = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(scope, element, attr, ctrl) {
                var ngList = attr.ngList || ", ";
                var trimValues = attr.ngTrim !== "false";
                var separator = trimValues ? trim(ngList) : ngList;
                var parse = function(viewValue) {
                    if (isUndefined(viewValue)) return;
                    var list = [];
                    if (viewValue) {
                        forEach(viewValue.split(separator), function(value) {
                            if (value) list.push(trimValues ? trim(value) : value);
                        });
                    }
                    return list;
                };
                ctrl.$parsers.push(parse);
                ctrl.$formatters.push(function(value) {
                    if (isArray(value)) {
                        return value.join(ngList);
                    }
                    return undefined;
                });
                ctrl.$isEmpty = function(value) {
                    return !value || !value.length;
                };
            }
        };
    };
    var VALID_CLASS = "ng-valid", INVALID_CLASS = "ng-invalid", PRISTINE_CLASS = "ng-pristine", DIRTY_CLASS = "ng-dirty", UNTOUCHED_CLASS = "ng-untouched", TOUCHED_CLASS = "ng-touched", EMPTY_CLASS = "ng-empty", NOT_EMPTY_CLASS = "ng-not-empty";
    var ngModelMinErr = minErr("ngModel");
    NgModelController.$inject = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$q", "$interpolate" ];
    function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = undefined;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = true;
        this.$touched = false;
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$error = {};
        this.$$success = {};
        this.$pending = undefined;
        this.$name = $interpolate($attr.name || "", false)($scope);
        this.$$parentForm = nullFormCtrl;
        this.$options = defaultModelOptions;
        this.$$parsedNgModel = $parse($attr.ngModel);
        this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
        this.$$ngModelGet = this.$$parsedNgModel;
        this.$$ngModelSet = this.$$parsedNgModelAssign;
        this.$$pendingDebounce = null;
        this.$$parserValid = undefined;
        this.$$currentValidationRunId = 0;
        Object.defineProperty(this, "$$scope", {
            value: $scope
        });
        this.$$attr = $attr;
        this.$$element = $element;
        this.$$animate = $animate;
        this.$$timeout = $timeout;
        this.$$parse = $parse;
        this.$$q = $q;
        this.$$exceptionHandler = $exceptionHandler;
        setupValidity(this);
        setupModelWatcher(this);
    }
    NgModelController.prototype = {
        $$initGetterSetters: function() {
            if (this.$options.getOption("getterSetter")) {
                var invokeModelGetter = this.$$parse(this.$$attr.ngModel + "()"), invokeModelSetter = this.$$parse(this.$$attr.ngModel + "($$$p)");
                this.$$ngModelGet = function($scope) {
                    var modelValue = this.$$parsedNgModel($scope);
                    if (isFunction(modelValue)) {
                        modelValue = invokeModelGetter($scope);
                    }
                    return modelValue;
                };
                this.$$ngModelSet = function($scope, newValue) {
                    if (isFunction(this.$$parsedNgModel($scope))) {
                        invokeModelSetter($scope, {
                            $$$p: newValue
                        });
                    } else {
                        this.$$parsedNgModelAssign($scope, newValue);
                    }
                };
            } else if (!this.$$parsedNgModel.assign) {
                throw ngModelMinErr("nonassign", "Expression '{0}' is non-assignable. Element: {1}", this.$$attr.ngModel, startingTag(this.$$element));
            }
        },
        $render: noop,
        $isEmpty: function(value) {
            return isUndefined(value) || value === "" || value === null || value !== value;
        },
        $$updateEmptyClasses: function(value) {
            if (this.$isEmpty(value)) {
                this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);
                this.$$animate.addClass(this.$$element, EMPTY_CLASS);
            } else {
                this.$$animate.removeClass(this.$$element, EMPTY_CLASS);
                this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);
            }
        },
        $setPristine: function() {
            this.$dirty = false;
            this.$pristine = true;
            this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
            this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
        },
        $setDirty: function() {
            this.$dirty = true;
            this.$pristine = false;
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$$parentForm.$setDirty();
        },
        $setUntouched: function() {
            this.$touched = false;
            this.$untouched = true;
            this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);
        },
        $setTouched: function() {
            this.$touched = true;
            this.$untouched = false;
            this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);
        },
        $rollbackViewValue: function() {
            this.$$timeout.cancel(this.$$pendingDebounce);
            this.$viewValue = this.$$lastCommittedViewValue;
            this.$render();
        },
        $validate: function() {
            if (isNumberNaN(this.$modelValue)) {
                return;
            }
            var viewValue = this.$$lastCommittedViewValue;
            var modelValue = this.$$rawModelValue;
            var prevValid = this.$valid;
            var prevModelValue = this.$modelValue;
            var allowInvalid = this.$options.getOption("allowInvalid");
            var that = this;
            this.$$runValidators(modelValue, viewValue, function(allValid) {
                if (!allowInvalid && prevValid !== allValid) {
                    that.$modelValue = allValid ? modelValue : undefined;
                    if (that.$modelValue !== prevModelValue) {
                        that.$$writeModelToScope();
                    }
                }
            });
        },
        $$runValidators: function(modelValue, viewValue, doneCallback) {
            this.$$currentValidationRunId++;
            var localValidationRunId = this.$$currentValidationRunId;
            var that = this;
            if (!processParseErrors()) {
                validationDone(false);
                return;
            }
            if (!processSyncValidators()) {
                validationDone(false);
                return;
            }
            processAsyncValidators();
            function processParseErrors() {
                var errorKey = that.$$parserName || "parse";
                if (isUndefined(that.$$parserValid)) {
                    setValidity(errorKey, null);
                } else {
                    if (!that.$$parserValid) {
                        forEach(that.$validators, function(v, name) {
                            setValidity(name, null);
                        });
                        forEach(that.$asyncValidators, function(v, name) {
                            setValidity(name, null);
                        });
                    }
                    setValidity(errorKey, that.$$parserValid);
                    return that.$$parserValid;
                }
                return true;
            }
            function processSyncValidators() {
                var syncValidatorsValid = true;
                forEach(that.$validators, function(validator, name) {
                    var result = Boolean(validator(modelValue, viewValue));
                    syncValidatorsValid = syncValidatorsValid && result;
                    setValidity(name, result);
                });
                if (!syncValidatorsValid) {
                    forEach(that.$asyncValidators, function(v, name) {
                        setValidity(name, null);
                    });
                    return false;
                }
                return true;
            }
            function processAsyncValidators() {
                var validatorPromises = [];
                var allValid = true;
                forEach(that.$asyncValidators, function(validator, name) {
                    var promise = validator(modelValue, viewValue);
                    if (!isPromiseLike(promise)) {
                        throw ngModelMinErr("nopromise", "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
                    }
                    setValidity(name, undefined);
                    validatorPromises.push(promise.then(function() {
                        setValidity(name, true);
                    }, function() {
                        allValid = false;
                        setValidity(name, false);
                    }));
                });
                if (!validatorPromises.length) {
                    validationDone(true);
                } else {
                    that.$$q.all(validatorPromises).then(function() {
                        validationDone(allValid);
                    }, noop);
                }
            }
            function setValidity(name, isValid) {
                if (localValidationRunId === that.$$currentValidationRunId) {
                    that.$setValidity(name, isValid);
                }
            }
            function validationDone(allValid) {
                if (localValidationRunId === that.$$currentValidationRunId) {
                    doneCallback(allValid);
                }
            }
        },
        $commitViewValue: function() {
            var viewValue = this.$viewValue;
            this.$$timeout.cancel(this.$$pendingDebounce);
            if (this.$$lastCommittedViewValue === viewValue && (viewValue !== "" || !this.$$hasNativeValidators)) {
                return;
            }
            this.$$updateEmptyClasses(viewValue);
            this.$$lastCommittedViewValue = viewValue;
            if (this.$pristine) {
                this.$setDirty();
            }
            this.$$parseAndValidate();
        },
        $$parseAndValidate: function() {
            var viewValue = this.$$lastCommittedViewValue;
            var modelValue = viewValue;
            var that = this;
            this.$$parserValid = isUndefined(modelValue) ? undefined : true;
            if (this.$$parserValid) {
                for (var i = 0; i < this.$parsers.length; i++) {
                    modelValue = this.$parsers[i](modelValue);
                    if (isUndefined(modelValue)) {
                        this.$$parserValid = false;
                        break;
                    }
                }
            }
            if (isNumberNaN(this.$modelValue)) {
                this.$modelValue = this.$$ngModelGet(this.$$scope);
            }
            var prevModelValue = this.$modelValue;
            var allowInvalid = this.$options.getOption("allowInvalid");
            this.$$rawModelValue = modelValue;
            if (allowInvalid) {
                this.$modelValue = modelValue;
                writeToModelIfNeeded();
            }
            this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
                if (!allowInvalid) {
                    that.$modelValue = allValid ? modelValue : undefined;
                    writeToModelIfNeeded();
                }
            });
            function writeToModelIfNeeded() {
                if (that.$modelValue !== prevModelValue) {
                    that.$$writeModelToScope();
                }
            }
        },
        $$writeModelToScope: function() {
            this.$$ngModelSet(this.$$scope, this.$modelValue);
            forEach(this.$viewChangeListeners, function(listener) {
                try {
                    listener();
                } catch (e) {
                    this.$$exceptionHandler(e);
                }
            }, this);
        },
        $setViewValue: function(value, trigger) {
            this.$viewValue = value;
            if (this.$options.getOption("updateOnDefault")) {
                this.$$debounceViewValueCommit(trigger);
            }
        },
        $$debounceViewValueCommit: function(trigger) {
            var debounceDelay = this.$options.getOption("debounce");
            if (isNumber(debounceDelay[trigger])) {
                debounceDelay = debounceDelay[trigger];
            } else if (isNumber(debounceDelay["default"])) {
                debounceDelay = debounceDelay["default"];
            }
            this.$$timeout.cancel(this.$$pendingDebounce);
            var that = this;
            if (debounceDelay > 0) {
                this.$$pendingDebounce = this.$$timeout(function() {
                    that.$commitViewValue();
                }, debounceDelay);
            } else if (this.$$scope.$root.$$phase) {
                this.$commitViewValue();
            } else {
                this.$$scope.$apply(function() {
                    that.$commitViewValue();
                });
            }
        },
        $overrideModelOptions: function(options) {
            this.$options = this.$options.createChild(options);
        }
    };
    function setupModelWatcher(ctrl) {
        ctrl.$$scope.$watch(function ngModelWatch(scope) {
            var modelValue = ctrl.$$ngModelGet(scope);
            if (modelValue !== ctrl.$modelValue && (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)) {
                ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
                ctrl.$$parserValid = undefined;
                var formatters = ctrl.$formatters, idx = formatters.length;
                var viewValue = modelValue;
                while (idx--) {
                    viewValue = formatters[idx](viewValue);
                }
                if (ctrl.$viewValue !== viewValue) {
                    ctrl.$$updateEmptyClasses(viewValue);
                    ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
                    ctrl.$render();
                    ctrl.$$runValidators(ctrl.$modelValue, ctrl.$viewValue, noop);
                }
            }
            return modelValue;
        });
    }
    addSetValidityMethod({
        clazz: NgModelController,
        set: function(object, property) {
            object[property] = true;
        },
        unset: function(object, property) {
            delete object[property];
        }
    });
    var ngModelDirective = [ "$rootScope", function($rootScope) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: NgModelController,
            priority: 1,
            compile: function ngModelCompile(element) {
                element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
                return {
                    pre: function ngModelPreLink(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || modelCtrl.$$parentForm, optionsCtrl = ctrls[2];
                        if (optionsCtrl) {
                            modelCtrl.$options = optionsCtrl.$options;
                        }
                        modelCtrl.$$initGetterSetters();
                        formCtrl.$addControl(modelCtrl);
                        attr.$observe("name", function(newValue) {
                            if (modelCtrl.$name !== newValue) {
                                modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                            }
                        });
                        scope.$on("$destroy", function() {
                            modelCtrl.$$parentForm.$removeControl(modelCtrl);
                        });
                    },
                    post: function ngModelPostLink(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0];
                        if (modelCtrl.$options.getOption("updateOn")) {
                            element.on(modelCtrl.$options.getOption("updateOn"), function(ev) {
                                modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                            });
                        }
                        function setTouched() {
                            modelCtrl.$setTouched();
                        }
                        element.on("blur", function() {
                            if (modelCtrl.$touched) return;
                            if ($rootScope.$$phase) {
                                scope.$evalAsync(setTouched);
                            } else {
                                scope.$apply(setTouched);
                            }
                        });
                    }
                };
            }
        };
    } ];
    var defaultModelOptions;
    var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
    function ModelOptions(options) {
        this.$$options = options;
    }
    ModelOptions.prototype = {
        getOption: function(name) {
            return this.$$options[name];
        },
        createChild: function(options) {
            var inheritAll = false;
            options = extend({}, options);
            forEach(options, function(option, key) {
                if (option === "$inherit") {
                    if (key === "*") {
                        inheritAll = true;
                    } else {
                        options[key] = this.$$options[key];
                        if (key === "updateOn") {
                            options.updateOnDefault = this.$$options.updateOnDefault;
                        }
                    }
                } else {
                    if (key === "updateOn") {
                        options.updateOnDefault = false;
                        options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
                            options.updateOnDefault = true;
                            return " ";
                        }));
                    }
                }
            }, this);
            if (inheritAll) {
                delete options["*"];
                defaults(options, this.$$options);
            }
            defaults(options, defaultModelOptions.$$options);
            return new ModelOptions(options);
        }
    };
    defaultModelOptions = new ModelOptions({
        updateOn: "",
        updateOnDefault: true,
        debounce: 0,
        getterSetter: false,
        allowInvalid: false,
        timezone: null
    });
    var ngModelOptionsDirective = function() {
        NgModelOptionsController.$inject = [ "$attrs", "$scope" ];
        function NgModelOptionsController($attrs, $scope) {
            this.$$attrs = $attrs;
            this.$$scope = $scope;
        }
        NgModelOptionsController.prototype = {
            $onInit: function() {
                var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions;
                var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);
                this.$options = parentOptions.createChild(modelOptionsDefinition);
            }
        };
        return {
            restrict: "A",
            priority: 10,
            require: {
                parentCtrl: "?^^ngModelOptions"
            },
            bindToController: true,
            controller: NgModelOptionsController
        };
    };
    function defaults(dst, src) {
        forEach(src, function(value, key) {
            if (!isDefined(dst[key])) {
                dst[key] = value;
            }
        });
    }
    var ngNonBindableDirective = ngDirective({
        terminal: true,
        priority: 1e3
    });
    var ngOptionsMinErr = minErr("ngOptions");
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
    var ngOptionsDirective = [ "$compile", "$document", "$parse", function($compile, $document, $parse) {
        function parseOptionsExpression(optionsExp, selectElement, scope) {
            var match = optionsExp.match(NG_OPTIONS_REGEXP);
            if (!match) {
                throw ngOptionsMinErr("iexp", "Expected expression in form of " + "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" + " but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
            }
            var valueName = match[5] || match[7];
            var keyName = match[6];
            var selectAs = / as /.test(match[0]) && match[1];
            var trackBy = match[9];
            var valueFn = $parse(match[2] ? match[1] : valueName);
            var selectAsFn = selectAs && $parse(selectAs);
            var viewValueFn = selectAsFn || valueFn;
            var trackByFn = trackBy && $parse(trackBy);
            var getTrackByValueFn = trackBy ? function(value, locals) {
                return trackByFn(scope, locals);
            } : function getHashOfValue(value) {
                return hashKey(value);
            };
            var getTrackByValue = function(value, key) {
                return getTrackByValueFn(value, getLocals(value, key));
            };
            var displayFn = $parse(match[2] || match[1]);
            var groupByFn = $parse(match[3] || "");
            var disableWhenFn = $parse(match[4] || "");
            var valuesFn = $parse(match[8]);
            var locals = {};
            var getLocals = keyName ? function(value, key) {
                locals[keyName] = key;
                locals[valueName] = value;
                return locals;
            } : function(value) {
                locals[valueName] = value;
                return locals;
            };
            function Option(selectValue, viewValue, label, group, disabled) {
                this.selectValue = selectValue;
                this.viewValue = viewValue;
                this.label = label;
                this.group = group;
                this.disabled = disabled;
            }
            function getOptionValuesKeys(optionValues) {
                var optionValuesKeys;
                if (!keyName && isArrayLike(optionValues)) {
                    optionValuesKeys = optionValues;
                } else {
                    optionValuesKeys = [];
                    for (var itemKey in optionValues) {
                        if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== "$") {
                            optionValuesKeys.push(itemKey);
                        }
                    }
                }
                return optionValuesKeys;
            }
            return {
                trackBy: trackBy,
                getTrackByValue: getTrackByValue,
                getWatchables: $parse(valuesFn, function(optionValues) {
                    var watchedArray = [];
                    optionValues = optionValues || [];
                    var optionValuesKeys = getOptionValuesKeys(optionValues);
                    var optionValuesLength = optionValuesKeys.length;
                    for (var index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                        var value = optionValues[key];
                        var locals = getLocals(value, key);
                        var selectValue = getTrackByValueFn(value, locals);
                        watchedArray.push(selectValue);
                        if (match[2] || match[1]) {
                            var label = displayFn(scope, locals);
                            watchedArray.push(label);
                        }
                        if (match[4]) {
                            var disableWhen = disableWhenFn(scope, locals);
                            watchedArray.push(disableWhen);
                        }
                    }
                    return watchedArray;
                }),
                getOptions: function() {
                    var optionItems = [];
                    var selectValueMap = {};
                    var optionValues = valuesFn(scope) || [];
                    var optionValuesKeys = getOptionValuesKeys(optionValues);
                    var optionValuesLength = optionValuesKeys.length;
                    for (var index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                        var value = optionValues[key];
                        var locals = getLocals(value, key);
                        var viewValue = viewValueFn(scope, locals);
                        var selectValue = getTrackByValueFn(viewValue, locals);
                        var label = displayFn(scope, locals);
                        var group = groupByFn(scope, locals);
                        var disabled = disableWhenFn(scope, locals);
                        var optionItem = new Option(selectValue, viewValue, label, group, disabled);
                        optionItems.push(optionItem);
                        selectValueMap[selectValue] = optionItem;
                    }
                    return {
                        items: optionItems,
                        selectValueMap: selectValueMap,
                        getOptionFromViewValue: function(value) {
                            return selectValueMap[getTrackByValue(value)];
                        },
                        getViewValueFromOption: function(option) {
                            return trackBy ? copy(option.viewValue) : option.viewValue;
                        }
                    };
                }
            };
        }
        var optionTemplate = window.document.createElement("option"), optGroupTemplate = window.document.createElement("optgroup");
        function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
            var selectCtrl = ctrls[0];
            var ngModelCtrl = ctrls[1];
            var multiple = attr.multiple;
            for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
                if (children[i].value === "") {
                    selectCtrl.hasEmptyOption = true;
                    selectCtrl.emptyOption = children.eq(i);
                    break;
                }
            }
            var providedEmptyOption = !!selectCtrl.emptyOption;
            var unknownOption = jqLite(optionTemplate.cloneNode(false));
            unknownOption.val("?");
            var options;
            var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
            var listFragment = $document[0].createDocumentFragment();
            selectCtrl.generateUnknownOptionValue = function(val) {
                return "?";
            };
            if (!multiple) {
                selectCtrl.writeValue = function writeNgOptionsValue(value) {
                    var selectedOption = options.selectValueMap[selectElement.val()];
                    var option = options.getOptionFromViewValue(value);
                    if (selectedOption) selectedOption.element.removeAttribute("selected");
                    if (option) {
                        if (selectElement[0].value !== option.selectValue) {
                            selectCtrl.removeUnknownOption();
                            selectCtrl.unselectEmptyOption();
                            selectElement[0].value = option.selectValue;
                            option.element.selected = true;
                        }
                        option.element.setAttribute("selected", "selected");
                    } else {
                        if (providedEmptyOption) {
                            selectCtrl.selectEmptyOption();
                        } else if (selectCtrl.unknownOption.parent().length) {
                            selectCtrl.updateUnknownOption(value);
                        } else {
                            selectCtrl.renderUnknownOption(value);
                        }
                    }
                };
                selectCtrl.readValue = function readNgOptionsValue() {
                    var selectedOption = options.selectValueMap[selectElement.val()];
                    if (selectedOption && !selectedOption.disabled) {
                        selectCtrl.unselectEmptyOption();
                        selectCtrl.removeUnknownOption();
                        return options.getViewValueFromOption(selectedOption);
                    }
                    return null;
                };
                if (ngOptions.trackBy) {
                    scope.$watch(function() {
                        return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
                    }, function() {
                        ngModelCtrl.$render();
                    });
                }
            } else {
                selectCtrl.writeValue = function writeNgOptionsMultiple(values) {
                    var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];
                    options.items.forEach(function(option) {
                        if (option.element.selected && !includes(selectedOptions, option)) {
                            option.element.selected = false;
                        }
                    });
                };
                selectCtrl.readValue = function readNgOptionsMultiple() {
                    var selectedValues = selectElement.val() || [], selections = [];
                    forEach(selectedValues, function(value) {
                        var option = options.selectValueMap[value];
                        if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
                    });
                    return selections;
                };
                if (ngOptions.trackBy) {
                    scope.$watchCollection(function() {
                        if (isArray(ngModelCtrl.$viewValue)) {
                            return ngModelCtrl.$viewValue.map(function(value) {
                                return ngOptions.getTrackByValue(value);
                            });
                        }
                    }, function() {
                        ngModelCtrl.$render();
                    });
                }
            }
            if (providedEmptyOption) {
                selectCtrl.emptyOption.remove();
                $compile(selectCtrl.emptyOption)(scope);
                if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
                    selectCtrl.hasEmptyOption = false;
                    selectCtrl.registerOption = function(optionScope, optionEl) {
                        if (optionEl.val() === "") {
                            selectCtrl.hasEmptyOption = true;
                            selectCtrl.emptyOption = optionEl;
                            selectCtrl.emptyOption.removeClass("ng-scope");
                            ngModelCtrl.$render();
                            optionEl.on("$destroy", function() {
                                selectCtrl.hasEmptyOption = false;
                                selectCtrl.emptyOption = undefined;
                            });
                        }
                    };
                } else {
                    selectCtrl.emptyOption.removeClass("ng-scope");
                }
            }
            selectElement.empty();
            updateOptions();
            scope.$watchCollection(ngOptions.getWatchables, updateOptions);
            function addOptionElement(option, parent) {
                var optionElement = optionTemplate.cloneNode(false);
                parent.appendChild(optionElement);
                updateOptionElement(option, optionElement);
            }
            function getAndUpdateSelectedOption(viewValue) {
                var option = options.getOptionFromViewValue(viewValue);
                var element = option && option.element;
                if (element && !element.selected) element.selected = true;
                return option;
            }
            function updateOptionElement(option, element) {
                option.element = element;
                element.disabled = option.disabled;
                if (option.label !== element.label) {
                    element.label = option.label;
                    element.textContent = option.label;
                }
                element.value = option.selectValue;
            }
            function updateOptions() {
                var previousValue = options && selectCtrl.readValue();
                if (options) {
                    for (var i = options.items.length - 1; i >= 0; i--) {
                        var option = options.items[i];
                        if (isDefined(option.group)) {
                            jqLiteRemove(option.element.parentNode);
                        } else {
                            jqLiteRemove(option.element);
                        }
                    }
                }
                options = ngOptions.getOptions();
                var groupElementMap = {};
                if (providedEmptyOption) {
                    selectElement.prepend(selectCtrl.emptyOption);
                }
                options.items.forEach(function addOption(option) {
                    var groupElement;
                    if (isDefined(option.group)) {
                        groupElement = groupElementMap[option.group];
                        if (!groupElement) {
                            groupElement = optGroupTemplate.cloneNode(false);
                            listFragment.appendChild(groupElement);
                            groupElement.label = option.group === null ? "null" : option.group;
                            groupElementMap[option.group] = groupElement;
                        }
                        addOptionElement(option, groupElement);
                    } else {
                        addOptionElement(option, listFragment);
                    }
                });
                selectElement[0].appendChild(listFragment);
                ngModelCtrl.$render();
                if (!ngModelCtrl.$isEmpty(previousValue)) {
                    var nextValue = selectCtrl.readValue();
                    var isNotPrimitive = ngOptions.trackBy || multiple;
                    if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                        ngModelCtrl.$setViewValue(nextValue);
                        ngModelCtrl.$render();
                    }
                }
            }
        }
        return {
            restrict: "A",
            terminal: true,
            require: [ "select", "ngModel" ],
            link: {
                pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
                    ctrls[0].registerOption = noop;
                },
                post: ngOptionsPostLink
            }
        };
    } ];
    var ngPluralizeDirective = [ "$locale", "$interpolate", "$log", function($locale, $interpolate, $log) {
        var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
        return {
            link: function(scope, element, attr) {
                var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + "-" + offset + endSymbol, watchRemover = angular.noop, lastCount;
                forEach(attr, function(expression, attributeName) {
                    var tmpMatch = IS_WHEN.exec(attributeName);
                    if (tmpMatch) {
                        var whenKey = (tmpMatch[1] ? "-" : "") + lowercase(tmpMatch[2]);
                        whens[whenKey] = element.attr(attr.$attr[attributeName]);
                    }
                });
                forEach(whens, function(expression, key) {
                    whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                });
                scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
                    var count = parseFloat(newVal);
                    var countIsNaN = isNumberNaN(count);
                    if (!countIsNaN && !(count in whens)) {
                        count = $locale.pluralCat(count - offset);
                    }
                    if (count !== lastCount && !(countIsNaN && isNumberNaN(lastCount))) {
                        watchRemover();
                        var whenExpFn = whensExpFns[count];
                        if (isUndefined(whenExpFn)) {
                            if (newVal != null) {
                                $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
                            }
                            watchRemover = noop;
                            updateElementText();
                        } else {
                            watchRemover = scope.$watch(whenExpFn, updateElementText);
                        }
                        lastCount = count;
                    }
                });
                function updateElementText(newText) {
                    element.text(newText || "");
                }
            }
        };
    } ];
    var ngRepeatDirective = [ "$parse", "$animate", "$compile", function($parse, $animate, $compile) {
        var NG_REMOVED = "$$NG_REMOVED";
        var ngRepeatMinErr = minErr("ngRepeat");
        var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
            scope[valueIdentifier] = value;
            if (keyIdentifier) scope[keyIdentifier] = key;
            scope.$index = index;
            scope.$first = index === 0;
            scope.$last = index === arrayLength - 1;
            scope.$middle = !(scope.$first || scope.$last);
            scope.$odd = !(scope.$even = (index & 1) === 0);
        };
        var getBlockStart = function(block) {
            return block.clone[0];
        };
        var getBlockEnd = function(block) {
            return block.clone[block.clone.length - 1];
        };
        return {
            restrict: "A",
            multiElement: true,
            transclude: "element",
            priority: 1e3,
            terminal: true,
            $$tlb: true,
            compile: function ngRepeatCompile($element, $attr) {
                var expression = $attr.ngRepeat;
                var ngRepeatEndComment = $compile.$$createComment("end ngRepeat", expression);
                var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!match) {
                    throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                }
                var lhs = match[1];
                var rhs = match[2];
                var aliasAs = match[3];
                var trackByExp = match[4];
                match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);
                if (!match) {
                    throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                }
                var valueIdentifier = match[3] || match[1];
                var keyIdentifier = match[2];
                if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
                    throw ngRepeatMinErr("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
                }
                var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
                var hashFnLocals = {
                    $id: hashKey
                };
                if (trackByExp) {
                    trackByExpGetter = $parse(trackByExp);
                } else {
                    trackByIdArrayFn = function(key, value) {
                        return hashKey(value);
                    };
                    trackByIdObjFn = function(key) {
                        return key;
                    };
                }
                return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
                    if (trackByExpGetter) {
                        trackByIdExpFn = function(key, value, index) {
                            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
                            hashFnLocals[valueIdentifier] = value;
                            hashFnLocals.$index = index;
                            return trackByExpGetter($scope, hashFnLocals);
                        };
                    }
                    var lastBlockMap = createMap();
                    $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                        var index, length, previousNode = $element[0], nextNode, nextBlockMap = createMap(), collectionLength, key, value, trackById, trackByIdFn, collectionKeys, block, nextBlockOrder, elementsToRemove;
                        if (aliasAs) {
                            $scope[aliasAs] = collection;
                        }
                        if (isArrayLike(collection)) {
                            collectionKeys = collection;
                            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                        } else {
                            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                            collectionKeys = [];
                            for (var itemKey in collection) {
                                if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== "$") {
                                    collectionKeys.push(itemKey);
                                }
                            }
                        }
                        collectionLength = collectionKeys.length;
                        nextBlockOrder = new Array(collectionLength);
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            trackById = trackByIdFn(key, value, index);
                            if (lastBlockMap[trackById]) {
                                block = lastBlockMap[trackById];
                                delete lastBlockMap[trackById];
                                nextBlockMap[trackById] = block;
                                nextBlockOrder[index] = block;
                            } else if (nextBlockMap[trackById]) {
                                forEach(nextBlockOrder, function(block) {
                                    if (block && block.scope) lastBlockMap[block.id] = block;
                                });
                                throw ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                            } else {
                                nextBlockOrder[index] = {
                                    id: trackById,
                                    scope: undefined,
                                    clone: undefined
                                };
                                nextBlockMap[trackById] = true;
                            }
                        }
                        for (var blockKey in lastBlockMap) {
                            block = lastBlockMap[blockKey];
                            elementsToRemove = getBlockNodes(block.clone);
                            $animate.leave(elementsToRemove);
                            if (elementsToRemove[0].parentNode) {
                                for (index = 0, length = elementsToRemove.length; index < length; index++) {
                                    elementsToRemove[index][NG_REMOVED] = true;
                                }
                            }
                            block.scope.$destroy();
                        }
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            block = nextBlockOrder[index];
                            if (block.scope) {
                                nextNode = previousNode;
                                do {
                                    nextNode = nextNode.nextSibling;
                                } while (nextNode && nextNode[NG_REMOVED]);
                                if (getBlockStart(block) !== nextNode) {
                                    $animate.move(getBlockNodes(block.clone), null, previousNode);
                                }
                                previousNode = getBlockEnd(block);
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            } else {
                                $transclude(function ngRepeatTransclude(clone, scope) {
                                    block.scope = scope;
                                    var endNode = ngRepeatEndComment.cloneNode(false);
                                    clone[clone.length++] = endNode;
                                    $animate.enter(clone, null, previousNode);
                                    previousNode = endNode;
                                    block.clone = clone;
                                    nextBlockMap[block.id] = block;
                                    updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                                });
                            }
                        }
                        lastBlockMap = nextBlockMap;
                    });
                };
            }
        };
    } ];
    var NG_HIDE_CLASS = "ng-hide";
    var NG_HIDE_IN_PROGRESS_CLASS = "ng-hide-animate";
    var ngShowDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: true,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
                    $animate[value ? "removeClass" : "addClass"](element, NG_HIDE_CLASS, {
                        tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                    });
                });
            }
        };
    } ];
    var ngHideDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: true,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
                    $animate[value ? "addClass" : "removeClass"](element, NG_HIDE_CLASS, {
                        tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                    });
                });
            }
        };
    } ];
    var ngStyleDirective = ngDirective(function(scope, element, attr) {
        scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
            if (oldStyles && newStyles !== oldStyles) {
                forEach(oldStyles, function(val, style) {
                    element.css(style, "");
                });
            }
            if (newStyles) element.css(newStyles);
        }, true);
    });
    var ngSwitchDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function NgSwitchController() {
                this.cases = {};
            } ],
            link: function(scope, element, attr, ngSwitchController) {
                var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [];
                var spliceFactory = function(array, index) {
                    return function(response) {
                        if (response !== false) array.splice(index, 1);
                    };
                };
                scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
                    var i, ii;
                    while (previousLeaveAnimations.length) {
                        $animate.cancel(previousLeaveAnimations.pop());
                    }
                    for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                        var selected = getBlockNodes(selectedElements[i].clone);
                        selectedScopes[i].$destroy();
                        var runner = previousLeaveAnimations[i] = $animate.leave(selected);
                        runner.done(spliceFactory(previousLeaveAnimations, i));
                    }
                    selectedElements.length = 0;
                    selectedScopes.length = 0;
                    if (selectedTranscludes = ngSwitchController.cases["!" + value] || ngSwitchController.cases["?"]) {
                        forEach(selectedTranscludes, function(selectedTransclude) {
                            selectedTransclude.transclude(function(caseElement, selectedScope) {
                                selectedScopes.push(selectedScope);
                                var anchor = selectedTransclude.element;
                                caseElement[caseElement.length++] = $compile.$$createComment("end ngSwitchWhen");
                                var block = {
                                    clone: caseElement
                                };
                                selectedElements.push(block);
                                $animate.enter(caseElement, anchor.parent(), anchor);
                            });
                        });
                    }
                });
            }
        };
    } ];
    var ngSwitchWhenDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: true,
        link: function(scope, element, attrs, ctrl, $transclude) {
            var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(function(element, index, array) {
                return array[index - 1] !== element;
            });
            forEach(cases, function(whenCase) {
                ctrl.cases["!" + whenCase] = ctrl.cases["!" + whenCase] || [];
                ctrl.cases["!" + whenCase].push({
                    transclude: $transclude,
                    element: element
                });
            });
        }
    });
    var ngSwitchDefaultDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: true,
        link: function(scope, element, attr, ctrl, $transclude) {
            ctrl.cases["?"] = ctrl.cases["?"] || [];
            ctrl.cases["?"].push({
                transclude: $transclude,
                element: element
            });
        }
    });
    var ngTranscludeMinErr = minErr("ngTransclude");
    var ngTranscludeDirective = [ "$compile", function($compile) {
        return {
            restrict: "EAC",
            terminal: true,
            compile: function ngTranscludeCompile(tElement) {
                var fallbackLinkFn = $compile(tElement.contents());
                tElement.empty();
                return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {
                    if (!$transclude) {
                        throw ngTranscludeMinErr("orphan", "Illegal use of ngTransclude directive in the template! " + "No parent directive that requires a transclusion found. " + "Element: {0}", startingTag($element));
                    }
                    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
                        $attrs.ngTransclude = "";
                    }
                    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
                    $transclude(ngTranscludeCloneAttachFn, null, slotName);
                    if (slotName && !$transclude.isSlotFilled(slotName)) {
                        useFallbackContent();
                    }
                    function ngTranscludeCloneAttachFn(clone, transcludedScope) {
                        if (clone.length && notWhitespace(clone)) {
                            $element.append(clone);
                        } else {
                            useFallbackContent();
                            transcludedScope.$destroy();
                        }
                    }
                    function useFallbackContent() {
                        fallbackLinkFn($scope, function(clone) {
                            $element.append(clone);
                        });
                    }
                    function notWhitespace(nodes) {
                        for (var i = 0, ii = nodes.length; i < ii; i++) {
                            var node = nodes[i];
                            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
                                return true;
                            }
                        }
                    }
                };
            }
        };
    } ];
    var scriptDirective = [ "$templateCache", function($templateCache) {
        return {
            restrict: "E",
            terminal: true,
            compile: function(element, attr) {
                if (attr.type === "text/ng-template") {
                    var templateUrl = attr.id, text = element[0].text;
                    $templateCache.put(templateUrl, text);
                }
            }
        };
    } ];
    var noopNgModelController = {
        $setViewValue: noop,
        $render: noop
    };
    function setOptionSelectedStatus(optionEl, value) {
        optionEl.prop("selected", value);
        optionEl.attr("selected", value);
    }
    var SelectController = [ "$element", "$scope", function($element, $scope) {
        var self = this, optionsMap = new NgMap();
        self.selectValueMap = {};
        self.ngModelCtrl = noopNgModelController;
        self.multiple = false;
        self.unknownOption = jqLite(window.document.createElement("option"));
        self.hasEmptyOption = false;
        self.emptyOption = undefined;
        self.renderUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            $element.prepend(self.unknownOption);
            setOptionSelectedStatus(self.unknownOption, true);
            $element.val(unknownVal);
        };
        self.updateUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            setOptionSelectedStatus(self.unknownOption, true);
            $element.val(unknownVal);
        };
        self.generateUnknownOptionValue = function(val) {
            return "? " + hashKey(val) + " ?";
        };
        self.removeUnknownOption = function() {
            if (self.unknownOption.parent()) self.unknownOption.remove();
        };
        self.selectEmptyOption = function() {
            if (self.emptyOption) {
                $element.val("");
                setOptionSelectedStatus(self.emptyOption, true);
            }
        };
        self.unselectEmptyOption = function() {
            if (self.hasEmptyOption) {
                self.emptyOption.removeAttr("selected");
            }
        };
        $scope.$on("$destroy", function() {
            self.renderUnknownOption = noop;
        });
        self.readValue = function readSingleValue() {
            var val = $element.val();
            var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;
            if (self.hasOption(realVal)) {
                return realVal;
            }
            return null;
        };
        self.writeValue = function writeSingleValue(value) {
            var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
            if (currentlySelectedOption) setOptionSelectedStatus(jqLite(currentlySelectedOption), false);
            if (self.hasOption(value)) {
                self.removeUnknownOption();
                var hashedVal = hashKey(value);
                $element.val(hashedVal in self.selectValueMap ? hashedVal : value);
                var selectedOption = $element[0].options[$element[0].selectedIndex];
                setOptionSelectedStatus(jqLite(selectedOption), true);
            } else {
                if (value == null && self.emptyOption) {
                    self.removeUnknownOption();
                    self.selectEmptyOption();
                } else if (self.unknownOption.parent().length) {
                    self.updateUnknownOption(value);
                } else {
                    self.renderUnknownOption(value);
                }
            }
        };
        self.addOption = function(value, element) {
            if (element[0].nodeType === NODE_TYPE_COMMENT) return;
            assertNotHasOwnProperty(value, '"option value"');
            if (value === "") {
                self.hasEmptyOption = true;
                self.emptyOption = element;
            }
            var count = optionsMap.get(value) || 0;
            optionsMap.set(value, count + 1);
            scheduleRender();
        };
        self.removeOption = function(value) {
            var count = optionsMap.get(value);
            if (count) {
                if (count === 1) {
                    optionsMap.delete(value);
                    if (value === "") {
                        self.hasEmptyOption = false;
                        self.emptyOption = undefined;
                    }
                } else {
                    optionsMap.set(value, count - 1);
                }
            }
        };
        self.hasOption = function(value) {
            return !!optionsMap.get(value);
        };
        var renderScheduled = false;
        function scheduleRender() {
            if (renderScheduled) return;
            renderScheduled = true;
            $scope.$$postDigest(function() {
                renderScheduled = false;
                self.ngModelCtrl.$render();
            });
        }
        var updateScheduled = false;
        function scheduleViewValueUpdate(renderAfter) {
            if (updateScheduled) return;
            updateScheduled = true;
            $scope.$$postDigest(function() {
                if ($scope.$$destroyed) return;
                updateScheduled = false;
                self.ngModelCtrl.$setViewValue(self.readValue());
                if (renderAfter) self.ngModelCtrl.$render();
            });
        }
        self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
            if (optionAttrs.$attr.ngValue) {
                var oldVal, hashedVal = NaN;
                optionAttrs.$observe("value", function valueAttributeObserveAction(newVal) {
                    var removal;
                    var previouslySelected = optionElement.prop("selected");
                    if (isDefined(hashedVal)) {
                        self.removeOption(oldVal);
                        delete self.selectValueMap[hashedVal];
                        removal = true;
                    }
                    hashedVal = hashKey(newVal);
                    oldVal = newVal;
                    self.selectValueMap[hashedVal] = newVal;
                    self.addOption(newVal, optionElement);
                    optionElement.attr("value", hashedVal);
                    if (removal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else if (interpolateValueFn) {
                optionAttrs.$observe("value", function valueAttributeObserveAction(newVal) {
                    self.readValue();
                    var removal;
                    var previouslySelected = optionElement.prop("selected");
                    if (isDefined(oldVal)) {
                        self.removeOption(oldVal);
                        removal = true;
                    }
                    oldVal = newVal;
                    self.addOption(newVal, optionElement);
                    if (removal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else if (interpolateTextFn) {
                optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
                    optionAttrs.$set("value", newVal);
                    var previouslySelected = optionElement.prop("selected");
                    if (oldVal !== newVal) {
                        self.removeOption(oldVal);
                    }
                    self.addOption(newVal, optionElement);
                    if (oldVal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else {
                self.addOption(optionAttrs.value, optionElement);
            }
            optionAttrs.$observe("disabled", function(newVal) {
                if (newVal === "true" || newVal && optionElement.prop("selected")) {
                    if (self.multiple) {
                        scheduleViewValueUpdate(true);
                    } else {
                        self.ngModelCtrl.$setViewValue(null);
                        self.ngModelCtrl.$render();
                    }
                }
            });
            optionElement.on("$destroy", function() {
                var currentValue = self.readValue();
                var removeValue = optionAttrs.value;
                self.removeOption(removeValue);
                scheduleRender();
                if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 || currentValue === removeValue) {
                    scheduleViewValueUpdate(true);
                }
            });
        };
    } ];
    var selectDirective = function() {
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: SelectController,
            priority: 1,
            link: {
                pre: selectPreLink,
                post: selectPostLink
            }
        };
        function selectPreLink(scope, element, attr, ctrls) {
            var selectCtrl = ctrls[0];
            var ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                selectCtrl.registerOption = noop;
                return;
            }
            selectCtrl.ngModelCtrl = ngModelCtrl;
            element.on("change", function() {
                selectCtrl.removeUnknownOption();
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(selectCtrl.readValue());
                });
            });
            if (attr.multiple) {
                selectCtrl.multiple = true;
                selectCtrl.readValue = function readMultipleValue() {
                    var array = [];
                    forEach(element.find("option"), function(option) {
                        if (option.selected && !option.disabled) {
                            var val = option.value;
                            array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
                        }
                    });
                    return array;
                };
                selectCtrl.writeValue = function writeMultipleValue(value) {
                    forEach(element.find("option"), function(option) {
                        var shouldBeSelected = !!value && (includes(value, option.value) || includes(value, selectCtrl.selectValueMap[option.value]));
                        var currentlySelected = option.selected;
                        if (shouldBeSelected !== currentlySelected) {
                            setOptionSelectedStatus(jqLite(option), shouldBeSelected);
                        }
                    });
                };
                var lastView, lastViewRef = NaN;
                scope.$watch(function selectMultipleWatch() {
                    if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                        lastView = shallowCopy(ngModelCtrl.$viewValue);
                        ngModelCtrl.$render();
                    }
                    lastViewRef = ngModelCtrl.$viewValue;
                });
                ngModelCtrl.$isEmpty = function(value) {
                    return !value || value.length === 0;
                };
            }
        }
        function selectPostLink(scope, element, attrs, ctrls) {
            var ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) return;
            var selectCtrl = ctrls[0];
            ngModelCtrl.$render = function() {
                selectCtrl.writeValue(ngModelCtrl.$viewValue);
            };
        }
    };
    var optionDirective = [ "$interpolate", function($interpolate) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(element, attr) {
                var interpolateValueFn, interpolateTextFn;
                if (isDefined(attr.ngValue)) {} else if (isDefined(attr.value)) {
                    interpolateValueFn = $interpolate(attr.value, true);
                } else {
                    interpolateTextFn = $interpolate(element.text(), true);
                    if (!interpolateTextFn) {
                        attr.$set("value", element.text());
                    }
                }
                return function(scope, element, attr) {
                    var selectCtrlName = "$selectController", parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
                    if (selectCtrl) {
                        selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
                    }
                };
            }
        };
    } ];
    var requiredDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                attr.required = true;
                ctrl.$validators.required = function(modelValue, viewValue) {
                    return !attr.required || !ctrl.$isEmpty(viewValue);
                };
                attr.$observe("required", function() {
                    ctrl.$validate();
                });
            }
        };
    };
    var patternDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var regexp, patternExp = attr.ngPattern || attr.pattern;
                attr.$observe("pattern", function(regex) {
                    if (isString(regex) && regex.length > 0) {
                        regex = new RegExp("^" + regex + "$");
                    }
                    if (regex && !regex.test) {
                        throw minErr("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", patternExp, regex, startingTag(elm));
                    }
                    regexp = regex || undefined;
                    ctrl.$validate();
                });
                ctrl.$validators.pattern = function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
                };
            }
        };
    };
    var maxlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var maxlength = -1;
                attr.$observe("maxlength", function(value) {
                    var intVal = toInt(value);
                    maxlength = isNumberNaN(intVal) ? -1 : intVal;
                    ctrl.$validate();
                });
                ctrl.$validators.maxlength = function(modelValue, viewValue) {
                    return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
                };
            }
        };
    };
    var minlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var minlength = 0;
                attr.$observe("minlength", function(value) {
                    minlength = toInt(value) || 0;
                    ctrl.$validate();
                });
                ctrl.$validators.minlength = function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
                };
            }
        };
    };
    if (window.angular.bootstrap) {
        if (window.console) {
            console.log("WARNING: Tried to load angular more than once.");
        }
        return;
    }
    bindJQuery();
    publishExternalAPI(angular);
    angular.module("ngLocale", [], [ "$provide", function($provide) {
        var PLURAL_CATEGORY = {
            ZERO: "zero",
            ONE: "one",
            TWO: "two",
            FEW: "few",
            MANY: "many",
            OTHER: "other"
        };
        function getDecimals(n) {
            n = n + "";
            var i = n.indexOf(".");
            return i == -1 ? 0 : n.length - i - 1;
        }
        function getVF(n, opt_precision) {
            var v = opt_precision;
            if (undefined === v) {
                v = Math.min(getDecimals(n), 3);
            }
            var base = Math.pow(10, v);
            var f = (n * base | 0) % base;
            return {
                v: v,
                f: f
            };
        }
        $provide.value("$locale", {
            DATETIME_FORMATS: {
                AMPMS: [ "AM", "PM" ],
                DAY: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                ERANAMES: [ "Before Christ", "Anno Domini" ],
                ERAS: [ "BC", "AD" ],
                FIRSTDAYOFWEEK: 6,
                MONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                SHORTDAY: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                SHORTMONTH: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                STANDALONEMONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                WEEKENDRANGE: [ 5, 6 ],
                fullDate: "EEEE, MMMM d, y",
                longDate: "MMMM d, y",
                medium: "MMM d, y h:mm:ss a",
                mediumDate: "MMM d, y",
                mediumTime: "h:mm:ss a",
                short: "M/d/yy h:mm a",
                shortDate: "M/d/yy",
                shortTime: "h:mm a"
            },
            NUMBER_FORMATS: {
                CURRENCY_SYM: "$",
                DECIMAL_SEP: ".",
                GROUP_SEP: ",",
                PATTERNS: [ {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 3,
                    minFrac: 0,
                    minInt: 1,
                    negPre: "-",
                    negSuf: "",
                    posPre: "",
                    posSuf: ""
                }, {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 2,
                    minFrac: 2,
                    minInt: 1,
                    negPre: "-¤",
                    negSuf: "",
                    posPre: "¤",
                    posSuf: ""
                } ]
            },
            id: "en-us",
            localeID: "en_US",
            pluralCat: function(n, opt_precision) {
                var i = n | 0;
                var vf = getVF(n, opt_precision);
                if (i == 1 && vf.v == 0) {
                    return PLURAL_CATEGORY.ONE;
                }
                return PLURAL_CATEGORY.OTHER;
            }
        });
    } ]);
    jqLite(function() {
        angularInit(window.document, bootstrap);
    });
})(window);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

(function(window, angular) {
    "use strict";
    var ELEMENT_NODE = 1;
    var COMMENT_NODE = 8;
    var ADD_CLASS_SUFFIX = "-add";
    var REMOVE_CLASS_SUFFIX = "-remove";
    var EVENT_CLASS_PREFIX = "ng-";
    var ACTIVE_CLASS_SUFFIX = "-active";
    var PREPARE_CLASS_SUFFIX = "-prepare";
    var NG_ANIMATE_CLASSNAME = "ng-animate";
    var NG_ANIMATE_CHILDREN_DATA = "$$ngAnimateChildren";
    var CSS_PREFIX = "", TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
        CSS_PREFIX = "-webkit-";
        TRANSITION_PROP = "WebkitTransition";
        TRANSITIONEND_EVENT = "webkitTransitionEnd transitionend";
    } else {
        TRANSITION_PROP = "transition";
        TRANSITIONEND_EVENT = "transitionend";
    }
    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
        CSS_PREFIX = "-webkit-";
        ANIMATION_PROP = "WebkitAnimation";
        ANIMATIONEND_EVENT = "webkitAnimationEnd animationend";
    } else {
        ANIMATION_PROP = "animation";
        ANIMATIONEND_EVENT = "animationend";
    }
    var DURATION_KEY = "Duration";
    var PROPERTY_KEY = "Property";
    var DELAY_KEY = "Delay";
    var TIMING_KEY = "TimingFunction";
    var ANIMATION_ITERATION_COUNT_KEY = "IterationCount";
    var ANIMATION_PLAYSTATE_KEY = "PlayState";
    var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;
    var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
    var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
    var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
    var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;
    var ngMinErr = angular.$$minErr("ng");
    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        }
        return arg;
    }
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(" ");
        if (isArray(b)) b = b.join(" ");
        return a + " " + b;
    }
    function packageStyles(options) {
        var styles = {};
        if (options && (options.to || options.from)) {
            styles.to = options.to;
            styles.from = options.from;
        }
        return styles;
    }
    function pendClasses(classes, fix, isPrefix) {
        var className = "";
        classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
        forEach(classes, function(klass, i) {
            if (klass && klass.length > 0) {
                className += i > 0 ? " " : "";
                className += isPrefix ? fix + klass : klass + fix;
            }
        });
        return className;
    }
    function removeFromArray(arr, val) {
        var index = arr.indexOf(val);
        if (val >= 0) {
            arr.splice(index, 1);
        }
    }
    function stripCommentsFromElement(element) {
        if (element instanceof jqLite) {
            switch (element.length) {
              case 0:
                return element;

              case 1:
                if (element[0].nodeType === ELEMENT_NODE) {
                    return element;
                }
                break;

              default:
                return jqLite(extractElementNode(element));
            }
        }
        if (element.nodeType === ELEMENT_NODE) {
            return jqLite(element);
        }
    }
    function extractElementNode(element) {
        if (!element[0]) return element;
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) {
                return elm;
            }
        }
    }
    function $$addClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.addClass(elm, className);
        });
    }
    function $$removeClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.removeClass(elm, className);
        });
    }
    function applyAnimationClassesFactory($$jqLite) {
        return function(element, options) {
            if (options.addClass) {
                $$addClass($$jqLite, element, options.addClass);
                options.addClass = null;
            }
            if (options.removeClass) {
                $$removeClass($$jqLite, element, options.removeClass);
                options.removeClass = null;
            }
        };
    }
    function prepareAnimationOptions(options) {
        options = options || {};
        if (!options.$$prepared) {
            var domOperation = options.domOperation || noop;
            options.domOperation = function() {
                options.$$domOperationFired = true;
                domOperation();
                domOperation = noop;
            };
            options.$$prepared = true;
        }
        return options;
    }
    function applyAnimationStyles(element, options) {
        applyAnimationFromStyles(element, options);
        applyAnimationToStyles(element, options);
    }
    function applyAnimationFromStyles(element, options) {
        if (options.from) {
            element.css(options.from);
            options.from = null;
        }
    }
    function applyAnimationToStyles(element, options) {
        if (options.to) {
            element.css(options.to);
            options.to = null;
        }
    }
    function mergeAnimationDetails(element, oldAnimation, newAnimation) {
        var target = oldAnimation.options || {};
        var newOptions = newAnimation.options || {};
        var toAdd = (target.addClass || "") + " " + (newOptions.addClass || "");
        var toRemove = (target.removeClass || "") + " " + (newOptions.removeClass || "");
        var classes = resolveElementClasses(element.attr("class"), toAdd, toRemove);
        if (newOptions.preparationClasses) {
            target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
            delete newOptions.preparationClasses;
        }
        var realDomOperation = target.domOperation !== noop ? target.domOperation : null;
        extend(target, newOptions);
        if (realDomOperation) {
            target.domOperation = realDomOperation;
        }
        if (classes.addClass) {
            target.addClass = classes.addClass;
        } else {
            target.addClass = null;
        }
        if (classes.removeClass) {
            target.removeClass = classes.removeClass;
        } else {
            target.removeClass = null;
        }
        oldAnimation.addClass = target.addClass;
        oldAnimation.removeClass = target.removeClass;
        return target;
    }
    function resolveElementClasses(existing, toAdd, toRemove) {
        var ADD_CLASS = 1;
        var REMOVE_CLASS = -1;
        var flags = {};
        existing = splitClassesToLookup(existing);
        toAdd = splitClassesToLookup(toAdd);
        forEach(toAdd, function(value, key) {
            flags[key] = ADD_CLASS;
        });
        toRemove = splitClassesToLookup(toRemove);
        forEach(toRemove, function(value, key) {
            flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
        });
        var classes = {
            addClass: "",
            removeClass: ""
        };
        forEach(flags, function(val, klass) {
            var prop, allow;
            if (val === ADD_CLASS) {
                prop = "addClass";
                allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
            } else if (val === REMOVE_CLASS) {
                prop = "removeClass";
                allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
            }
            if (allow) {
                if (classes[prop].length) {
                    classes[prop] += " ";
                }
                classes[prop] += klass;
            }
        });
        function splitClassesToLookup(classes) {
            if (isString(classes)) {
                classes = classes.split(" ");
            }
            var obj = {};
            forEach(classes, function(klass) {
                if (klass.length) {
                    obj[klass] = true;
                }
            });
            return obj;
        }
        return classes;
    }
    function getDomNode(element) {
        return element instanceof jqLite ? element[0] : element;
    }
    function applyGeneratedPreparationClasses(element, event, options) {
        var classes = "";
        if (event) {
            classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
        }
        if (options.addClass) {
            classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
        }
        if (options.removeClass) {
            classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
        }
        if (classes.length) {
            options.preparationClasses = classes;
            element.addClass(classes);
        }
    }
    function clearGeneratedClasses(element, options) {
        if (options.preparationClasses) {
            element.removeClass(options.preparationClasses);
            options.preparationClasses = null;
        }
        if (options.activeClasses) {
            element.removeClass(options.activeClasses);
            options.activeClasses = null;
        }
    }
    function blockTransitions(node, duration) {
        var value = duration ? "-" + duration + "s" : "";
        applyInlineStyle(node, [ TRANSITION_DELAY_PROP, value ]);
        return [ TRANSITION_DELAY_PROP, value ];
    }
    function blockKeyframeAnimations(node, applyBlock) {
        var value = applyBlock ? "paused" : "";
        var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
        applyInlineStyle(node, [ key, value ]);
        return [ key, value ];
    }
    function applyInlineStyle(node, styleTuple) {
        var prop = styleTuple[0];
        var value = styleTuple[1];
        node.style[prop] = value;
    }
    function concatWithSpace(a, b) {
        if (!a) return b;
        if (!b) return a;
        return a + " " + b;
    }
    var $$rAFSchedulerFactory = [ "$$rAF", function($$rAF) {
        var queue, cancelFn;
        function scheduler(tasks) {
            queue = queue.concat(tasks);
            nextTick();
        }
        queue = scheduler.queue = [];
        scheduler.waitUntilQuiet = function(fn) {
            if (cancelFn) cancelFn();
            cancelFn = $$rAF(function() {
                cancelFn = null;
                fn();
                nextTick();
            });
        };
        return scheduler;
        function nextTick() {
            if (!queue.length) return;
            var items = queue.shift();
            for (var i = 0; i < items.length; i++) {
                items[i]();
            }
            if (!cancelFn) {
                $$rAF(function() {
                    if (!cancelFn) nextTick();
                });
            }
        }
    } ];
    var $$AnimateChildrenDirective = [ "$interpolate", function($interpolate) {
        return {
            link: function(scope, element, attrs) {
                var val = attrs.ngAnimateChildren;
                if (isString(val) && val.length === 0) {
                    element.data(NG_ANIMATE_CHILDREN_DATA, true);
                } else {
                    setData($interpolate(val)(scope));
                    attrs.$observe("ngAnimateChildren", setData);
                }
                function setData(value) {
                    value = value === "on" || value === "true";
                    element.data(NG_ANIMATE_CHILDREN_DATA, value);
                }
            }
        };
    } ];
    var ANIMATE_TIMER_KEY = "$$animateCss";
    var ONE_SECOND = 1e3;
    var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
    var CLOSING_TIME_BUFFER = 1.5;
    var DETECT_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        transitionProperty: TRANSITION_PROP + PROPERTY_KEY,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP,
        animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
    };
    var DETECT_STAGGER_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP
    };
    function getCssKeyframeDurationStyle(duration) {
        return [ ANIMATION_DURATION_PROP, duration + "s" ];
    }
    function getCssDelayStyle(delay, isKeyframeAnimation) {
        var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
        return [ prop, delay + "s" ];
    }
    function computeCssStyles($window, element, properties) {
        var styles = Object.create(null);
        var detectedStyles = $window.getComputedStyle(element) || {};
        forEach(properties, function(formalStyleName, actualStyleName) {
            var val = detectedStyles[formalStyleName];
            if (val) {
                var c = val.charAt(0);
                if (c === "-" || c === "+" || c >= 0) {
                    val = parseMaxTime(val);
                }
                if (val === 0) {
                    val = null;
                }
                styles[actualStyleName] = val;
            }
        });
        return styles;
    }
    function parseMaxTime(str) {
        var maxValue = 0;
        var values = str.split(/\s*,\s*/);
        forEach(values, function(value) {
            if (value.charAt(value.length - 1) === "s") {
                value = value.substring(0, value.length - 1);
            }
            value = parseFloat(value) || 0;
            maxValue = maxValue ? Math.max(value, maxValue) : value;
        });
        return maxValue;
    }
    function truthyTimingValue(val) {
        return val === 0 || val != null;
    }
    function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
        var style = TRANSITION_PROP;
        var value = duration + "s";
        if (applyOnlyDuration) {
            style += DURATION_KEY;
        } else {
            value += " linear all";
        }
        return [ style, value ];
    }
    function createLocalCacheLookup() {
        var cache = Object.create(null);
        return {
            flush: function() {
                cache = Object.create(null);
            },
            count: function(key) {
                var entry = cache[key];
                return entry ? entry.total : 0;
            },
            get: function(key) {
                var entry = cache[key];
                return entry && entry.value;
            },
            put: function(key, value) {
                if (!cache[key]) {
                    cache[key] = {
                        total: 1,
                        value: value
                    };
                } else {
                    cache[key].total++;
                }
            }
        };
    }
    function registerRestorableStyles(backup, node, properties) {
        forEach(properties, function(prop) {
            backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
        });
    }
    var $AnimateCssProvider = [ "$animateProvider", function($animateProvider) {
        var gcsLookup = createLocalCacheLookup();
        var gcsStaggerLookup = createLocalCacheLookup();
        this.$get = [ "$window", "$$jqLite", "$$AnimateRunner", "$timeout", "$$forceReflow", "$sniffer", "$$rAFScheduler", "$$animateQueue", function($window, $$jqLite, $$AnimateRunner, $timeout, $$forceReflow, $sniffer, $$rAFScheduler, $$animateQueue) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            var parentCounter = 0;
            function gcsHashFn(node, extraClasses) {
                var KEY = "$$ngAnimateParentKey";
                var parentNode = node.parentNode;
                var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
                return parentID + "-" + node.getAttribute("class") + "-" + extraClasses;
            }
            function computeCachedCssStyles(node, className, cacheKey, properties) {
                var timings = gcsLookup.get(cacheKey);
                if (!timings) {
                    timings = computeCssStyles($window, node, properties);
                    if (timings.animationIterationCount === "infinite") {
                        timings.animationIterationCount = 1;
                    }
                }
                gcsLookup.put(cacheKey, timings);
                return timings;
            }
            function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
                var stagger;
                if (gcsLookup.count(cacheKey) > 0) {
                    stagger = gcsStaggerLookup.get(cacheKey);
                    if (!stagger) {
                        var staggerClassName = pendClasses(className, "-stagger");
                        $$jqLite.addClass(node, staggerClassName);
                        stagger = computeCssStyles($window, node, properties);
                        stagger.animationDuration = Math.max(stagger.animationDuration, 0);
                        stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);
                        $$jqLite.removeClass(node, staggerClassName);
                        gcsStaggerLookup.put(cacheKey, stagger);
                    }
                }
                return stagger || {};
            }
            var rafWaitQueue = [];
            function waitUntilQuiet(callback) {
                rafWaitQueue.push(callback);
                $$rAFScheduler.waitUntilQuiet(function() {
                    gcsLookup.flush();
                    gcsStaggerLookup.flush();
                    var pageWidth = $$forceReflow();
                    for (var i = 0; i < rafWaitQueue.length; i++) {
                        rafWaitQueue[i](pageWidth);
                    }
                    rafWaitQueue.length = 0;
                });
            }
            function computeTimings(node, className, cacheKey) {
                var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
                var aD = timings.animationDelay;
                var tD = timings.transitionDelay;
                timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;
                timings.maxDuration = Math.max(timings.animationDuration * timings.animationIterationCount, timings.transitionDuration);
                return timings;
            }
            return function init(element, initialOptions) {
                var options = initialOptions || {};
                if (!options.$$prepared) {
                    options = prepareAnimationOptions(copy(options));
                }
                var restoreStyles = {};
                var node = getDomNode(element);
                if (!node || !node.parentNode || !$$animateQueue.enabled()) {
                    return closeAndReturnNoopAnimator();
                }
                var temporaryStyles = [];
                var classes = element.attr("class");
                var styles = packageStyles(options);
                var animationClosed;
                var animationPaused;
                var animationCompleted;
                var runner;
                var runnerHost;
                var maxDelay;
                var maxDelayTime;
                var maxDuration;
                var maxDurationTime;
                var startTime;
                var events = [];
                if (options.duration === 0 || !$sniffer.animations && !$sniffer.transitions) {
                    return closeAndReturnNoopAnimator();
                }
                var method = options.event && isArray(options.event) ? options.event.join(" ") : options.event;
                var isStructural = method && options.structural;
                var structuralClassName = "";
                var addRemoveClassName = "";
                if (isStructural) {
                    structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
                } else if (method) {
                    structuralClassName = method;
                }
                if (options.addClass) {
                    addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
                }
                if (options.removeClass) {
                    if (addRemoveClassName.length) {
                        addRemoveClassName += " ";
                    }
                    addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
                }
                if (options.applyClassesEarly && addRemoveClassName.length) {
                    applyAnimationClasses(element, options);
                }
                var preparationClasses = [ structuralClassName, addRemoveClassName ].join(" ").trim();
                var fullClassName = classes + " " + preparationClasses;
                var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
                var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
                var containsKeyframeAnimation = (options.keyframeStyle || "").length > 0;
                if (!containsKeyframeAnimation && !hasToStyles && !preparationClasses) {
                    return closeAndReturnNoopAnimator();
                }
                var cacheKey, stagger;
                if (options.stagger > 0) {
                    var staggerVal = parseFloat(options.stagger);
                    stagger = {
                        transitionDelay: staggerVal,
                        animationDelay: staggerVal,
                        transitionDuration: 0,
                        animationDuration: 0
                    };
                } else {
                    cacheKey = gcsHashFn(node, fullClassName);
                    stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
                }
                if (!options.$$skipPreparationClasses) {
                    $$jqLite.addClass(element, preparationClasses);
                }
                var applyOnlyDuration;
                if (options.transitionStyle) {
                    var transitionStyle = [ TRANSITION_PROP, options.transitionStyle ];
                    applyInlineStyle(node, transitionStyle);
                    temporaryStyles.push(transitionStyle);
                }
                if (options.duration >= 0) {
                    applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
                    var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);
                    applyInlineStyle(node, durationStyle);
                    temporaryStyles.push(durationStyle);
                }
                if (options.keyframeStyle) {
                    var keyframeStyle = [ ANIMATION_PROP, options.keyframeStyle ];
                    applyInlineStyle(node, keyframeStyle);
                    temporaryStyles.push(keyframeStyle);
                }
                var itemIndex = stagger ? options.staggerIndex >= 0 ? options.staggerIndex : gcsLookup.count(cacheKey) : 0;
                var isFirst = itemIndex === 0;
                if (isFirst && !options.skipBlocking) {
                    blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
                }
                var timings = computeTimings(node, fullClassName, cacheKey);
                var relativeDelay = timings.maxDelay;
                maxDelay = Math.max(relativeDelay, 0);
                maxDuration = timings.maxDuration;
                var flags = {};
                flags.hasTransitions = timings.transitionDuration > 0;
                flags.hasAnimations = timings.animationDuration > 0;
                flags.hasTransitionAll = flags.hasTransitions && timings.transitionProperty === "all";
                flags.applyTransitionDuration = hasToStyles && (flags.hasTransitions && !flags.hasTransitionAll || flags.hasAnimations && !flags.hasTransitions);
                flags.applyAnimationDuration = options.duration && flags.hasAnimations;
                flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
                flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
                flags.recalculateTimingStyles = addRemoveClassName.length > 0;
                if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
                    maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;
                    if (flags.applyTransitionDuration) {
                        flags.hasTransitions = true;
                        timings.transitionDuration = maxDuration;
                        applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
                        temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
                    }
                    if (flags.applyAnimationDuration) {
                        flags.hasAnimations = true;
                        timings.animationDuration = maxDuration;
                        temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
                    }
                }
                if (maxDuration === 0 && !flags.recalculateTimingStyles) {
                    return closeAndReturnNoopAnimator();
                }
                if (options.delay != null) {
                    var delayStyle;
                    if (typeof options.delay !== "boolean") {
                        delayStyle = parseFloat(options.delay);
                        maxDelay = Math.max(delayStyle, 0);
                    }
                    if (flags.applyTransitionDelay) {
                        temporaryStyles.push(getCssDelayStyle(delayStyle));
                    }
                    if (flags.applyAnimationDelay) {
                        temporaryStyles.push(getCssDelayStyle(delayStyle, true));
                    }
                }
                if (options.duration == null && timings.transitionDuration > 0) {
                    flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
                }
                maxDelayTime = maxDelay * ONE_SECOND;
                maxDurationTime = maxDuration * ONE_SECOND;
                if (!options.skipBlocking) {
                    flags.blockTransition = timings.transitionDuration > 0;
                    flags.blockKeyframeAnimation = timings.animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0;
                }
                if (options.from) {
                    if (options.cleanupStyles) {
                        registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
                    }
                    applyAnimationFromStyles(element, options);
                }
                if (flags.blockTransition || flags.blockKeyframeAnimation) {
                    applyBlocking(maxDuration);
                } else if (!options.skipBlocking) {
                    blockTransitions(node, false);
                }
                return {
                    $$willAnimate: true,
                    end: endFn,
                    start: function() {
                        if (animationClosed) return;
                        runnerHost = {
                            end: endFn,
                            cancel: cancelFn,
                            resume: null,
                            pause: null
                        };
                        runner = new $$AnimateRunner(runnerHost);
                        waitUntilQuiet(start);
                        return runner;
                    }
                };
                function endFn() {
                    close();
                }
                function cancelFn() {
                    close(true);
                }
                function close(rejected) {
                    if (animationClosed || animationCompleted && animationPaused) return;
                    animationClosed = true;
                    animationPaused = false;
                    if (!options.$$skipPreparationClasses) {
                        $$jqLite.removeClass(element, preparationClasses);
                    }
                    $$jqLite.removeClass(element, activeClasses);
                    blockKeyframeAnimations(node, false);
                    blockTransitions(node, false);
                    forEach(temporaryStyles, function(entry) {
                        node.style[entry[0]] = "";
                    });
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    if (Object.keys(restoreStyles).length) {
                        forEach(restoreStyles, function(value, prop) {
                            if (value) {
                                node.style.setProperty(prop, value);
                            } else {
                                node.style.removeProperty(prop);
                            }
                        });
                    }
                    if (options.onDone) {
                        options.onDone();
                    }
                    if (events && events.length) {
                        element.off(events.join(" "), onAnimationProgress);
                    }
                    var animationTimerData = element.data(ANIMATE_TIMER_KEY);
                    if (animationTimerData) {
                        $timeout.cancel(animationTimerData[0].timer);
                        element.removeData(ANIMATE_TIMER_KEY);
                    }
                    if (runner) {
                        runner.complete(!rejected);
                    }
                }
                function applyBlocking(duration) {
                    if (flags.blockTransition) {
                        blockTransitions(node, duration);
                    }
                    if (flags.blockKeyframeAnimation) {
                        blockKeyframeAnimations(node, !!duration);
                    }
                }
                function closeAndReturnNoopAnimator() {
                    runner = new $$AnimateRunner({
                        end: endFn,
                        cancel: cancelFn
                    });
                    waitUntilQuiet(noop);
                    close();
                    return {
                        $$willAnimate: false,
                        start: function() {
                            return runner;
                        },
                        end: endFn
                    };
                }
                function onAnimationProgress(event) {
                    event.stopPropagation();
                    var ev = event.originalEvent || event;
                    var timeStamp = ev.$manualTimeStamp || Date.now();
                    var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
                    if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                        animationCompleted = true;
                        close();
                    }
                }
                function start() {
                    if (animationClosed) return;
                    if (!node.parentNode) {
                        close();
                        return;
                    }
                    var playPause = function(playAnimation) {
                        if (!animationCompleted) {
                            animationPaused = !playAnimation;
                            if (timings.animationDuration) {
                                var value = blockKeyframeAnimations(node, animationPaused);
                                if (animationPaused) {
                                    temporaryStyles.push(value);
                                } else {
                                    removeFromArray(temporaryStyles, value);
                                }
                            }
                        } else if (animationPaused && playAnimation) {
                            animationPaused = false;
                            close();
                        }
                    };
                    var maxStagger = itemIndex > 0 && (timings.transitionDuration && stagger.transitionDuration === 0 || timings.animationDuration && stagger.animationDuration === 0) && Math.max(stagger.animationDelay, stagger.transitionDelay);
                    if (maxStagger) {
                        $timeout(triggerAnimationStart, Math.floor(maxStagger * itemIndex * ONE_SECOND), false);
                    } else {
                        triggerAnimationStart();
                    }
                    runnerHost.resume = function() {
                        playPause(true);
                    };
                    runnerHost.pause = function() {
                        playPause(false);
                    };
                    function triggerAnimationStart() {
                        if (animationClosed) return;
                        applyBlocking(false);
                        forEach(temporaryStyles, function(entry) {
                            var key = entry[0];
                            var value = entry[1];
                            node.style[key] = value;
                        });
                        applyAnimationClasses(element, options);
                        $$jqLite.addClass(element, activeClasses);
                        if (flags.recalculateTimingStyles) {
                            fullClassName = node.getAttribute("class") + " " + preparationClasses;
                            cacheKey = gcsHashFn(node, fullClassName);
                            timings = computeTimings(node, fullClassName, cacheKey);
                            relativeDelay = timings.maxDelay;
                            maxDelay = Math.max(relativeDelay, 0);
                            maxDuration = timings.maxDuration;
                            if (maxDuration === 0) {
                                close();
                                return;
                            }
                            flags.hasTransitions = timings.transitionDuration > 0;
                            flags.hasAnimations = timings.animationDuration > 0;
                        }
                        if (flags.applyAnimationDelay) {
                            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;
                            maxDelay = Math.max(relativeDelay, 0);
                            timings.animationDelay = relativeDelay;
                            delayStyle = getCssDelayStyle(relativeDelay, true);
                            temporaryStyles.push(delayStyle);
                            node.style[delayStyle[0]] = delayStyle[1];
                        }
                        maxDelayTime = maxDelay * ONE_SECOND;
                        maxDurationTime = maxDuration * ONE_SECOND;
                        if (options.easing) {
                            var easeProp, easeVal = options.easing;
                            if (flags.hasTransitions) {
                                easeProp = TRANSITION_PROP + TIMING_KEY;
                                temporaryStyles.push([ easeProp, easeVal ]);
                                node.style[easeProp] = easeVal;
                            }
                            if (flags.hasAnimations) {
                                easeProp = ANIMATION_PROP + TIMING_KEY;
                                temporaryStyles.push([ easeProp, easeVal ]);
                                node.style[easeProp] = easeVal;
                            }
                        }
                        if (timings.transitionDuration) {
                            events.push(TRANSITIONEND_EVENT);
                        }
                        if (timings.animationDuration) {
                            events.push(ANIMATIONEND_EVENT);
                        }
                        startTime = Date.now();
                        var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
                        var endTime = startTime + timerTime;
                        var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
                        var setupFallbackTimer = true;
                        if (animationsData.length) {
                            var currentTimerData = animationsData[0];
                            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
                            if (setupFallbackTimer) {
                                $timeout.cancel(currentTimerData.timer);
                            } else {
                                animationsData.push(close);
                            }
                        }
                        if (setupFallbackTimer) {
                            var timer = $timeout(onAnimationExpired, timerTime, false);
                            animationsData[0] = {
                                timer: timer,
                                expectedEndTime: endTime
                            };
                            animationsData.push(close);
                            element.data(ANIMATE_TIMER_KEY, animationsData);
                        }
                        if (events.length) {
                            element.on(events.join(" "), onAnimationProgress);
                        }
                        if (options.to) {
                            if (options.cleanupStyles) {
                                registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
                            }
                            applyAnimationToStyles(element, options);
                        }
                    }
                    function onAnimationExpired() {
                        var animationsData = element.data(ANIMATE_TIMER_KEY);
                        if (animationsData) {
                            for (var i = 1; i < animationsData.length; i++) {
                                animationsData[i]();
                            }
                            element.removeData(ANIMATE_TIMER_KEY);
                        }
                    }
                }
            };
        } ];
    } ];
    var $$AnimateCssDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateCssDriver");
        var NG_ANIMATE_SHIM_CLASS_NAME = "ng-animate-shim";
        var NG_ANIMATE_ANCHOR_CLASS_NAME = "ng-anchor";
        var NG_OUT_ANCHOR_CLASS_NAME = "ng-anchor-out";
        var NG_IN_ANCHOR_CLASS_NAME = "ng-anchor-in";
        function isDocumentFragment(node) {
            return node.parentNode && node.parentNode.nodeType === 11;
        }
        this.$get = [ "$animateCss", "$rootScope", "$$AnimateRunner", "$rootElement", "$sniffer", "$$jqLite", "$document", function($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {
            if (!$sniffer.animations && !$sniffer.transitions) return noop;
            var bodyNode = $document[0].body;
            var rootNode = getDomNode($rootElement);
            var rootBodyElement = jqLite(isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode);
            return function initDriverFn(animationDetails) {
                return animationDetails.from && animationDetails.to ? prepareFromToAnchorAnimation(animationDetails.from, animationDetails.to, animationDetails.classes, animationDetails.anchors) : prepareRegularAnimation(animationDetails);
            };
            function filterCssClasses(classes) {
                return classes.replace(/\bng-\S+\b/g, "");
            }
            function getUniqueValues(a, b) {
                if (isString(a)) a = a.split(" ");
                if (isString(b)) b = b.split(" ");
                return a.filter(function(val) {
                    return b.indexOf(val) === -1;
                }).join(" ");
            }
            function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
                var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
                var startingClasses = filterCssClasses(getClassVal(clone));
                outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);
                rootBodyElement.append(clone);
                var animatorIn, animatorOut = prepareOutAnimation();
                if (!animatorOut) {
                    animatorIn = prepareInAnimation();
                    if (!animatorIn) {
                        return end();
                    }
                }
                var startingAnimator = animatorOut || animatorIn;
                return {
                    start: function() {
                        var runner;
                        var currentAnimation = startingAnimator.start();
                        currentAnimation.done(function() {
                            currentAnimation = null;
                            if (!animatorIn) {
                                animatorIn = prepareInAnimation();
                                if (animatorIn) {
                                    currentAnimation = animatorIn.start();
                                    currentAnimation.done(function() {
                                        currentAnimation = null;
                                        end();
                                        runner.complete();
                                    });
                                    return currentAnimation;
                                }
                            }
                            end();
                            runner.complete();
                        });
                        runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        return runner;
                        function endFn() {
                            if (currentAnimation) {
                                currentAnimation.end();
                            }
                        }
                    }
                };
                function calculateAnchorStyles(anchor) {
                    var styles = {};
                    var coords = getDomNode(anchor).getBoundingClientRect();
                    forEach([ "width", "height", "top", "left" ], function(key) {
                        var value = coords[key];
                        switch (key) {
                          case "top":
                            value += bodyNode.scrollTop;
                            break;

                          case "left":
                            value += bodyNode.scrollLeft;
                            break;
                        }
                        styles[key] = Math.floor(value) + "px";
                    });
                    return styles;
                }
                function prepareOutAnimation() {
                    var animator = $animateCss(clone, {
                        addClass: NG_OUT_ANCHOR_CLASS_NAME,
                        delay: true,
                        from: calculateAnchorStyles(outAnchor)
                    });
                    return animator.$$willAnimate ? animator : null;
                }
                function getClassVal(element) {
                    return element.attr("class") || "";
                }
                function prepareInAnimation() {
                    var endingClasses = filterCssClasses(getClassVal(inAnchor));
                    var toAdd = getUniqueValues(endingClasses, startingClasses);
                    var toRemove = getUniqueValues(startingClasses, endingClasses);
                    var animator = $animateCss(clone, {
                        to: calculateAnchorStyles(inAnchor),
                        addClass: NG_IN_ANCHOR_CLASS_NAME + " " + toAdd,
                        removeClass: NG_OUT_ANCHOR_CLASS_NAME + " " + toRemove,
                        delay: true
                    });
                    return animator.$$willAnimate ? animator : null;
                }
                function end() {
                    clone.remove();
                    outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                    inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                }
            }
            function prepareFromToAnchorAnimation(from, to, classes, anchors) {
                var fromAnimation = prepareRegularAnimation(from, noop);
                var toAnimation = prepareRegularAnimation(to, noop);
                var anchorAnimations = [];
                forEach(anchors, function(anchor) {
                    var outElement = anchor["out"];
                    var inElement = anchor["in"];
                    var animator = prepareAnchoredAnimation(classes, outElement, inElement);
                    if (animator) {
                        anchorAnimations.push(animator);
                    }
                });
                if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;
                return {
                    start: function() {
                        var animationRunners = [];
                        if (fromAnimation) {
                            animationRunners.push(fromAnimation.start());
                        }
                        if (toAnimation) {
                            animationRunners.push(toAnimation.start());
                        }
                        forEach(anchorAnimations, function(animation) {
                            animationRunners.push(animation.start());
                        });
                        var runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        $$AnimateRunner.all(animationRunners, function(status) {
                            runner.complete(status);
                        });
                        return runner;
                        function endFn() {
                            forEach(animationRunners, function(runner) {
                                runner.end();
                            });
                        }
                    }
                };
            }
            function prepareRegularAnimation(animationDetails) {
                var element = animationDetails.element;
                var options = animationDetails.options || {};
                if (animationDetails.structural) {
                    options.event = animationDetails.event;
                    options.structural = true;
                    options.applyClassesEarly = true;
                    if (animationDetails.event === "leave") {
                        options.onDone = options.domOperation;
                    }
                }
                if (options.preparationClasses) {
                    options.event = concatWithSpace(options.event, options.preparationClasses);
                }
                var animator = $animateCss(element, options);
                return animator.$$willAnimate ? animator : null;
            }
        } ];
    } ];
    var $$AnimateJsProvider = [ "$animateProvider", function($animateProvider) {
        this.$get = [ "$injector", "$$AnimateRunner", "$$jqLite", function($injector, $$AnimateRunner, $$jqLite) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, classes, options) {
                var animationClosed = false;
                if (arguments.length === 3 && isObject(classes)) {
                    options = classes;
                    classes = null;
                }
                options = prepareAnimationOptions(options);
                if (!classes) {
                    classes = element.attr("class") || "";
                    if (options.addClass) {
                        classes += " " + options.addClass;
                    }
                    if (options.removeClass) {
                        classes += " " + options.removeClass;
                    }
                }
                var classesToAdd = options.addClass;
                var classesToRemove = options.removeClass;
                var animations = lookupAnimations(classes);
                var before, after;
                if (animations.length) {
                    var afterFn, beforeFn;
                    if (event === "leave") {
                        beforeFn = "leave";
                        afterFn = "afterLeave";
                    } else {
                        beforeFn = "before" + event.charAt(0).toUpperCase() + event.substr(1);
                        afterFn = event;
                    }
                    if (event !== "enter" && event !== "move") {
                        before = packageAnimations(element, event, options, animations, beforeFn);
                    }
                    after = packageAnimations(element, event, options, animations, afterFn);
                }
                if (!before && !after) return;
                function applyOptions() {
                    options.domOperation();
                    applyAnimationClasses(element, options);
                }
                function close() {
                    animationClosed = true;
                    applyOptions();
                    applyAnimationStyles(element, options);
                }
                var runner;
                return {
                    $$willAnimate: true,
                    end: function() {
                        if (runner) {
                            runner.end();
                        } else {
                            close();
                            runner = new $$AnimateRunner();
                            runner.complete(true);
                        }
                        return runner;
                    },
                    start: function() {
                        if (runner) {
                            return runner;
                        }
                        runner = new $$AnimateRunner();
                        var closeActiveAnimations;
                        var chain = [];
                        if (before) {
                            chain.push(function(fn) {
                                closeActiveAnimations = before(fn);
                            });
                        }
                        if (chain.length) {
                            chain.push(function(fn) {
                                applyOptions();
                                fn(true);
                            });
                        } else {
                            applyOptions();
                        }
                        if (after) {
                            chain.push(function(fn) {
                                closeActiveAnimations = after(fn);
                            });
                        }
                        runner.setHost({
                            end: function() {
                                endAnimations();
                            },
                            cancel: function() {
                                endAnimations(true);
                            }
                        });
                        $$AnimateRunner.chain(chain, onComplete);
                        return runner;
                        function onComplete(success) {
                            close(success);
                            runner.complete(success);
                        }
                        function endAnimations(cancelled) {
                            if (!animationClosed) {
                                (closeActiveAnimations || noop)(cancelled);
                                onComplete(cancelled);
                            }
                        }
                    }
                };
                function executeAnimationFn(fn, element, event, options, onDone) {
                    var args;
                    switch (event) {
                      case "animate":
                        args = [ element, options.from, options.to, onDone ];
                        break;

                      case "setClass":
                        args = [ element, classesToAdd, classesToRemove, onDone ];
                        break;

                      case "addClass":
                        args = [ element, classesToAdd, onDone ];
                        break;

                      case "removeClass":
                        args = [ element, classesToRemove, onDone ];
                        break;

                      default:
                        args = [ element, onDone ];
                        break;
                    }
                    args.push(options);
                    var value = fn.apply(fn, args);
                    if (value) {
                        if (isFunction(value.start)) {
                            value = value.start();
                        }
                        if (value instanceof $$AnimateRunner) {
                            value.done(onDone);
                        } else if (isFunction(value)) {
                            return value;
                        }
                    }
                    return noop;
                }
                function groupEventedAnimations(element, event, options, animations, fnName) {
                    var operations = [];
                    forEach(animations, function(ani) {
                        var animation = ani[fnName];
                        if (!animation) return;
                        operations.push(function() {
                            var runner;
                            var endProgressCb;
                            var resolved = false;
                            var onAnimationComplete = function(rejected) {
                                if (!resolved) {
                                    resolved = true;
                                    (endProgressCb || noop)(rejected);
                                    runner.complete(!rejected);
                                }
                            };
                            runner = new $$AnimateRunner({
                                end: function() {
                                    onAnimationComplete();
                                },
                                cancel: function() {
                                    onAnimationComplete(true);
                                }
                            });
                            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
                                var cancelled = result === false;
                                onAnimationComplete(cancelled);
                            });
                            return runner;
                        });
                    });
                    return operations;
                }
                function packageAnimations(element, event, options, animations, fnName) {
                    var operations = groupEventedAnimations(element, event, options, animations, fnName);
                    if (operations.length === 0) {
                        var a, b;
                        if (fnName === "beforeSetClass") {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "beforeRemoveClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "beforeAddClass");
                        } else if (fnName === "setClass") {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "removeClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "addClass");
                        }
                        if (a) {
                            operations = operations.concat(a);
                        }
                        if (b) {
                            operations = operations.concat(b);
                        }
                    }
                    if (operations.length === 0) return;
                    return function startAnimation(callback) {
                        var runners = [];
                        if (operations.length) {
                            forEach(operations, function(animateFn) {
                                runners.push(animateFn());
                            });
                        }
                        if (runners.length) {
                            $$AnimateRunner.all(runners, callback);
                        } else {
                            callback();
                        }
                        return function endFn(reject) {
                            forEach(runners, function(runner) {
                                if (reject) {
                                    runner.cancel();
                                } else {
                                    runner.end();
                                }
                            });
                        };
                    };
                }
            };
            function lookupAnimations(classes) {
                classes = isArray(classes) ? classes : classes.split(" ");
                var matches = [], flagMap = {};
                for (var i = 0; i < classes.length; i++) {
                    var klass = classes[i], animationFactory = $animateProvider.$$registeredAnimations[klass];
                    if (animationFactory && !flagMap[klass]) {
                        matches.push($injector.get(animationFactory));
                        flagMap[klass] = true;
                    }
                }
                return matches;
            }
        } ];
    } ];
    var $$AnimateJsDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateJsDriver");
        this.$get = [ "$$animateJs", "$$AnimateRunner", function($$animateJs, $$AnimateRunner) {
            return function initDriverFn(animationDetails) {
                if (animationDetails.from && animationDetails.to) {
                    var fromAnimation = prepareAnimation(animationDetails.from);
                    var toAnimation = prepareAnimation(animationDetails.to);
                    if (!fromAnimation && !toAnimation) return;
                    return {
                        start: function() {
                            var animationRunners = [];
                            if (fromAnimation) {
                                animationRunners.push(fromAnimation.start());
                            }
                            if (toAnimation) {
                                animationRunners.push(toAnimation.start());
                            }
                            $$AnimateRunner.all(animationRunners, done);
                            var runner = new $$AnimateRunner({
                                end: endFnFactory(),
                                cancel: endFnFactory()
                            });
                            return runner;
                            function endFnFactory() {
                                return function() {
                                    forEach(animationRunners, function(runner) {
                                        runner.end();
                                    });
                                };
                            }
                            function done(status) {
                                runner.complete(status);
                            }
                        }
                    };
                } else {
                    return prepareAnimation(animationDetails);
                }
            };
            function prepareAnimation(animationDetails) {
                var element = animationDetails.element;
                var event = animationDetails.event;
                var options = animationDetails.options;
                var classes = animationDetails.classes;
                return $$animateJs(element, event, classes, options);
            }
        } ];
    } ];
    var NG_ANIMATE_ATTR_NAME = "data-ng-animate";
    var NG_ANIMATE_PIN_DATA = "$ngAnimatePin";
    var $$AnimateQueueProvider = [ "$animateProvider", function($animateProvider) {
        var PRE_DIGEST_STATE = 1;
        var RUNNING_STATE = 2;
        var ONE_SPACE = " ";
        var rules = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };
        function makeTruthyCssClassMap(classString) {
            if (!classString) {
                return null;
            }
            var keys = classString.split(ONE_SPACE);
            var map = Object.create(null);
            forEach(keys, function(key) {
                map[key] = true;
            });
            return map;
        }
        function hasMatchingClasses(newClassString, currentClassString) {
            if (newClassString && currentClassString) {
                var currentClassMap = makeTruthyCssClassMap(currentClassString);
                return newClassString.split(ONE_SPACE).some(function(className) {
                    return currentClassMap[className];
                });
            }
        }
        function isAllowed(ruleType, currentAnimation, previousAnimation) {
            return rules[ruleType].some(function(fn) {
                return fn(currentAnimation, previousAnimation);
            });
        }
        function hasAnimationClasses(animation, and) {
            var a = (animation.addClass || "").length > 0;
            var b = (animation.removeClass || "").length > 0;
            return and ? a && b : a || b;
        }
        rules.join.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && !hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return currentAnimation.event === "leave" && newAnimation.structural;
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            if (currentAnimation.structural) return false;
            var nA = newAnimation.addClass;
            var nR = newAnimation.removeClass;
            var cA = currentAnimation.addClass;
            var cR = currentAnimation.removeClass;
            if (isUndefined(nA) && isUndefined(nR) || isUndefined(cA) && isUndefined(cR)) {
                return false;
            }
            return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
        });
        this.$get = [ "$$rAF", "$rootScope", "$rootElement", "$document", "$$Map", "$$animation", "$$AnimateRunner", "$templateRequest", "$$jqLite", "$$forceReflow", "$$isDocumentHidden", function($$rAF, $rootScope, $rootElement, $document, $$Map, $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow, $$isDocumentHidden) {
            var activeAnimationsLookup = new $$Map();
            var disabledElementsLookup = new $$Map();
            var animationsEnabled = null;
            function postDigestTaskFactory() {
                var postDigestCalled = false;
                return function(fn) {
                    if (postDigestCalled) {
                        fn();
                    } else {
                        $rootScope.$$postDigest(function() {
                            postDigestCalled = true;
                            fn();
                        });
                    }
                };
            }
            var deregisterWatch = $rootScope.$watch(function() {
                return $templateRequest.totalPendingRequests === 0;
            }, function(isEmpty) {
                if (!isEmpty) return;
                deregisterWatch();
                $rootScope.$$postDigest(function() {
                    $rootScope.$$postDigest(function() {
                        if (animationsEnabled === null) {
                            animationsEnabled = true;
                        }
                    });
                });
            });
            var callbackRegistry = Object.create(null);
            var classNameFilter = $animateProvider.classNameFilter();
            var isAnimatableClassName = !classNameFilter ? function() {
                return true;
            } : function(className) {
                return classNameFilter.test(className);
            };
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function normalizeAnimationDetails(element, animation) {
                return mergeAnimationDetails(element, animation, {});
            }
            var contains = window.Node.prototype.contains || function(arg) {
                return this === arg || !!(this.compareDocumentPosition(arg) & 16);
            };
            function findCallbacks(targetParentNode, targetNode, event) {
                var matches = [];
                var entries = callbackRegistry[event];
                if (entries) {
                    forEach(entries, function(entry) {
                        if (contains.call(entry.node, targetNode)) {
                            matches.push(entry.callback);
                        } else if (event === "leave" && contains.call(entry.node, targetParentNode)) {
                            matches.push(entry.callback);
                        }
                    });
                }
                return matches;
            }
            function filterFromRegistry(list, matchContainer, matchCallback) {
                var containerNode = extractElementNode(matchContainer);
                return list.filter(function(entry) {
                    var isMatch = entry.node === containerNode && (!matchCallback || entry.callback === matchCallback);
                    return !isMatch;
                });
            }
            function cleanupEventListeners(phase, node) {
                if (phase === "close" && !node.parentNode) {
                    $animate.off(node);
                }
            }
            var $animate = {
                on: function(event, container, callback) {
                    var node = extractElementNode(container);
                    callbackRegistry[event] = callbackRegistry[event] || [];
                    callbackRegistry[event].push({
                        node: node,
                        callback: callback
                    });
                    jqLite(container).on("$destroy", function() {
                        var animationDetails = activeAnimationsLookup.get(node);
                        if (!animationDetails) {
                            $animate.off(event, container, callback);
                        }
                    });
                },
                off: function(event, container, callback) {
                    if (arguments.length === 1 && !isString(arguments[0])) {
                        container = arguments[0];
                        for (var eventType in callbackRegistry) {
                            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
                        }
                        return;
                    }
                    var entries = callbackRegistry[event];
                    if (!entries) return;
                    callbackRegistry[event] = arguments.length === 1 ? null : filterFromRegistry(entries, container, callback);
                },
                pin: function(element, parentElement) {
                    assertArg(isElement(element), "element", "not an element");
                    assertArg(isElement(parentElement), "parentElement", "not an element");
                    element.data(NG_ANIMATE_PIN_DATA, parentElement);
                },
                push: function(element, event, options, domOperation) {
                    options = options || {};
                    options.domOperation = domOperation;
                    return queueAnimation(element, event, options);
                },
                enabled: function(element, bool) {
                    var argCount = arguments.length;
                    if (argCount === 0) {
                        bool = !!animationsEnabled;
                    } else {
                        var hasElement = isElement(element);
                        if (!hasElement) {
                            bool = animationsEnabled = !!element;
                        } else {
                            var node = getDomNode(element);
                            if (argCount === 1) {
                                bool = !disabledElementsLookup.get(node);
                            } else {
                                disabledElementsLookup.set(node, !bool);
                            }
                        }
                    }
                    return bool;
                }
            };
            return $animate;
            function queueAnimation(originalElement, event, initialOptions) {
                var options = copy(initialOptions);
                var element = stripCommentsFromElement(originalElement);
                var node = getDomNode(element);
                var parentNode = node && node.parentNode;
                options = prepareAnimationOptions(options);
                var runner = new $$AnimateRunner();
                var runInNextPostDigestOrNow = postDigestTaskFactory();
                if (isArray(options.addClass)) {
                    options.addClass = options.addClass.join(" ");
                }
                if (options.addClass && !isString(options.addClass)) {
                    options.addClass = null;
                }
                if (isArray(options.removeClass)) {
                    options.removeClass = options.removeClass.join(" ");
                }
                if (options.removeClass && !isString(options.removeClass)) {
                    options.removeClass = null;
                }
                if (options.from && !isObject(options.from)) {
                    options.from = null;
                }
                if (options.to && !isObject(options.to)) {
                    options.to = null;
                }
                if (!node) {
                    close();
                    return runner;
                }
                var className = [ node.getAttribute("class"), options.addClass, options.removeClass ].join(" ");
                if (!isAnimatableClassName(className)) {
                    close();
                    return runner;
                }
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0;
                var documentHidden = $$isDocumentHidden();
                var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);
                var existingAnimation = !skipAnimations && activeAnimationsLookup.get(node) || {};
                var hasExistingAnimation = !!existingAnimation.state;
                if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {
                    skipAnimations = !areAnimationsAllowed(node, parentNode, event);
                }
                if (skipAnimations) {
                    if (documentHidden) notifyProgress(runner, event, "start");
                    close();
                    if (documentHidden) notifyProgress(runner, event, "close");
                    return runner;
                }
                if (isStructural) {
                    closeChildAnimations(node);
                }
                var newAnimation = {
                    structural: isStructural,
                    element: element,
                    event: event,
                    addClass: options.addClass,
                    removeClass: options.removeClass,
                    close: close,
                    options: options,
                    runner: runner
                };
                if (hasExistingAnimation) {
                    var skipAnimationFlag = isAllowed("skip", newAnimation, existingAnimation);
                    if (skipAnimationFlag) {
                        if (existingAnimation.state === RUNNING_STATE) {
                            close();
                            return runner;
                        } else {
                            mergeAnimationDetails(element, existingAnimation, newAnimation);
                            return existingAnimation.runner;
                        }
                    }
                    var cancelAnimationFlag = isAllowed("cancel", newAnimation, existingAnimation);
                    if (cancelAnimationFlag) {
                        if (existingAnimation.state === RUNNING_STATE) {
                            existingAnimation.runner.end();
                        } else if (existingAnimation.structural) {
                            existingAnimation.close();
                        } else {
                            mergeAnimationDetails(element, existingAnimation, newAnimation);
                            return existingAnimation.runner;
                        }
                    } else {
                        var joinAnimationFlag = isAllowed("join", newAnimation, existingAnimation);
                        if (joinAnimationFlag) {
                            if (existingAnimation.state === RUNNING_STATE) {
                                normalizeAnimationDetails(element, newAnimation);
                            } else {
                                applyGeneratedPreparationClasses(element, isStructural ? event : null, options);
                                event = newAnimation.event = existingAnimation.event;
                                options = mergeAnimationDetails(element, existingAnimation, newAnimation);
                                return existingAnimation.runner;
                            }
                        }
                    }
                } else {
                    normalizeAnimationDetails(element, newAnimation);
                }
                var isValidAnimation = newAnimation.structural;
                if (!isValidAnimation) {
                    isValidAnimation = newAnimation.event === "animate" && Object.keys(newAnimation.options.to || {}).length > 0 || hasAnimationClasses(newAnimation);
                }
                if (!isValidAnimation) {
                    close();
                    clearElementAnimationState(node);
                    return runner;
                }
                var counter = (existingAnimation.counter || 0) + 1;
                newAnimation.counter = counter;
                markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);
                $rootScope.$$postDigest(function() {
                    element = stripCommentsFromElement(originalElement);
                    var animationDetails = activeAnimationsLookup.get(node);
                    var animationCancelled = !animationDetails;
                    animationDetails = animationDetails || {};
                    var parentElement = element.parent() || [];
                    var isValidAnimation = parentElement.length > 0 && (animationDetails.event === "animate" || animationDetails.structural || hasAnimationClasses(animationDetails));
                    if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
                        if (animationCancelled) {
                            applyAnimationClasses(element, options);
                            applyAnimationStyles(element, options);
                        }
                        if (animationCancelled || isStructural && animationDetails.event !== event) {
                            options.domOperation();
                            runner.end();
                        }
                        if (!isValidAnimation) {
                            clearElementAnimationState(node);
                        }
                        return;
                    }
                    event = !animationDetails.structural && hasAnimationClasses(animationDetails, true) ? "setClass" : animationDetails.event;
                    markElementAnimationState(node, RUNNING_STATE);
                    var realRunner = $$animation(element, event, animationDetails.options);
                    runner.setHost(realRunner);
                    notifyProgress(runner, event, "start", {});
                    realRunner.done(function(status) {
                        close(!status);
                        var animationDetails = activeAnimationsLookup.get(node);
                        if (animationDetails && animationDetails.counter === counter) {
                            clearElementAnimationState(node);
                        }
                        notifyProgress(runner, event, "close", {});
                    });
                });
                return runner;
                function notifyProgress(runner, event, phase, data) {
                    runInNextPostDigestOrNow(function() {
                        var callbacks = findCallbacks(parentNode, node, event);
                        if (callbacks.length) {
                            $$rAF(function() {
                                forEach(callbacks, function(callback) {
                                    callback(element, phase, data);
                                });
                                cleanupEventListeners(phase, node);
                            });
                        } else {
                            cleanupEventListeners(phase, node);
                        }
                    });
                    runner.progress(event, phase, data);
                }
                function close(reject) {
                    clearGeneratedClasses(element, options);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    runner.complete(!reject);
                }
            }
            function closeChildAnimations(node) {
                var children = node.querySelectorAll("[" + NG_ANIMATE_ATTR_NAME + "]");
                forEach(children, function(child) {
                    var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);
                    var animationDetails = activeAnimationsLookup.get(child);
                    if (animationDetails) {
                        switch (state) {
                          case RUNNING_STATE:
                            animationDetails.runner.end();

                          case PRE_DIGEST_STATE:
                            activeAnimationsLookup.delete(child);
                            break;
                        }
                    }
                });
            }
            function clearElementAnimationState(node) {
                node.removeAttribute(NG_ANIMATE_ATTR_NAME);
                activeAnimationsLookup.delete(node);
            }
            function areAnimationsAllowed(node, parentNode, event) {
                var bodyNode = $document[0].body;
                var rootNode = getDomNode($rootElement);
                var bodyNodeDetected = node === bodyNode || node.nodeName === "HTML";
                var rootNodeDetected = node === rootNode;
                var parentAnimationDetected = false;
                var elementDisabled = disabledElementsLookup.get(node);
                var animateChildren;
                var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);
                if (parentHost) {
                    parentNode = getDomNode(parentHost);
                }
                while (parentNode) {
                    if (!rootNodeDetected) {
                        rootNodeDetected = parentNode === rootNode;
                    }
                    if (parentNode.nodeType !== ELEMENT_NODE) {
                        break;
                    }
                    var details = activeAnimationsLookup.get(parentNode) || {};
                    if (!parentAnimationDetected) {
                        var parentNodeDisabled = disabledElementsLookup.get(parentNode);
                        if (parentNodeDisabled === true && elementDisabled !== false) {
                            elementDisabled = true;
                            break;
                        } else if (parentNodeDisabled === false) {
                            elementDisabled = false;
                        }
                        parentAnimationDetected = details.structural;
                    }
                    if (isUndefined(animateChildren) || animateChildren === true) {
                        var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);
                        if (isDefined(value)) {
                            animateChildren = value;
                        }
                    }
                    if (parentAnimationDetected && animateChildren === false) break;
                    if (!bodyNodeDetected) {
                        bodyNodeDetected = parentNode === bodyNode;
                    }
                    if (bodyNodeDetected && rootNodeDetected) {
                        break;
                    }
                    if (!rootNodeDetected) {
                        parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);
                        if (parentHost) {
                            parentNode = getDomNode(parentHost);
                            continue;
                        }
                    }
                    parentNode = parentNode.parentNode;
                }
                var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
                return allowAnimation && rootNodeDetected && bodyNodeDetected;
            }
            function markElementAnimationState(node, state, details) {
                details = details || {};
                details.state = state;
                node.setAttribute(NG_ANIMATE_ATTR_NAME, state);
                var oldValue = activeAnimationsLookup.get(node);
                var newValue = oldValue ? extend(oldValue, details) : details;
                activeAnimationsLookup.set(node, newValue);
            }
        } ];
    } ];
    var $$AnimationProvider = [ "$animateProvider", function($animateProvider) {
        var NG_ANIMATE_REF_ATTR = "ng-animate-ref";
        var drivers = this.drivers = [];
        var RUNNER_STORAGE_KEY = "$$animationRunner";
        function setRunner(element, runner) {
            element.data(RUNNER_STORAGE_KEY, runner);
        }
        function removeRunner(element) {
            element.removeData(RUNNER_STORAGE_KEY);
        }
        function getRunner(element) {
            return element.data(RUNNER_STORAGE_KEY);
        }
        this.$get = [ "$$jqLite", "$rootScope", "$injector", "$$AnimateRunner", "$$Map", "$$rAFScheduler", function($$jqLite, $rootScope, $injector, $$AnimateRunner, $$Map, $$rAFScheduler) {
            var animationQueue = [];
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function sortAnimations(animations) {
                var tree = {
                    children: []
                };
                var i, lookup = new $$Map();
                for (i = 0; i < animations.length; i++) {
                    var animation = animations[i];
                    lookup.set(animation.domNode, animations[i] = {
                        domNode: animation.domNode,
                        fn: animation.fn,
                        children: []
                    });
                }
                for (i = 0; i < animations.length; i++) {
                    processNode(animations[i]);
                }
                return flatten(tree);
                function processNode(entry) {
                    if (entry.processed) return entry;
                    entry.processed = true;
                    var elementNode = entry.domNode;
                    var parentNode = elementNode.parentNode;
                    lookup.set(elementNode, entry);
                    var parentEntry;
                    while (parentNode) {
                        parentEntry = lookup.get(parentNode);
                        if (parentEntry) {
                            if (!parentEntry.processed) {
                                parentEntry = processNode(parentEntry);
                            }
                            break;
                        }
                        parentNode = parentNode.parentNode;
                    }
                    (parentEntry || tree).children.push(entry);
                    return entry;
                }
                function flatten(tree) {
                    var result = [];
                    var queue = [];
                    var i;
                    for (i = 0; i < tree.children.length; i++) {
                        queue.push(tree.children[i]);
                    }
                    var remainingLevelEntries = queue.length;
                    var nextLevelEntries = 0;
                    var row = [];
                    for (i = 0; i < queue.length; i++) {
                        var entry = queue[i];
                        if (remainingLevelEntries <= 0) {
                            remainingLevelEntries = nextLevelEntries;
                            nextLevelEntries = 0;
                            result.push(row);
                            row = [];
                        }
                        row.push(entry.fn);
                        entry.children.forEach(function(childEntry) {
                            nextLevelEntries++;
                            queue.push(childEntry);
                        });
                        remainingLevelEntries--;
                    }
                    if (row.length) {
                        result.push(row);
                    }
                    return result;
                }
            }
            return function(element, event, options) {
                options = prepareAnimationOptions(options);
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0;
                var runner = new $$AnimateRunner({
                    end: function() {
                        close();
                    },
                    cancel: function() {
                        close(true);
                    }
                });
                if (!drivers.length) {
                    close();
                    return runner;
                }
                setRunner(element, runner);
                var classes = mergeClasses(element.attr("class"), mergeClasses(options.addClass, options.removeClass));
                var tempClasses = options.tempClasses;
                if (tempClasses) {
                    classes += " " + tempClasses;
                    options.tempClasses = null;
                }
                var prepareClassName;
                if (isStructural) {
                    prepareClassName = "ng-" + event + PREPARE_CLASS_SUFFIX;
                    $$jqLite.addClass(element, prepareClassName);
                }
                animationQueue.push({
                    element: element,
                    classes: classes,
                    event: event,
                    structural: isStructural,
                    options: options,
                    beforeStart: beforeStart,
                    close: close
                });
                element.on("$destroy", handleDestroyedElement);
                if (animationQueue.length > 1) return runner;
                $rootScope.$$postDigest(function() {
                    var animations = [];
                    forEach(animationQueue, function(entry) {
                        if (getRunner(entry.element)) {
                            animations.push(entry);
                        } else {
                            entry.close();
                        }
                    });
                    animationQueue.length = 0;
                    var groupedAnimations = groupAnimations(animations);
                    var toBeSortedAnimations = [];
                    forEach(groupedAnimations, function(animationEntry) {
                        toBeSortedAnimations.push({
                            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
                            fn: function triggerAnimationStart() {
                                animationEntry.beforeStart();
                                var startAnimationFn, closeFn = animationEntry.close;
                                var targetElement = animationEntry.anchors ? animationEntry.from.element || animationEntry.to.element : animationEntry.element;
                                if (getRunner(targetElement)) {
                                    var operation = invokeFirstDriver(animationEntry);
                                    if (operation) {
                                        startAnimationFn = operation.start;
                                    }
                                }
                                if (!startAnimationFn) {
                                    closeFn();
                                } else {
                                    var animationRunner = startAnimationFn();
                                    animationRunner.done(function(status) {
                                        closeFn(!status);
                                    });
                                    updateAnimationRunners(animationEntry, animationRunner);
                                }
                            }
                        });
                    });
                    $$rAFScheduler(sortAnimations(toBeSortedAnimations));
                });
                return runner;
                function getAnchorNodes(node) {
                    var SELECTOR = "[" + NG_ANIMATE_REF_ATTR + "]";
                    var items = node.hasAttribute(NG_ANIMATE_REF_ATTR) ? [ node ] : node.querySelectorAll(SELECTOR);
                    var anchors = [];
                    forEach(items, function(node) {
                        var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
                        if (attr && attr.length) {
                            anchors.push(node);
                        }
                    });
                    return anchors;
                }
                function groupAnimations(animations) {
                    var preparedAnimations = [];
                    var refLookup = {};
                    forEach(animations, function(animation, index) {
                        var element = animation.element;
                        var node = getDomNode(element);
                        var event = animation.event;
                        var enterOrMove = [ "enter", "move" ].indexOf(event) >= 0;
                        var anchorNodes = animation.structural ? getAnchorNodes(node) : [];
                        if (anchorNodes.length) {
                            var direction = enterOrMove ? "to" : "from";
                            forEach(anchorNodes, function(anchor) {
                                var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
                                refLookup[key] = refLookup[key] || {};
                                refLookup[key][direction] = {
                                    animationID: index,
                                    element: jqLite(anchor)
                                };
                            });
                        } else {
                            preparedAnimations.push(animation);
                        }
                    });
                    var usedIndicesLookup = {};
                    var anchorGroups = {};
                    forEach(refLookup, function(operations, key) {
                        var from = operations.from;
                        var to = operations.to;
                        if (!from || !to) {
                            var index = from ? from.animationID : to.animationID;
                            var indexKey = index.toString();
                            if (!usedIndicesLookup[indexKey]) {
                                usedIndicesLookup[indexKey] = true;
                                preparedAnimations.push(animations[index]);
                            }
                            return;
                        }
                        var fromAnimation = animations[from.animationID];
                        var toAnimation = animations[to.animationID];
                        var lookupKey = from.animationID.toString();
                        if (!anchorGroups[lookupKey]) {
                            var group = anchorGroups[lookupKey] = {
                                structural: true,
                                beforeStart: function() {
                                    fromAnimation.beforeStart();
                                    toAnimation.beforeStart();
                                },
                                close: function() {
                                    fromAnimation.close();
                                    toAnimation.close();
                                },
                                classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
                                from: fromAnimation,
                                to: toAnimation,
                                anchors: []
                            };
                            if (group.classes.length) {
                                preparedAnimations.push(group);
                            } else {
                                preparedAnimations.push(fromAnimation);
                                preparedAnimations.push(toAnimation);
                            }
                        }
                        anchorGroups[lookupKey].anchors.push({
                            out: from.element,
                            in: to.element
                        });
                    });
                    return preparedAnimations;
                }
                function cssClassesIntersection(a, b) {
                    a = a.split(" ");
                    b = b.split(" ");
                    var matches = [];
                    for (var i = 0; i < a.length; i++) {
                        var aa = a[i];
                        if (aa.substring(0, 3) === "ng-") continue;
                        for (var j = 0; j < b.length; j++) {
                            if (aa === b[j]) {
                                matches.push(aa);
                                break;
                            }
                        }
                    }
                    return matches.join(" ");
                }
                function invokeFirstDriver(animationDetails) {
                    for (var i = drivers.length - 1; i >= 0; i--) {
                        var driverName = drivers[i];
                        var factory = $injector.get(driverName);
                        var driver = factory(animationDetails);
                        if (driver) {
                            return driver;
                        }
                    }
                }
                function beforeStart() {
                    element.addClass(NG_ANIMATE_CLASSNAME);
                    if (tempClasses) {
                        $$jqLite.addClass(element, tempClasses);
                    }
                    if (prepareClassName) {
                        $$jqLite.removeClass(element, prepareClassName);
                        prepareClassName = null;
                    }
                }
                function updateAnimationRunners(animation, newRunner) {
                    if (animation.from && animation.to) {
                        update(animation.from.element);
                        update(animation.to.element);
                    } else {
                        update(animation.element);
                    }
                    function update(element) {
                        var runner = getRunner(element);
                        if (runner) runner.setHost(newRunner);
                    }
                }
                function handleDestroyedElement() {
                    var runner = getRunner(element);
                    if (runner && (event !== "leave" || !options.$$domOperationFired)) {
                        runner.end();
                    }
                }
                function close(rejected) {
                    element.off("$destroy", handleDestroyedElement);
                    removeRunner(element);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    if (tempClasses) {
                        $$jqLite.removeClass(element, tempClasses);
                    }
                    element.removeClass(NG_ANIMATE_CLASSNAME);
                    runner.complete(!rejected);
                }
            };
        } ];
    } ];
    var ngAnimateSwapDirective = [ "$animate", "$rootScope", function($animate, $rootScope) {
        return {
            restrict: "A",
            transclude: "element",
            terminal: true,
            priority: 600,
            link: function(scope, $element, attrs, ctrl, $transclude) {
                var previousElement, previousScope;
                scope.$watchCollection(attrs.ngAnimateSwap || attrs["for"], function(value) {
                    if (previousElement) {
                        $animate.leave(previousElement);
                    }
                    if (previousScope) {
                        previousScope.$destroy();
                        previousScope = null;
                    }
                    if (value || value === 0) {
                        previousScope = scope.$new();
                        $transclude(previousScope, function(element) {
                            previousElement = element;
                            $animate.enter(element, null, $element);
                        });
                    }
                });
            }
        };
    } ];
    var copy;
    var extend;
    var forEach;
    var isArray;
    var isDefined;
    var isElement;
    var isFunction;
    var isObject;
    var isString;
    var isUndefined;
    var jqLite;
    var noop;
    angular.module("ngAnimate", [], function initAngularHelpers() {
        noop = angular.noop;
        copy = angular.copy;
        extend = angular.extend;
        jqLite = angular.element;
        forEach = angular.forEach;
        isArray = angular.isArray;
        isString = angular.isString;
        isObject = angular.isObject;
        isUndefined = angular.isUndefined;
        isDefined = angular.isDefined;
        isFunction = angular.isFunction;
        isElement = angular.isElement;
    }).info({
        angularVersion: "1.6.4"
    }).directive("ngAnimateSwap", ngAnimateSwapDirective).directive("ngAnimateChildren", $$AnimateChildrenDirective).factory("$$rAFScheduler", $$rAFSchedulerFactory).provider("$$animateQueue", $$AnimateQueueProvider).provider("$$animation", $$AnimationProvider).provider("$animateCss", $AnimateCssProvider).provider("$$animateCssDriver", $$AnimateCssDriverProvider).provider("$$animateJs", $$AnimateJsProvider).provider("$$animateJsDriver", $$AnimateJsDriverProvider);
})(window, window.angular);

angular.module("ui.bootstrap", [ "ui.bootstrap.collapse", "ui.bootstrap.tabindex", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.datepicker", "ui.bootstrap.position", "ui.bootstrap.datepickerPopup", "ui.bootstrap.debounce", "ui.bootstrap.multiMap", "ui.bootstrap.dropdown", "ui.bootstrap.stackedMap", "ui.bootstrap.modal", "ui.bootstrap.paging", "ui.bootstrap.pager", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead" ]);

angular.module("ui.bootstrap.collapse", []).directive("uibCollapse", [ "$animate", "$q", "$parse", "$injector", function($animate, $q, $parse, $injector) {
    var $animateCss = $injector.has("$animateCss") ? $injector.get("$animateCss") : null;
    return {
        link: function(scope, element, attrs) {
            var expandingExpr = $parse(attrs.expanding), expandedExpr = $parse(attrs.expanded), collapsingExpr = $parse(attrs.collapsing), collapsedExpr = $parse(attrs.collapsed), horizontal = false, css = {}, cssTo = {};
            init();
            function init() {
                horizontal = !!("horizontal" in attrs);
                if (horizontal) {
                    css = {
                        width: ""
                    };
                    cssTo = {
                        width: "0"
                    };
                } else {
                    css = {
                        height: ""
                    };
                    cssTo = {
                        height: "0"
                    };
                }
                if (!scope.$eval(attrs.uibCollapse)) {
                    element.addClass("in").addClass("collapse").attr("aria-expanded", true).attr("aria-hidden", false).css(css);
                }
            }
            function getScrollFromElement(element) {
                if (horizontal) {
                    return {
                        width: element.scrollWidth + "px"
                    };
                }
                return {
                    height: element.scrollHeight + "px"
                };
            }
            function expand() {
                if (element.hasClass("collapse") && element.hasClass("in")) {
                    return;
                }
                $q.resolve(expandingExpr(scope)).then(function() {
                    element.removeClass("collapse").addClass("collapsing").attr("aria-expanded", true).attr("aria-hidden", false);
                    if ($animateCss) {
                        $animateCss(element, {
                            addClass: "in",
                            easing: "ease",
                            css: {
                                overflow: "hidden"
                            },
                            to: getScrollFromElement(element[0])
                        }).start()["finally"](expandDone);
                    } else {
                        $animate.addClass(element, "in", {
                            css: {
                                overflow: "hidden"
                            },
                            to: getScrollFromElement(element[0])
                        }).then(expandDone);
                    }
                }, angular.noop);
            }
            function expandDone() {
                element.removeClass("collapsing").addClass("collapse").css(css);
                expandedExpr(scope);
            }
            function collapse() {
                if (!element.hasClass("collapse") && !element.hasClass("in")) {
                    return collapseDone();
                }
                $q.resolve(collapsingExpr(scope)).then(function() {
                    element.css(getScrollFromElement(element[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded", false).attr("aria-hidden", true);
                    if ($animateCss) {
                        $animateCss(element, {
                            removeClass: "in",
                            to: cssTo
                        }).start()["finally"](collapseDone);
                    } else {
                        $animate.removeClass(element, "in", {
                            to: cssTo
                        }).then(collapseDone);
                    }
                }, angular.noop);
            }
            function collapseDone() {
                element.css(cssTo);
                element.removeClass("collapsing").addClass("collapse");
                collapsedExpr(scope);
            }
            scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
                if (shouldCollapse) {
                    collapse();
                } else {
                    expand();
                }
            });
        }
    };
} ]);

angular.module("ui.bootstrap.tabindex", []).directive("uibTabindexToggle", function() {
    return {
        restrict: "A",
        link: function(scope, elem, attrs) {
            attrs.$observe("disabled", function(disabled) {
                attrs.$set("tabindex", disabled ? -1 : null);
            });
        }
    };
});

angular.module("ui.bootstrap.accordion", [ "ui.bootstrap.collapse", "ui.bootstrap.tabindex" ]).constant("uibAccordionConfig", {
    closeOthers: true
}).controller("UibAccordionController", [ "$scope", "$attrs", "uibAccordionConfig", function($scope, $attrs, accordionConfig) {
    this.groups = [];
    this.closeOthers = function(openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
        if (closeOthers) {
            angular.forEach(this.groups, function(group) {
                if (group !== openGroup) {
                    group.isOpen = false;
                }
            });
        }
    };
    this.addGroup = function(groupScope) {
        var that = this;
        this.groups.push(groupScope);
        groupScope.$on("$destroy", function(event) {
            that.removeGroup(groupScope);
        });
    };
    this.removeGroup = function(group) {
        var index = this.groups.indexOf(group);
        if (index !== -1) {
            this.groups.splice(index, 1);
        }
    };
} ]).directive("uibAccordion", function() {
    return {
        controller: "UibAccordionController",
        controllerAs: "accordion",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/accordion/accordion.html";
        }
    };
}).directive("uibAccordionGroup", function() {
    return {
        require: "^uibAccordion",
        transclude: true,
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/accordion/accordion-group.html";
        },
        scope: {
            heading: "@",
            panelClass: "@?",
            isOpen: "=?",
            isDisabled: "=?"
        },
        controller: function() {
            this.setHeading = function(element) {
                this.heading = element;
            };
        },
        link: function(scope, element, attrs, accordionCtrl) {
            element.addClass("panel");
            accordionCtrl.addGroup(scope);
            scope.openClass = attrs.openClass || "panel-open";
            scope.panelClass = attrs.panelClass || "panel-default";
            scope.$watch("isOpen", function(value) {
                element.toggleClass(scope.openClass, !!value);
                if (value) {
                    accordionCtrl.closeOthers(scope);
                }
            });
            scope.toggleOpen = function($event) {
                if (!scope.isDisabled) {
                    if (!$event || $event.which === 32) {
                        scope.isOpen = !scope.isOpen;
                    }
                }
            };
            var id = "accordiongroup-" + scope.$id + "-" + Math.floor(Math.random() * 1e4);
            scope.headingId = id + "-tab";
            scope.panelId = id + "-panel";
        }
    };
}).directive("uibAccordionHeading", function() {
    return {
        transclude: true,
        template: "",
        replace: true,
        require: "^uibAccordionGroup",
        link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
            accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
        }
    };
}).directive("uibAccordionTransclude", function() {
    return {
        require: "^uibAccordionGroup",
        link: function(scope, element, attrs, controller) {
            scope.$watch(function() {
                return controller[attrs.uibAccordionTransclude];
            }, function(heading) {
                if (heading) {
                    var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
                    elem.html("");
                    elem.append(heading);
                }
            });
        }
    };
    function getHeaderSelectors() {
        return "uib-accordion-header," + "data-uib-accordion-header," + "x-uib-accordion-header," + "uib\\:accordion-header," + "[uib-accordion-header]," + "[data-uib-accordion-header]," + "[x-uib-accordion-header]";
    }
});

angular.module("ui.bootstrap.alert", []).controller("UibAlertController", [ "$scope", "$element", "$attrs", "$interpolate", "$timeout", function($scope, $element, $attrs, $interpolate, $timeout) {
    $scope.closeable = !!$attrs.close;
    $element.addClass("alert");
    $attrs.$set("role", "alert");
    if ($scope.closeable) {
        $element.addClass("alert-dismissible");
    }
    var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ? $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;
    if (dismissOnTimeout) {
        $timeout(function() {
            $scope.close();
        }, parseInt(dismissOnTimeout, 10));
    }
} ]).directive("uibAlert", function() {
    return {
        controller: "UibAlertController",
        controllerAs: "alert",
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/alert/alert.html";
        },
        transclude: true,
        scope: {
            close: "&"
        }
    };
});

angular.module("ui.bootstrap.buttons", []).constant("uibButtonConfig", {
    activeClass: "active",
    toggleEvent: "click"
}).controller("UibButtonsController", [ "uibButtonConfig", function(buttonConfig) {
    this.activeClass = buttonConfig.activeClass || "active";
    this.toggleEvent = buttonConfig.toggleEvent || "click";
} ]).directive("uibBtnRadio", [ "$parse", function($parse) {
    return {
        require: [ "uibBtnRadio", "ngModel" ],
        controller: "UibButtonsController",
        controllerAs: "buttons",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            var uncheckableExpr = $parse(attrs.uibUncheckable);
            element.find("input").css({
                display: "none"
            });
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
            };
            element.on(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                var isActive = element.hasClass(buttonsCtrl.activeClass);
                if (!isActive || angular.isDefined(attrs.uncheckable)) {
                    scope.$apply(function() {
                        ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
                        ngModelCtrl.$render();
                    });
                }
            });
            if (attrs.uibUncheckable) {
                scope.$watch(uncheckableExpr, function(uncheckable) {
                    attrs.$set("uncheckable", uncheckable ? "" : undefined);
                });
            }
        }
    };
} ]).directive("uibBtnCheckbox", function() {
    return {
        require: [ "uibBtnCheckbox", "ngModel" ],
        controller: "UibButtonsController",
        controllerAs: "button",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            element.find("input").css({
                display: "none"
            });
            function getTrueValue() {
                return getCheckboxValue(attrs.btnCheckboxTrue, true);
            }
            function getFalseValue() {
                return getCheckboxValue(attrs.btnCheckboxFalse, false);
            }
            function getCheckboxValue(attribute, defaultValue) {
                return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
            }
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
            };
            element.on(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
                    ngModelCtrl.$render();
                });
            });
        }
    };
});

angular.module("ui.bootstrap.carousel", []).controller("UibCarouselController", [ "$scope", "$element", "$interval", "$timeout", "$animate", function($scope, $element, $interval, $timeout, $animate) {
    var self = this, slides = self.slides = $scope.slides = [], SLIDE_DIRECTION = "uib-slideDirection", currentIndex = $scope.active, currentInterval, isPlaying;
    var destroyed = false;
    $element.addClass("carousel");
    self.addSlide = function(slide, element) {
        slides.push({
            slide: slide,
            element: element
        });
        slides.sort(function(a, b) {
            return +a.slide.index - +b.slide.index;
        });
        if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
            if ($scope.$currentTransition) {
                $scope.$currentTransition = null;
            }
            currentIndex = slide.index;
            $scope.active = slide.index;
            setActive(currentIndex);
            self.select(slides[findSlideIndex(slide)]);
            if (slides.length === 1) {
                $scope.play();
            }
        }
    };
    self.getCurrentIndex = function() {
        for (var i = 0; i < slides.length; i++) {
            if (slides[i].slide.index === currentIndex) {
                return i;
            }
        }
    };
    self.next = $scope.next = function() {
        var newIndex = (self.getCurrentIndex() + 1) % slides.length;
        if (newIndex === 0 && $scope.noWrap()) {
            $scope.pause();
            return;
        }
        return self.select(slides[newIndex], "next");
    };
    self.prev = $scope.prev = function() {
        var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;
        if ($scope.noWrap() && newIndex === slides.length - 1) {
            $scope.pause();
            return;
        }
        return self.select(slides[newIndex], "prev");
    };
    self.removeSlide = function(slide) {
        var index = findSlideIndex(slide);
        slides.splice(index, 1);
        if (slides.length > 0 && currentIndex === index) {
            if (index >= slides.length) {
                currentIndex = slides.length - 1;
                $scope.active = currentIndex;
                setActive(currentIndex);
                self.select(slides[slides.length - 1]);
            } else {
                currentIndex = index;
                $scope.active = currentIndex;
                setActive(currentIndex);
                self.select(slides[index]);
            }
        } else if (currentIndex > index) {
            currentIndex--;
            $scope.active = currentIndex;
        }
        if (slides.length === 0) {
            currentIndex = null;
            $scope.active = null;
        }
    };
    self.select = $scope.select = function(nextSlide, direction) {
        var nextIndex = findSlideIndex(nextSlide.slide);
        if (direction === undefined) {
            direction = nextIndex > self.getCurrentIndex() ? "next" : "prev";
        }
        if (nextSlide.slide.index !== currentIndex && !$scope.$currentTransition) {
            goNext(nextSlide.slide, nextIndex, direction);
        }
    };
    $scope.indexOfSlide = function(slide) {
        return +slide.slide.index;
    };
    $scope.isActive = function(slide) {
        return $scope.active === slide.slide.index;
    };
    $scope.isPrevDisabled = function() {
        return $scope.active === 0 && $scope.noWrap();
    };
    $scope.isNextDisabled = function() {
        return $scope.active === slides.length - 1 && $scope.noWrap();
    };
    $scope.pause = function() {
        if (!$scope.noPause) {
            isPlaying = false;
            resetTimer();
        }
    };
    $scope.play = function() {
        if (!isPlaying) {
            isPlaying = true;
            restartTimer();
        }
    };
    $element.on("mouseenter", $scope.pause);
    $element.on("mouseleave", $scope.play);
    $scope.$on("$destroy", function() {
        destroyed = true;
        resetTimer();
    });
    $scope.$watch("noTransition", function(noTransition) {
        $animate.enabled($element, !noTransition);
    });
    $scope.$watch("interval", restartTimer);
    $scope.$watchCollection("slides", resetTransition);
    $scope.$watch("active", function(index) {
        if (angular.isNumber(index) && currentIndex !== index) {
            for (var i = 0; i < slides.length; i++) {
                if (slides[i].slide.index === index) {
                    index = i;
                    break;
                }
            }
            var slide = slides[index];
            if (slide) {
                setActive(index);
                self.select(slides[index]);
                currentIndex = index;
            }
        }
    });
    function getSlideByIndex(index) {
        for (var i = 0, l = slides.length; i < l; ++i) {
            if (slides[i].index === index) {
                return slides[i];
            }
        }
    }
    function setActive(index) {
        for (var i = 0; i < slides.length; i++) {
            slides[i].slide.active = i === index;
        }
    }
    function goNext(slide, index, direction) {
        if (destroyed) {
            return;
        }
        angular.extend(slide, {
            direction: direction
        });
        angular.extend(slides[currentIndex].slide || {}, {
            direction: direction
        });
        if ($animate.enabled($element) && !$scope.$currentTransition && slides[index].element && self.slides.length > 1) {
            slides[index].element.data(SLIDE_DIRECTION, slide.direction);
            var currentIdx = self.getCurrentIndex();
            if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
                slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
            }
            $scope.$currentTransition = true;
            $animate.on("addClass", slides[index].element, function(element, phase) {
                if (phase === "close") {
                    $scope.$currentTransition = null;
                    $animate.off("addClass", element);
                }
            });
        }
        $scope.active = slide.index;
        currentIndex = slide.index;
        setActive(index);
        restartTimer();
    }
    function findSlideIndex(slide) {
        for (var i = 0; i < slides.length; i++) {
            if (slides[i].slide === slide) {
                return i;
            }
        }
    }
    function resetTimer() {
        if (currentInterval) {
            $interval.cancel(currentInterval);
            currentInterval = null;
        }
    }
    function resetTransition(slides) {
        if (!slides.length) {
            $scope.$currentTransition = null;
        }
    }
    function restartTimer() {
        resetTimer();
        var interval = +$scope.interval;
        if (!isNaN(interval) && interval > 0) {
            currentInterval = $interval(timerFn, interval);
        }
    }
    function timerFn() {
        var interval = +$scope.interval;
        if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
            $scope.next();
        } else {
            $scope.pause();
        }
    }
} ]).directive("uibCarousel", function() {
    return {
        transclude: true,
        controller: "UibCarouselController",
        controllerAs: "carousel",
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/carousel/carousel.html";
        },
        scope: {
            active: "=",
            interval: "=",
            noTransition: "=",
            noPause: "=",
            noWrap: "&"
        }
    };
}).directive("uibSlide", [ "$animate", function($animate) {
    return {
        require: "^uibCarousel",
        restrict: "A",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/carousel/slide.html";
        },
        scope: {
            actual: "=?",
            index: "=?"
        },
        link: function(scope, element, attrs, carouselCtrl) {
            element.addClass("item");
            carouselCtrl.addSlide(scope, element);
            scope.$on("$destroy", function() {
                carouselCtrl.removeSlide(scope);
            });
            scope.$watch("active", function(active) {
                $animate[active ? "addClass" : "removeClass"](element, "active");
            });
        }
    };
} ]).animation(".item", [ "$animateCss", function($animateCss) {
    var SLIDE_DIRECTION = "uib-slideDirection";
    function removeClass(element, className, callback) {
        element.removeClass(className);
        if (callback) {
            callback();
        }
    }
    return {
        beforeAddClass: function(element, className, done) {
            if (className === "active") {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction === "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass + " " + direction, done);
                element.addClass(direction);
                $animateCss(element, {
                    addClass: directionClass
                }).start().done(removeClassFn);
                return function() {
                    stopped = true;
                };
            }
            done();
        },
        beforeRemoveClass: function(element, className, done) {
            if (className === "active") {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction === "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass, done);
                $animateCss(element, {
                    addClass: directionClass
                }).start().done(removeClassFn);
                return function() {
                    stopped = true;
                };
            }
            done();
        }
    };
} ]);

angular.module("ui.bootstrap.dateparser", []).service("uibDateParser", [ "$log", "$locale", "dateFilter", "orderByFilter", "filterFilter", function($log, $locale, dateFilter, orderByFilter, filterFilter) {
    var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var localeId;
    var formatCodeToRegex;
    this.init = function() {
        localeId = $locale.id;
        this.parsers = {};
        this.formatters = {};
        formatCodeToRegex = [ {
            key: "yyyy",
            regex: "\\d{4}",
            apply: function(value) {
                this.year = +value;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "yyyy");
            }
        }, {
            key: "yy",
            regex: "\\d{2}",
            apply: function(value) {
                value = +value;
                this.year = value < 69 ? value + 2e3 : value + 1900;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "yy");
            }
        }, {
            key: "y",
            regex: "\\d{1,4}",
            apply: function(value) {
                this.year = +value;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "y");
            }
        }, {
            key: "M!",
            regex: "0?[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                var value = date.getMonth();
                if (/^[0-9]$/.test(value)) {
                    return dateFilter(date, "MM");
                }
                return dateFilter(date, "M");
            }
        }, {
            key: "MMMM",
            regex: $locale.DATETIME_FORMATS.MONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value);
            },
            formatter: function(date) {
                return dateFilter(date, "MMMM");
            }
        }, {
            key: "MMM",
            regex: $locale.DATETIME_FORMATS.SHORTMONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value);
            },
            formatter: function(date) {
                return dateFilter(date, "MMM");
            }
        }, {
            key: "MM",
            regex: "0[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                return dateFilter(date, "MM");
            }
        }, {
            key: "M",
            regex: "[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                return dateFilter(date, "M");
            }
        }, {
            key: "d!",
            regex: "[0-2]?[0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                var value = date.getDate();
                if (/^[1-9]$/.test(value)) {
                    return dateFilter(date, "dd");
                }
                return dateFilter(date, "d");
            }
        }, {
            key: "dd",
            regex: "[0-2][0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "dd");
            }
        }, {
            key: "d",
            regex: "[1-2]?[0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "d");
            }
        }, {
            key: "EEEE",
            regex: $locale.DATETIME_FORMATS.DAY.join("|"),
            formatter: function(date) {
                return dateFilter(date, "EEEE");
            }
        }, {
            key: "EEE",
            regex: $locale.DATETIME_FORMATS.SHORTDAY.join("|"),
            formatter: function(date) {
                return dateFilter(date, "EEE");
            }
        }, {
            key: "HH",
            regex: "(?:0|1)[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "HH");
            }
        }, {
            key: "hh",
            regex: "0[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "hh");
            }
        }, {
            key: "H",
            regex: "1?[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "H");
            }
        }, {
            key: "h",
            regex: "[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "h");
            }
        }, {
            key: "mm",
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "mm");
            }
        }, {
            key: "m",
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "m");
            }
        }, {
            key: "sss",
            regex: "[0-9][0-9][0-9]",
            apply: function(value) {
                this.milliseconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "sss");
            }
        }, {
            key: "ss",
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "ss");
            }
        }, {
            key: "s",
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "s");
            }
        }, {
            key: "a",
            regex: $locale.DATETIME_FORMATS.AMPMS.join("|"),
            apply: function(value) {
                if (this.hours === 12) {
                    this.hours = 0;
                }
                if (value === "PM") {
                    this.hours += 12;
                }
            },
            formatter: function(date) {
                return dateFilter(date, "a");
            }
        }, {
            key: "Z",
            regex: "[+-]\\d{4}",
            apply: function(value) {
                var matches = value.match(/([+-])(\d{2})(\d{2})/), sign = matches[1], hours = matches[2], minutes = matches[3];
                this.hours += toInt(sign + hours);
                this.minutes += toInt(sign + minutes);
            },
            formatter: function(date) {
                return dateFilter(date, "Z");
            }
        }, {
            key: "ww",
            regex: "[0-4][0-9]|5[0-3]",
            formatter: function(date) {
                return dateFilter(date, "ww");
            }
        }, {
            key: "w",
            regex: "[0-9]|[1-4][0-9]|5[0-3]",
            formatter: function(date) {
                return dateFilter(date, "w");
            }
        }, {
            key: "GGGG",
            regex: $locale.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g, "\\s"),
            formatter: function(date) {
                return dateFilter(date, "GGGG");
            }
        }, {
            key: "GGG",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "GGG");
            }
        }, {
            key: "GG",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "GG");
            }
        }, {
            key: "G",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "G");
            }
        } ];
        if (angular.version.major >= 1 && angular.version.minor > 4) {
            formatCodeToRegex.push({
                key: "LLLL",
                regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join("|"),
                apply: function(value) {
                    this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value);
                },
                formatter: function(date) {
                    return dateFilter(date, "LLLL");
                }
            });
        }
    };
    this.init();
    function getFormatCodeToRegex(key) {
        return filterFilter(formatCodeToRegex, {
            key: key
        }, true)[0];
    }
    this.getParser = function(key) {
        var f = getFormatCodeToRegex(key);
        return f && f.apply || null;
    };
    this.overrideParser = function(key, parser) {
        var f = getFormatCodeToRegex(key);
        if (f && angular.isFunction(parser)) {
            this.parsers = {};
            f.apply = parser;
        }
    }.bind(this);
    function createParser(format) {
        var map = [], regex = format.split("");
        var quoteIndex = format.indexOf("'");
        if (quoteIndex > -1) {
            var inLiteral = false;
            format = format.split("");
            for (var i = quoteIndex; i < format.length; i++) {
                if (inLiteral) {
                    if (format[i] === "'") {
                        if (i + 1 < format.length && format[i + 1] === "'") {
                            format[i + 1] = "$";
                            regex[i + 1] = "";
                        } else {
                            regex[i] = "";
                            inLiteral = false;
                        }
                    }
                    format[i] = "$";
                } else {
                    if (format[i] === "'") {
                        format[i] = "$";
                        regex[i] = "";
                        inLiteral = true;
                    }
                }
            }
            format = format.join("");
        }
        angular.forEach(formatCodeToRegex, function(data) {
            var index = format.indexOf(data.key);
            if (index > -1) {
                format = format.split("");
                regex[index] = "(" + data.regex + ")";
                format[index] = "$";
                for (var i = index + 1, n = index + data.key.length; i < n; i++) {
                    regex[i] = "";
                    format[i] = "$";
                }
                format = format.join("");
                map.push({
                    index: index,
                    key: data.key,
                    apply: data.apply,
                    matcher: data.regex
                });
            }
        });
        return {
            regex: new RegExp("^" + regex.join("") + "$"),
            map: orderByFilter(map, "index")
        };
    }
    function createFormatter(format) {
        var formatters = [];
        var i = 0;
        var formatter, literalIdx;
        while (i < format.length) {
            if (angular.isNumber(literalIdx)) {
                if (format.charAt(i) === "'") {
                    if (i + 1 >= format.length || format.charAt(i + 1) !== "'") {
                        formatters.push(constructLiteralFormatter(format, literalIdx, i));
                        literalIdx = null;
                    }
                } else if (i === format.length) {
                    while (literalIdx < format.length) {
                        formatter = constructFormatterFromIdx(format, literalIdx);
                        formatters.push(formatter);
                        literalIdx = formatter.endIdx;
                    }
                }
                i++;
                continue;
            }
            if (format.charAt(i) === "'") {
                literalIdx = i;
                i++;
                continue;
            }
            formatter = constructFormatterFromIdx(format, i);
            formatters.push(formatter.parser);
            i = formatter.endIdx;
        }
        return formatters;
    }
    function constructLiteralFormatter(format, literalIdx, endIdx) {
        return function() {
            return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
        };
    }
    function constructFormatterFromIdx(format, i) {
        var currentPosStr = format.substr(i);
        for (var j = 0; j < formatCodeToRegex.length; j++) {
            if (new RegExp("^" + formatCodeToRegex[j].key).test(currentPosStr)) {
                var data = formatCodeToRegex[j];
                return {
                    endIdx: i + data.key.length,
                    parser: data.formatter
                };
            }
        }
        return {
            endIdx: i + 1,
            parser: function() {
                return currentPosStr.charAt(0);
            }
        };
    }
    this.filter = function(date, format) {
        if (!angular.isDate(date) || isNaN(date) || !format) {
            return "";
        }
        format = $locale.DATETIME_FORMATS[format] || format;
        if ($locale.id !== localeId) {
            this.init();
        }
        if (!this.formatters[format]) {
            this.formatters[format] = createFormatter(format);
        }
        var formatters = this.formatters[format];
        return formatters.reduce(function(str, formatter) {
            return str + formatter(date);
        }, "");
    };
    this.parse = function(input, format, baseDate) {
        if (!angular.isString(input) || !format) {
            return input;
        }
        format = $locale.DATETIME_FORMATS[format] || format;
        format = format.replace(SPECIAL_CHARACTERS_REGEXP, "\\$&");
        if ($locale.id !== localeId) {
            this.init();
        }
        if (!this.parsers[format]) {
            this.parsers[format] = createParser(format, "apply");
        }
        var parser = this.parsers[format], regex = parser.regex, map = parser.map, results = input.match(regex), tzOffset = false;
        if (results && results.length) {
            var fields, dt;
            if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
                fields = {
                    year: baseDate.getFullYear(),
                    month: baseDate.getMonth(),
                    date: baseDate.getDate(),
                    hours: baseDate.getHours(),
                    minutes: baseDate.getMinutes(),
                    seconds: baseDate.getSeconds(),
                    milliseconds: baseDate.getMilliseconds()
                };
            } else {
                if (baseDate) {
                    $log.warn("dateparser:", "baseDate is not a valid date");
                }
                fields = {
                    year: 1900,
                    month: 0,
                    date: 1,
                    hours: 0,
                    minutes: 0,
                    seconds: 0,
                    milliseconds: 0
                };
            }
            for (var i = 1, n = results.length; i < n; i++) {
                var mapper = map[i - 1];
                if (mapper.matcher === "Z") {
                    tzOffset = true;
                }
                if (mapper.apply) {
                    mapper.apply.call(fields, results[i]);
                }
            }
            var datesetter = tzOffset ? Date.prototype.setUTCFullYear : Date.prototype.setFullYear;
            var timesetter = tzOffset ? Date.prototype.setUTCHours : Date.prototype.setHours;
            if (isValid(fields.year, fields.month, fields.date)) {
                if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
                    dt = new Date(baseDate);
                    datesetter.call(dt, fields.year, fields.month, fields.date);
                    timesetter.call(dt, fields.hours, fields.minutes, fields.seconds, fields.milliseconds);
                } else {
                    dt = new Date(0);
                    datesetter.call(dt, fields.year, fields.month, fields.date);
                    timesetter.call(dt, fields.hours || 0, fields.minutes || 0, fields.seconds || 0, fields.milliseconds || 0);
                }
            }
            return dt;
        }
    };
    function isValid(year, month, date) {
        if (date < 1) {
            return false;
        }
        if (month === 1 && date > 28) {
            return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
        }
        if (month === 3 || month === 5 || month === 8 || month === 10) {
            return date < 31;
        }
        return true;
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    this.toTimezone = toTimezone;
    this.fromTimezone = fromTimezone;
    this.timezoneToOffset = timezoneToOffset;
    this.addDateMinutes = addDateMinutes;
    this.convertTimezoneToLocal = convertTimezoneToLocal;
    function toTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
    }
    function fromTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
    }
    function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(/:/g, "");
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
    }
} ]);

angular.module("ui.bootstrap.isClass", []).directive("uibIsClass", [ "$animate", function($animate) {
    var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
    var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;
    var dataPerTracked = {};
    return {
        restrict: "A",
        compile: function(tElement, tAttrs) {
            var linkedScopes = [];
            var instances = [];
            var expToData = {};
            var lastActivated = null;
            var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
            var onExp = onExpMatches[2];
            var expsStr = onExpMatches[1];
            var exps = expsStr.split(",");
            return linkFn;
            function linkFn(scope, element, attrs) {
                linkedScopes.push(scope);
                instances.push({
                    scope: scope,
                    element: element
                });
                exps.forEach(function(exp, k) {
                    addForExp(exp, scope);
                });
                scope.$on("$destroy", removeScope);
            }
            function addForExp(exp, scope) {
                var matches = exp.match(IS_REGEXP);
                var clazz = scope.$eval(matches[1]);
                var compareWithExp = matches[2];
                var data = expToData[exp];
                if (!data) {
                    var watchFn = function(compareWithVal) {
                        var newActivated = null;
                        instances.some(function(instance) {
                            var thisVal = instance.scope.$eval(onExp);
                            if (thisVal === compareWithVal) {
                                newActivated = instance;
                                return true;
                            }
                        });
                        if (data.lastActivated !== newActivated) {
                            if (data.lastActivated) {
                                $animate.removeClass(data.lastActivated.element, clazz);
                            }
                            if (newActivated) {
                                $animate.addClass(newActivated.element, clazz);
                            }
                            data.lastActivated = newActivated;
                        }
                    };
                    expToData[exp] = data = {
                        lastActivated: null,
                        scope: scope,
                        watchFn: watchFn,
                        compareWithExp: compareWithExp,
                        watcher: scope.$watch(compareWithExp, watchFn)
                    };
                }
                data.watchFn(scope.$eval(compareWithExp));
            }
            function removeScope(e) {
                var removedScope = e.targetScope;
                var index = linkedScopes.indexOf(removedScope);
                linkedScopes.splice(index, 1);
                instances.splice(index, 1);
                if (linkedScopes.length) {
                    var newWatchScope = linkedScopes[0];
                    angular.forEach(expToData, function(data) {
                        if (data.scope === removedScope) {
                            data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
                            data.scope = newWatchScope;
                        }
                    });
                } else {
                    expToData = {};
                }
            }
        }
    };
} ]);

angular.module("ui.bootstrap.datepicker", [ "ui.bootstrap.dateparser", "ui.bootstrap.isClass" ]).value("$datepickerSuppressError", false).value("$datepickerLiteralWarning", true).constant("uibDatepickerConfig", {
    datepickerMode: "day",
    formatDay: "dd",
    formatMonth: "MMMM",
    formatYear: "yyyy",
    formatDayHeader: "EEE",
    formatDayTitle: "MMMM yyyy",
    formatMonthTitle: "yyyy",
    maxDate: null,
    maxMode: "year",
    minDate: null,
    minMode: "day",
    monthColumns: 3,
    ngModelOptions: {},
    shortcutPropagation: false,
    showWeeks: true,
    yearColumns: 5,
    yearRows: 4
}).controller("UibDatepickerController", [ "$scope", "$element", "$attrs", "$parse", "$interpolate", "$locale", "$log", "dateFilter", "uibDatepickerConfig", "$datepickerLiteralWarning", "$datepickerSuppressError", "uibDateParser", function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    }, ngModelOptions = {}, watchListeners = [];
    $element.addClass("uib-datepicker");
    $attrs.$set("role", "application");
    if (!$scope.datepickerOptions) {
        $scope.datepickerOptions = {};
    }
    this.modes = [ "day", "month", "year" ];
    [ "customClass", "dateDisabled", "datepickerMode", "formatDay", "formatDayHeader", "formatDayTitle", "formatMonth", "formatMonthTitle", "formatYear", "maxDate", "maxMode", "minDate", "minMode", "monthColumns", "showWeeks", "shortcutPropagation", "startingDay", "yearColumns", "yearRows" ].forEach(function(key) {
        switch (key) {
          case "customClass":
          case "dateDisabled":
            $scope[key] = $scope.datepickerOptions[key] || angular.noop;
            break;

          case "datepickerMode":
            $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ? $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
            break;

          case "formatDay":
          case "formatDayHeader":
          case "formatDayTitle":
          case "formatMonth":
          case "formatMonthTitle":
          case "formatYear":
            self[key] = angular.isDefined($scope.datepickerOptions[key]) ? $interpolate($scope.datepickerOptions[key])($scope.$parent) : datepickerConfig[key];
            break;

          case "monthColumns":
          case "showWeeks":
          case "shortcutPropagation":
          case "yearColumns":
          case "yearRows":
            self[key] = angular.isDefined($scope.datepickerOptions[key]) ? $scope.datepickerOptions[key] : datepickerConfig[key];
            break;

          case "startingDay":
            if (angular.isDefined($scope.datepickerOptions.startingDay)) {
                self.startingDay = $scope.datepickerOptions.startingDay;
            } else if (angular.isNumber(datepickerConfig.startingDay)) {
                self.startingDay = datepickerConfig.startingDay;
            } else {
                self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
            }
            break;

          case "maxDate":
          case "minDate":
            $scope.$watch("datepickerOptions." + key, function(value) {
                if (value) {
                    if (angular.isDate(value)) {
                        self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.getOption("timezone"));
                    } else {
                        if ($datepickerLiteralWarning) {
                            $log.warn("Literal date support has been deprecated, please switch to date object usage");
                        }
                        self[key] = new Date(dateFilter(value, "medium"));
                    }
                } else {
                    self[key] = datepickerConfig[key] ? dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.getOption("timezone")) : null;
                }
                self.refreshView();
            });
            break;

          case "maxMode":
          case "minMode":
            if ($scope.datepickerOptions[key]) {
                $scope.$watch(function() {
                    return $scope.datepickerOptions[key];
                }, function(value) {
                    self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
                    if (key === "minMode" && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) || key === "maxMode" && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
                        $scope.datepickerMode = self[key];
                        $scope.datepickerOptions.datepickerMode = self[key];
                    }
                });
            } else {
                self[key] = $scope[key] = datepickerConfig[key] || null;
            }
            break;
        }
    });
    $scope.uniqueId = "datepicker-" + $scope.$id + "-" + Math.floor(Math.random() * 1e4);
    $scope.disabled = angular.isDefined($attrs.disabled) || false;
    if (angular.isDefined($attrs.ngDisabled)) {
        watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
            $scope.disabled = disabled;
            self.refreshView();
        }));
    }
    $scope.isActive = function(dateObject) {
        if (self.compare(dateObject.date, self.activeDate) === 0) {
            $scope.activeDateId = dateObject.uid;
            return true;
        }
        return false;
    };
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelOptions = extractOptions(ngModelCtrl);
        if ($scope.datepickerOptions.initDate) {
            self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.getOption("timezone")) || new Date();
            $scope.$watch("datepickerOptions.initDate", function(initDate) {
                if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
                    self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.getOption("timezone"));
                    self.refreshView();
                }
            });
        } else {
            self.activeDate = new Date();
        }
        var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
        this.activeDate = !isNaN(date) ? dateParser.fromTimezone(date, ngModelOptions.getOption("timezone")) : dateParser.fromTimezone(new Date(), ngModelOptions.getOption("timezone"));
        ngModelCtrl.$render = function() {
            self.render();
        };
    };
    this.render = function() {
        if (ngModelCtrl.$viewValue) {
            var date = new Date(ngModelCtrl.$viewValue), isValid = !isNaN(date);
            if (isValid) {
                this.activeDate = dateParser.fromTimezone(date, ngModelOptions.getOption("timezone"));
            } else if (!$datepickerSuppressError) {
                $log.error('Datepicker directive: "ng-model" value must be a Date object');
            }
        }
        this.refreshView();
    };
    this.refreshView = function() {
        if (this.element) {
            $scope.selectedDt = null;
            this._refreshView();
            if ($scope.activeDt) {
                $scope.activeDateId = $scope.activeDt.uid;
            }
            var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
            date = dateParser.fromTimezone(date, ngModelOptions.getOption("timezone"));
            ngModelCtrl.$setValidity("dateDisabled", !date || this.element && !this.isDisabled(date));
        }
    };
    this.createDateObject = function(date, format) {
        var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
        model = dateParser.fromTimezone(model, ngModelOptions.getOption("timezone"));
        var today = new Date();
        today = dateParser.fromTimezone(today, ngModelOptions.getOption("timezone"));
        var time = this.compare(date, today);
        var dt = {
            date: date,
            label: dateParser.filter(date, format),
            selected: model && this.compare(date, model) === 0,
            disabled: this.isDisabled(date),
            past: time < 0,
            current: time === 0,
            future: time > 0,
            customClass: this.customClass(date) || null
        };
        if (model && this.compare(date, model) === 0) {
            $scope.selectedDt = dt;
        }
        if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
            $scope.activeDt = dt;
        }
        return dt;
    };
    this.isDisabled = function(date) {
        return $scope.disabled || this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0 || $scope.dateDisabled && $scope.dateDisabled({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.customClass = function(date) {
        return $scope.customClass({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.split = function(arr, size) {
        var arrays = [];
        while (arr.length > 0) {
            arrays.push(arr.splice(0, size));
        }
        return arrays;
    };
    $scope.select = function(date) {
        if ($scope.datepickerMode === self.minMode) {
            var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.getOption("timezone")) : new Date(0, 0, 0, 0, 0, 0, 0);
            dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            dt = dateParser.toTimezone(dt, ngModelOptions.getOption("timezone"));
            ngModelCtrl.$setViewValue(dt);
            ngModelCtrl.$render();
        } else {
            self.activeDate = date;
            setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);
            $scope.$emit("uib:datepicker.mode");
        }
        $scope.$broadcast("uib:datepicker.focus");
    };
    $scope.move = function(direction) {
        var year = self.activeDate.getFullYear() + direction * (self.step.years || 0), month = self.activeDate.getMonth() + direction * (self.step.months || 0);
        self.activeDate.setFullYear(year, month, 1);
        self.refreshView();
    };
    $scope.toggleMode = function(direction) {
        direction = direction || 1;
        if ($scope.datepickerMode === self.maxMode && direction === 1 || $scope.datepickerMode === self.minMode && direction === -1) {
            return;
        }
        setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);
        $scope.$emit("uib:datepicker.mode");
    };
    $scope.keys = {
        13: "enter",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down"
    };
    var focusElement = function() {
        self.element[0].focus();
    };
    $scope.$on("uib:datepicker.focus", focusElement);
    $scope.keydown = function(evt) {
        var key = $scope.keys[evt.which];
        if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
            return;
        }
        evt.preventDefault();
        if (!self.shortcutPropagation) {
            evt.stopPropagation();
        }
        if (key === "enter" || key === "space") {
            if (self.isDisabled(self.activeDate)) {
                return;
            }
            $scope.select(self.activeDate);
        } else if (evt.ctrlKey && (key === "up" || key === "down")) {
            $scope.toggleMode(key === "up" ? 1 : -1);
        } else {
            self.handleKeyDown(key, evt);
            self.refreshView();
        }
    };
    $element.on("keydown", function(evt) {
        $scope.$apply(function() {
            $scope.keydown(evt);
        });
    });
    $scope.$on("$destroy", function() {
        while (watchListeners.length) {
            watchListeners.shift()();
        }
    });
    function setMode(mode) {
        $scope.datepickerMode = mode;
        $scope.datepickerOptions.datepickerMode = mode;
    }
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = ngModelCtrl.$options || $scope.datepickerOptions.ngModelOptions || datepickerConfig.ngModelOptions || {};
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            var timezone = ngModelCtrl.$options.getOption("timezone") || ($scope.datepickerOptions.ngModelOptions ? $scope.datepickerOptions.ngModelOptions.timezone : null) || (datepickerConfig.ngModelOptions ? datepickerConfig.ngModelOptions.timezone : null);
            ngModelOptions = ngModelCtrl.$options.createChild(datepickerConfig.ngModelOptions).createChild($scope.datepickerOptions.ngModelOptions).createChild(ngModelCtrl.$options).createChild({
                timezone: timezone
            });
        }
        return ngModelOptions;
    }
} ]).controller("UibDaypickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    var DAYS_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
    this.step = {
        months: 1
    };
    this.element = $element;
    function getDaysInMonth(year, month) {
        return month === 1 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
    }
    this.init = function(ctrl) {
        angular.extend(ctrl, this);
        scope.showWeeks = ctrl.showWeeks;
        ctrl.refreshView();
    };
    this.getDates = function(startDate, n) {
        var dates = new Array(n), current = new Date(startDate), i = 0, date;
        while (i < n) {
            date = new Date(current);
            dates[i++] = date;
            current.setDate(current.getDate() + 1);
        }
        return dates;
    };
    this._refreshView = function() {
        var year = this.activeDate.getFullYear(), month = this.activeDate.getMonth(), firstDayOfMonth = new Date(this.activeDate);
        firstDayOfMonth.setFullYear(year, month, 1);
        var difference = this.startingDay - firstDayOfMonth.getDay(), numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference, firstDate = new Date(firstDayOfMonth);
        if (numDisplayedFromPreviousMonth > 0) {
            firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
        }
        var days = this.getDates(firstDate, 42);
        for (var i = 0; i < 42; i++) {
            days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
                secondary: days[i].getMonth() !== month,
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.labels = new Array(7);
        for (var j = 0; j < 7; j++) {
            scope.labels[j] = {
                abbr: dateFilter(days[j].date, this.formatDayHeader),
                full: dateFilter(days[j].date, "EEEE")
            };
        }
        scope.title = dateFilter(this.activeDate, this.formatDayTitle);
        scope.rows = this.split(days, 7);
        if (scope.showWeeks) {
            scope.weekNumbers = [];
            var thursdayIndex = (4 + 7 - this.startingDay) % 7, numWeeks = scope.rows.length;
            for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
                scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
            }
        }
    };
    this.compare = function(date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
        var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
        _date1.setFullYear(date1.getFullYear());
        _date2.setFullYear(date2.getFullYear());
        return _date1 - _date2;
    };
    function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        var time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
    }
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getDate();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - 7;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + 7;
        } else if (key === "pageup" || key === "pagedown") {
            var month = this.activeDate.getMonth() + (key === "pageup" ? -1 : 1);
            this.activeDate.setMonth(month, 1);
            date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
        } else if (key === "home") {
            date = 1;
        } else if (key === "end") {
            date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
        }
        this.activeDate.setDate(date);
    };
} ]).controller("UibMonthpickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    this.step = {
        years: 1
    };
    this.element = $element;
    this.init = function(ctrl) {
        angular.extend(ctrl, this);
        ctrl.refreshView();
    };
    this._refreshView = function() {
        var months = new Array(12), year = this.activeDate.getFullYear(), date;
        for (var i = 0; i < 12; i++) {
            date = new Date(this.activeDate);
            date.setFullYear(year, i, 1);
            months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
        scope.rows = this.split(months, this.monthColumns);
        scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
    };
    this.compare = function(date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth());
        var _date2 = new Date(date2.getFullYear(), date2.getMonth());
        _date1.setFullYear(date1.getFullYear());
        _date2.setFullYear(date2.getFullYear());
        return _date1 - _date2;
    };
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getMonth();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - this.monthColumns;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + this.monthColumns;
        } else if (key === "pageup" || key === "pagedown") {
            var year = this.activeDate.getFullYear() + (key === "pageup" ? -1 : 1);
            this.activeDate.setFullYear(year);
        } else if (key === "home") {
            date = 0;
        } else if (key === "end") {
            date = 11;
        }
        this.activeDate.setMonth(date);
    };
} ]).controller("UibYearpickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    var columns, range;
    this.element = $element;
    function getStartingYear(year) {
        return parseInt((year - 1) / range, 10) * range + 1;
    }
    this.yearpickerInit = function() {
        columns = this.yearColumns;
        range = this.yearRows * columns;
        this.step = {
            years: range
        };
    };
    this._refreshView = function() {
        var years = new Array(range), date;
        for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
            date = new Date(this.activeDate);
            date.setFullYear(start + i, 0, 1);
            years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.title = [ years[0].label, years[range - 1].label ].join(" - ");
        scope.rows = this.split(years, columns);
        scope.columns = columns;
    };
    this.compare = function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
    };
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getFullYear();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - columns;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + columns;
        } else if (key === "pageup" || key === "pagedown") {
            date += (key === "pageup" ? -1 : 1) * range;
        } else if (key === "home") {
            date = getStartingYear(this.activeDate.getFullYear());
        } else if (key === "end") {
            date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
        }
        this.activeDate.setFullYear(date);
    };
} ]).directive("uibDatepicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/datepicker.html";
        },
        scope: {
            datepickerOptions: "=?"
        },
        require: [ "uibDatepicker", "^ngModel" ],
        restrict: "A",
        controller: "UibDatepickerController",
        controllerAs: "datepicker",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            datepickerCtrl.init(ngModelCtrl);
        }
    };
}).directive("uibDaypicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/day.html";
        },
        require: [ "^uibDatepicker", "uibDaypicker" ],
        restrict: "A",
        controller: "UibDaypickerController",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], daypickerCtrl = ctrls[1];
            daypickerCtrl.init(datepickerCtrl);
        }
    };
}).directive("uibMonthpicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/month.html";
        },
        require: [ "^uibDatepicker", "uibMonthpicker" ],
        restrict: "A",
        controller: "UibMonthpickerController",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], monthpickerCtrl = ctrls[1];
            monthpickerCtrl.init(datepickerCtrl);
        }
    };
}).directive("uibYearpicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/year.html";
        },
        require: [ "^uibDatepicker", "uibYearpicker" ],
        restrict: "A",
        controller: "UibYearpickerController",
        link: function(scope, element, attrs, ctrls) {
            var ctrl = ctrls[0];
            angular.extend(ctrl, ctrls[1]);
            ctrl.yearpickerInit();
            ctrl.refreshView();
        }
    };
});

angular.module("ui.bootstrap.position", []).factory("$uibPosition", [ "$document", "$window", function($document, $window) {
    var SCROLLBAR_WIDTH;
    var BODY_SCROLLBAR_WIDTH;
    var OVERFLOW_REGEX = {
        normal: /(auto|scroll)/,
        hidden: /(auto|scroll|hidden)/
    };
    var PLACEMENT_REGEX = {
        auto: /\s?auto?\s?/i,
        primary: /^(top|bottom|left|right)$/,
        secondary: /^(top|bottom|left|right|center)$/,
        vertical: /^(top|bottom)$/
    };
    var BODY_REGEX = /(HTML|BODY)/;
    return {
        getRawNode: function(elem) {
            return elem.nodeName ? elem : elem[0] || elem;
        },
        parseStyle: function(value) {
            value = parseFloat(value);
            return isFinite(value) ? value : 0;
        },
        offsetParent: function(elem) {
            elem = this.getRawNode(elem);
            var offsetParent = elem.offsetParent || $document[0].documentElement;
            function isStaticPositioned(el) {
                return ($window.getComputedStyle(el).position || "static") === "static";
            }
            while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
                offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || $document[0].documentElement;
        },
        scrollbarWidth: function(isBody) {
            if (isBody) {
                if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
                    var bodyElem = $document.find("body");
                    bodyElem.addClass("uib-position-body-scrollbar-measure");
                    BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
                    BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
                    bodyElem.removeClass("uib-position-body-scrollbar-measure");
                }
                return BODY_SCROLLBAR_WIDTH;
            }
            if (angular.isUndefined(SCROLLBAR_WIDTH)) {
                var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
                $document.find("body").append(scrollElem);
                SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
                SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
                scrollElem.remove();
            }
            return SCROLLBAR_WIDTH;
        },
        scrollbarPadding: function(elem) {
            elem = this.getRawNode(elem);
            var elemStyle = $window.getComputedStyle(elem);
            var paddingRight = this.parseStyle(elemStyle.paddingRight);
            var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
            var scrollParent = this.scrollParent(elem, false, true);
            var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));
            return {
                scrollbarWidth: scrollbarWidth,
                widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
                right: paddingRight + scrollbarWidth,
                originalRight: paddingRight,
                heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
                bottom: paddingBottom + scrollbarWidth,
                originalBottom: paddingBottom
            };
        },
        isScrollable: function(elem, includeHidden) {
            elem = this.getRawNode(elem);
            var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
            var elemStyle = $window.getComputedStyle(elem);
            return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
        },
        scrollParent: function(elem, includeHidden, includeSelf) {
            elem = this.getRawNode(elem);
            var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
            var documentEl = $document[0].documentElement;
            var elemStyle = $window.getComputedStyle(elem);
            if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
                return elem;
            }
            var excludeStatic = elemStyle.position === "absolute";
            var scrollParent = elem.parentElement || documentEl;
            if (scrollParent === documentEl || elemStyle.position === "fixed") {
                return documentEl;
            }
            while (scrollParent.parentElement && scrollParent !== documentEl) {
                var spStyle = $window.getComputedStyle(scrollParent);
                if (excludeStatic && spStyle.position !== "static") {
                    excludeStatic = false;
                }
                if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
                    break;
                }
                scrollParent = scrollParent.parentElement;
            }
            return scrollParent;
        },
        position: function(elem, includeMagins) {
            elem = this.getRawNode(elem);
            var elemOffset = this.offset(elem);
            if (includeMagins) {
                var elemStyle = $window.getComputedStyle(elem);
                elemOffset.top -= this.parseStyle(elemStyle.marginTop);
                elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
            }
            var parent = this.offsetParent(elem);
            var parentOffset = {
                top: 0,
                left: 0
            };
            if (parent !== $document[0].documentElement) {
                parentOffset = this.offset(parent);
                parentOffset.top += parent.clientTop - parent.scrollTop;
                parentOffset.left += parent.clientLeft - parent.scrollLeft;
            }
            return {
                width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
                height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
                top: Math.round(elemOffset.top - parentOffset.top),
                left: Math.round(elemOffset.left - parentOffset.left)
            };
        },
        offset: function(elem) {
            elem = this.getRawNode(elem);
            var elemBCR = elem.getBoundingClientRect();
            return {
                width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
                height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
                top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
                left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
            };
        },
        viewportOffset: function(elem, useDocument, includePadding) {
            elem = this.getRawNode(elem);
            includePadding = includePadding !== false ? true : false;
            var elemBCR = elem.getBoundingClientRect();
            var offsetBCR = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            };
            var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
            var offsetParentBCR = offsetParent.getBoundingClientRect();
            offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
            offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
            if (offsetParent === $document[0].documentElement) {
                offsetBCR.top += $window.pageYOffset;
                offsetBCR.left += $window.pageXOffset;
            }
            offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
            offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;
            if (includePadding) {
                var offsetParentStyle = $window.getComputedStyle(offsetParent);
                offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
                offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
                offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
                offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
            }
            return {
                top: Math.round(elemBCR.top - offsetBCR.top),
                bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
                left: Math.round(elemBCR.left - offsetBCR.left),
                right: Math.round(offsetBCR.right - elemBCR.right)
            };
        },
        parsePlacement: function(placement) {
            var autoPlace = PLACEMENT_REGEX.auto.test(placement);
            if (autoPlace) {
                placement = placement.replace(PLACEMENT_REGEX.auto, "");
            }
            placement = placement.split("-");
            placement[0] = placement[0] || "top";
            if (!PLACEMENT_REGEX.primary.test(placement[0])) {
                placement[0] = "top";
            }
            placement[1] = placement[1] || "center";
            if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
                placement[1] = "center";
            }
            if (autoPlace) {
                placement[2] = true;
            } else {
                placement[2] = false;
            }
            return placement;
        },
        positionElements: function(hostElem, targetElem, placement, appendToBody) {
            hostElem = this.getRawNode(hostElem);
            targetElem = this.getRawNode(targetElem);
            var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop("offsetWidth");
            var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop("offsetHeight");
            placement = this.parsePlacement(placement);
            var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
            var targetElemPos = {
                top: 0,
                left: 0,
                placement: ""
            };
            if (placement[2]) {
                var viewportOffset = this.viewportOffset(hostElem, appendToBody);
                var targetElemStyle = $window.getComputedStyle(targetElem);
                var adjustedSize = {
                    width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
                    height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
                };
                placement[0] = placement[0] === "top" && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? "bottom" : placement[0] === "bottom" && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? "top" : placement[0] === "left" && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? "right" : placement[0] === "right" && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? "left" : placement[0];
                placement[1] = placement[1] === "top" && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? "bottom" : placement[1] === "bottom" && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? "top" : placement[1] === "left" && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? "right" : placement[1] === "right" && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? "left" : placement[1];
                if (placement[1] === "center") {
                    if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                        var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
                        if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
                            placement[1] = "left";
                        } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
                            placement[1] = "right";
                        }
                    } else {
                        var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
                        if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
                            placement[1] = "top";
                        } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
                            placement[1] = "bottom";
                        }
                    }
                }
            }
            switch (placement[0]) {
              case "top":
                targetElemPos.top = hostElemPos.top - targetHeight;
                break;

              case "bottom":
                targetElemPos.top = hostElemPos.top + hostElemPos.height;
                break;

              case "left":
                targetElemPos.left = hostElemPos.left - targetWidth;
                break;

              case "right":
                targetElemPos.left = hostElemPos.left + hostElemPos.width;
                break;
            }
            switch (placement[1]) {
              case "top":
                targetElemPos.top = hostElemPos.top;
                break;

              case "bottom":
                targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
                break;

              case "left":
                targetElemPos.left = hostElemPos.left;
                break;

              case "right":
                targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
                break;

              case "center":
                if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                    targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
                } else {
                    targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
                }
                break;
            }
            targetElemPos.top = Math.round(targetElemPos.top);
            targetElemPos.left = Math.round(targetElemPos.left);
            targetElemPos.placement = placement[1] === "center" ? placement[0] : placement[0] + "-" + placement[1];
            return targetElemPos;
        },
        adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
            if (placementClasses.indexOf("top") !== -1 && initialHeight !== currentHeight) {
                return {
                    top: containerPosition.top - currentHeight + "px"
                };
            }
        },
        positionArrow: function(elem, placement) {
            elem = this.getRawNode(elem);
            var innerElem = elem.querySelector(".tooltip-inner, .popover-inner");
            if (!innerElem) {
                return;
            }
            var isTooltip = angular.element(innerElem).hasClass("tooltip-inner");
            var arrowElem = isTooltip ? elem.querySelector(".tooltip-arrow") : elem.querySelector(".arrow");
            if (!arrowElem) {
                return;
            }
            var arrowCss = {
                top: "",
                bottom: "",
                left: "",
                right: ""
            };
            placement = this.parsePlacement(placement);
            if (placement[1] === "center") {
                angular.element(arrowElem).css(arrowCss);
                return;
            }
            var borderProp = "border-" + placement[0] + "-width";
            var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];
            var borderRadiusProp = "border-";
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                borderRadiusProp += placement[0] + "-" + placement[1];
            } else {
                borderRadiusProp += placement[1] + "-" + placement[0];
            }
            borderRadiusProp += "-radius";
            var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];
            switch (placement[0]) {
              case "top":
                arrowCss.bottom = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "bottom":
                arrowCss.top = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "left":
                arrowCss.right = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "right":
                arrowCss.left = isTooltip ? "0" : "-" + borderWidth;
                break;
            }
            arrowCss[placement[1]] = borderRadius;
            angular.element(arrowElem).css(arrowCss);
        }
    };
} ]);

angular.module("ui.bootstrap.datepickerPopup", [ "ui.bootstrap.datepicker", "ui.bootstrap.position" ]).value("$datepickerPopupLiteralWarning", true).constant("uibDatepickerPopupConfig", {
    altInputFormats: [],
    appendToBody: false,
    clearText: "Clear",
    closeOnDateSelection: true,
    closeText: "Done",
    currentText: "Today",
    datepickerPopup: "yyyy-MM-dd",
    datepickerPopupTemplateUrl: "uib/template/datepickerPopup/popup.html",
    datepickerTemplateUrl: "uib/template/datepicker/datepicker.html",
    html5Types: {
        date: "yyyy-MM-dd",
        "datetime-local": "yyyy-MM-ddTHH:mm:ss.sss",
        month: "yyyy-MM"
    },
    onOpenFocus: true,
    showButtonBar: true,
    placement: "auto bottom-left"
}).controller("UibDatepickerPopupController", [ "$scope", "$element", "$attrs", "$compile", "$log", "$parse", "$window", "$document", "$rootScope", "$uibPosition", "dateFilter", "uibDateParser", "uibDatepickerPopupConfig", "$timeout", "uibDatepickerConfig", "$datepickerPopupLiteralWarning", function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
    var cache = {}, isHtml5DateInput = false;
    var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus, datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl, ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];
    this.init = function(_ngModel_) {
        ngModel = _ngModel_;
        ngModelOptions = extractOptions(ngModel);
        closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ? $scope.$parent.$eval($attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection;
        appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ? $scope.$parent.$eval($attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;
        onOpenFocus = angular.isDefined($attrs.onOpenFocus) ? $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
        datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ? $attrs.datepickerPopupTemplateUrl : datepickerPopupConfig.datepickerPopupTemplateUrl;
        datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ? $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
        altInputFormats = angular.isDefined($attrs.altInputFormats) ? $scope.$parent.$eval($attrs.altInputFormats) : datepickerPopupConfig.altInputFormats;
        $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ? $scope.$parent.$eval($attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;
        if (datepickerPopupConfig.html5Types[$attrs.type]) {
            dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
            isHtml5DateInput = true;
        } else {
            dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
            $attrs.$observe("uibDatepickerPopup", function(value, oldValue) {
                var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
                if (newDateFormat !== dateFormat) {
                    dateFormat = newDateFormat;
                    ngModel.$modelValue = null;
                    if (!dateFormat) {
                        throw new Error("uibDatepickerPopup must have a date format specified.");
                    }
                }
            });
        }
        if (!dateFormat) {
            throw new Error("uibDatepickerPopup must have a date format specified.");
        }
        if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
            throw new Error("HTML5 date input types do not support custom formats.");
        }
        popupEl = angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>");
        popupEl.attr({
            "ng-model": "date",
            "ng-change": "dateSelection(date)",
            "template-url": datepickerPopupTemplateUrl
        });
        datepickerEl = angular.element(popupEl.children()[0]);
        datepickerEl.attr("template-url", datepickerTemplateUrl);
        if (!$scope.datepickerOptions) {
            $scope.datepickerOptions = {};
        }
        if (isHtml5DateInput) {
            if ($attrs.type === "month") {
                $scope.datepickerOptions.datepickerMode = "month";
                $scope.datepickerOptions.minMode = "month";
            }
        }
        datepickerEl.attr("datepicker-options", "datepickerOptions");
        if (!isHtml5DateInput) {
            ngModel.$$parserName = "date";
            ngModel.$validators.date = validator;
            ngModel.$parsers.unshift(parseDate);
            ngModel.$formatters.push(function(value) {
                if (ngModel.$isEmpty(value)) {
                    $scope.date = value;
                    return value;
                }
                if (angular.isNumber(value)) {
                    value = new Date(value);
                }
                $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption("timezone"));
                return dateParser.filter($scope.date, dateFormat);
            });
        } else {
            ngModel.$formatters.push(function(value) {
                $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption("timezone"));
                return value;
            });
        }
        ngModel.$viewChangeListeners.push(function() {
            $scope.date = parseDateString(ngModel.$viewValue);
        });
        $element.on("keydown", inputKeydownBind);
        $popup = $compile(popupEl)($scope);
        popupEl.remove();
        if (appendToBody) {
            $document.find("body").append($popup);
        } else {
            $element.after($popup);
        }
        $scope.$on("$destroy", function() {
            if ($scope.isOpen === true) {
                if (!$rootScope.$$phase) {
                    $scope.$apply(function() {
                        $scope.isOpen = false;
                    });
                }
            }
            $popup.remove();
            $element.off("keydown", inputKeydownBind);
            $document.off("click", documentClickBind);
            if (scrollParentEl) {
                scrollParentEl.off("scroll", positionPopup);
            }
            angular.element($window).off("resize", positionPopup);
            while (watchListeners.length) {
                watchListeners.shift()();
            }
        });
    };
    $scope.getText = function(key) {
        return $scope[key + "Text"] || datepickerPopupConfig[key + "Text"];
    };
    $scope.isDisabled = function(date) {
        if (date === "today") {
            date = dateParser.fromTimezone(new Date(), ngModelOptions.getOption("timezone"));
        }
        var dates = {};
        angular.forEach([ "minDate", "maxDate" ], function(key) {
            if (!$scope.datepickerOptions[key]) {
                dates[key] = null;
            } else if (angular.isDate($scope.datepickerOptions[key])) {
                dates[key] = new Date($scope.datepickerOptions[key]);
            } else {
                if ($datepickerPopupLiteralWarning) {
                    $log.warn("Literal date support has been deprecated, please switch to date object usage");
                }
                dates[key] = new Date(dateFilter($scope.datepickerOptions[key], "medium"));
            }
        });
        return $scope.datepickerOptions && dates.minDate && $scope.compare(date, dates.minDate) < 0 || dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
    };
    $scope.compare = function(date1, date2) {
        return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    };
    $scope.dateSelection = function(dt) {
        $scope.date = dt;
        var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null;
        $element.val(date);
        ngModel.$setViewValue(date);
        if (closeOnDateSelection) {
            $scope.isOpen = false;
            $element[0].focus();
        }
    };
    $scope.keydown = function(evt) {
        if (evt.which === 27) {
            evt.stopPropagation();
            $scope.isOpen = false;
            $element[0].focus();
        }
    };
    $scope.select = function(date, evt) {
        evt.stopPropagation();
        if (date === "today") {
            var today = new Date();
            if (angular.isDate($scope.date)) {
                date = new Date($scope.date);
                date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
            } else {
                date = dateParser.fromTimezone(today, ngModelOptions.getOption("timezone"));
                date.setHours(0, 0, 0, 0);
            }
        }
        $scope.dateSelection(date);
    };
    $scope.close = function(evt) {
        evt.stopPropagation();
        $scope.isOpen = false;
        $element[0].focus();
    };
    $scope.disabled = angular.isDefined($attrs.disabled) || false;
    if ($attrs.ngDisabled) {
        watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
            $scope.disabled = disabled;
        }));
    }
    $scope.$watch("isOpen", function(value) {
        if (value) {
            if (!$scope.disabled) {
                $timeout(function() {
                    positionPopup();
                    if (onOpenFocus) {
                        $scope.$broadcast("uib:datepicker.focus");
                    }
                    $document.on("click", documentClickBind);
                    var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
                    if (appendToBody || $position.parsePlacement(placement)[2]) {
                        scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
                        if (scrollParentEl) {
                            scrollParentEl.on("scroll", positionPopup);
                        }
                    } else {
                        scrollParentEl = null;
                    }
                    angular.element($window).on("resize", positionPopup);
                }, 0, false);
            } else {
                $scope.isOpen = false;
            }
        } else {
            $document.off("click", documentClickBind);
            if (scrollParentEl) {
                scrollParentEl.off("scroll", positionPopup);
            }
            angular.element($window).off("resize", positionPopup);
        }
    });
    function cameltoDash(string) {
        return string.replace(/([A-Z])/g, function($1) {
            return "-" + $1.toLowerCase();
        });
    }
    function parseDateString(viewValue) {
        var date = dateParser.parse(viewValue, dateFormat, $scope.date);
        if (isNaN(date)) {
            for (var i = 0; i < altInputFormats.length; i++) {
                date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
                if (!isNaN(date)) {
                    return date;
                }
            }
        }
        return date;
    }
    function parseDate(viewValue) {
        if (angular.isNumber(viewValue)) {
            viewValue = new Date(viewValue);
        }
        if (!viewValue) {
            return null;
        }
        if (angular.isDate(viewValue) && !isNaN(viewValue)) {
            return viewValue;
        }
        if (angular.isString(viewValue)) {
            var date = parseDateString(viewValue);
            if (!isNaN(date)) {
                return dateParser.toTimezone(date, ngModelOptions.getOption("timezone"));
            }
        }
        return ngModelOptions.getOption("allowInvalid") ? viewValue : undefined;
    }
    function validator(modelValue, viewValue) {
        var value = modelValue || viewValue;
        if (!$attrs.ngRequired && !value) {
            return true;
        }
        if (angular.isNumber(value)) {
            value = new Date(value);
        }
        if (!value) {
            return true;
        }
        if (angular.isDate(value) && !isNaN(value)) {
            return true;
        }
        if (angular.isString(value)) {
            return !isNaN(parseDateString(value));
        }
        return false;
    }
    function documentClickBind(event) {
        if (!$scope.isOpen && $scope.disabled) {
            return;
        }
        var popup = $popup[0];
        var dpContainsTarget = $element[0].contains(event.target);
        var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
        if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
            $scope.$apply(function() {
                $scope.isOpen = false;
            });
        }
    }
    function inputKeydownBind(evt) {
        if (evt.which === 27 && $scope.isOpen) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.$apply(function() {
                $scope.isOpen = false;
            });
            $element[0].focus();
        } else if (evt.which === 40 && !$scope.isOpen) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.$apply(function() {
                $scope.isOpen = true;
            });
        }
    }
    function positionPopup() {
        if ($scope.isOpen) {
            var dpElement = angular.element($popup[0].querySelector(".uib-datepicker-popup"));
            var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
            var position = $position.positionElements($element, dpElement, placement, appendToBody);
            dpElement.css({
                top: position.top + "px",
                left: position.left + "px"
            });
            if (dpElement.hasClass("uib-position-measure")) {
                dpElement.removeClass("uib-position-measure");
            }
        }
    }
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = angular.isObject(ngModelCtrl.$options) ? ngModelCtrl.$options : {
                timezone: null
            };
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            ngModelOptions = ngModelCtrl.$options;
        }
        return ngModelOptions;
    }
    $scope.$on("uib:datepicker.mode", function() {
        $timeout(positionPopup, 0, false);
    });
} ]).directive("uibDatepickerPopup", function() {
    return {
        require: [ "ngModel", "uibDatepickerPopup" ],
        controller: "UibDatepickerPopupController",
        scope: {
            datepickerOptions: "=?",
            isOpen: "=?",
            currentText: "@",
            clearText: "@",
            closeText: "@"
        },
        link: function(scope, element, attrs, ctrls) {
            var ngModel = ctrls[0], ctrl = ctrls[1];
            ctrl.init(ngModel);
        }
    };
}).directive("uibDatepickerPopupWrap", function() {
    return {
        restrict: "A",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepickerPopup/popup.html";
        }
    };
});

angular.module("ui.bootstrap.debounce", []).factory("$$debounce", [ "$timeout", function($timeout) {
    return function(callback, debounceTime) {
        var timeoutPromise;
        return function() {
            var self = this;
            var args = Array.prototype.slice.call(arguments);
            if (timeoutPromise) {
                $timeout.cancel(timeoutPromise);
            }
            timeoutPromise = $timeout(function() {
                callback.apply(self, args);
            }, debounceTime);
        };
    };
} ]);

angular.module("ui.bootstrap.multiMap", []).factory("$$multiMap", function() {
    return {
        createNew: function() {
            var map = {};
            return {
                entries: function() {
                    return Object.keys(map).map(function(key) {
                        return {
                            key: key,
                            value: map[key]
                        };
                    });
                },
                get: function(key) {
                    return map[key];
                },
                hasKey: function(key) {
                    return !!map[key];
                },
                keys: function() {
                    return Object.keys(map);
                },
                put: function(key, value) {
                    if (!map[key]) {
                        map[key] = [];
                    }
                    map[key].push(value);
                },
                remove: function(key, value) {
                    var values = map[key];
                    if (!values) {
                        return;
                    }
                    var idx = values.indexOf(value);
                    if (idx !== -1) {
                        values.splice(idx, 1);
                    }
                    if (!values.length) {
                        delete map[key];
                    }
                }
            };
        }
    };
});

angular.module("ui.bootstrap.dropdown", [ "ui.bootstrap.multiMap", "ui.bootstrap.position" ]).constant("uibDropdownConfig", {
    appendToOpenClass: "uib-dropdown-open",
    openClass: "open"
}).service("uibDropdownService", [ "$document", "$rootScope", "$$multiMap", function($document, $rootScope, $$multiMap) {
    var openScope = null;
    var openedContainers = $$multiMap.createNew();
    this.isOnlyOpen = function(dropdownScope, appendTo) {
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var openDropdown = openedDropdowns.reduce(function(toClose, dropdown) {
                if (dropdown.scope === dropdownScope) {
                    return dropdown;
                }
                return toClose;
            }, {});
            if (openDropdown) {
                return openedDropdowns.length === 1;
            }
        }
        return false;
    };
    this.open = function(dropdownScope, element, appendTo) {
        if (!openScope) {
            $document.on("click", closeDropdown);
        }
        if (openScope && openScope !== dropdownScope) {
            openScope.isOpen = false;
        }
        openScope = dropdownScope;
        if (!appendTo) {
            return;
        }
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var openedScopes = openedDropdowns.map(function(dropdown) {
                return dropdown.scope;
            });
            if (openedScopes.indexOf(dropdownScope) === -1) {
                openedContainers.put(appendTo, {
                    scope: dropdownScope
                });
            }
        } else {
            openedContainers.put(appendTo, {
                scope: dropdownScope
            });
        }
    };
    this.close = function(dropdownScope, element, appendTo) {
        if (openScope === dropdownScope) {
            $document.off("click", closeDropdown);
            $document.off("keydown", this.keybindFilter);
            openScope = null;
        }
        if (!appendTo) {
            return;
        }
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var dropdownToClose = openedDropdowns.reduce(function(toClose, dropdown) {
                if (dropdown.scope === dropdownScope) {
                    return dropdown;
                }
                return toClose;
            }, {});
            if (dropdownToClose) {
                openedContainers.remove(appendTo, dropdownToClose);
            }
        }
    };
    var closeDropdown = function(evt) {
        if (!openScope || !openScope.isOpen) {
            return;
        }
        if (evt && openScope.getAutoClose() === "disabled") {
            return;
        }
        if (evt && evt.which === 3) {
            return;
        }
        var toggleElement = openScope.getToggleElement();
        if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
            return;
        }
        var dropdownElement = openScope.getDropdownElement();
        if (evt && openScope.getAutoClose() === "outsideClick" && dropdownElement && dropdownElement[0].contains(evt.target)) {
            return;
        }
        openScope.focusToggleElement();
        openScope.isOpen = false;
        if (!$rootScope.$$phase) {
            openScope.$apply();
        }
    };
    this.keybindFilter = function(evt) {
        if (!openScope) {
            return;
        }
        var dropdownElement = openScope.getDropdownElement();
        var toggleElement = openScope.getToggleElement();
        var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
        var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
        if (evt.which === 27) {
            evt.stopPropagation();
            openScope.focusToggleElement();
            closeDropdown();
        } else if (openScope.isKeynavEnabled() && [ 38, 40 ].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
            evt.preventDefault();
            evt.stopPropagation();
            openScope.focusDropdownEntry(evt.which);
        }
    };
} ]).controller("UibDropdownController", [ "$scope", "$element", "$attrs", "$parse", "uibDropdownConfig", "uibDropdownService", "$animate", "$uibPosition", "$document", "$compile", "$templateRequest", function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
    var self = this, scope = $scope.$new(), templateScope, appendToOpenClass = dropdownConfig.appendToOpenClass, openClass = dropdownConfig.openClass, getIsOpen, setIsOpen = angular.noop, toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop, keynavEnabled = false, selectedOption = null, body = $document.find("body");
    $element.addClass("dropdown");
    this.init = function() {
        if ($attrs.isOpen) {
            getIsOpen = $parse($attrs.isOpen);
            setIsOpen = getIsOpen.assign;
            $scope.$watch(getIsOpen, function(value) {
                scope.isOpen = !!value;
            });
        }
        keynavEnabled = angular.isDefined($attrs.keyboardNav);
    };
    this.toggle = function(open) {
        scope.isOpen = arguments.length ? !!open : !scope.isOpen;
        if (angular.isFunction(setIsOpen)) {
            setIsOpen(scope, scope.isOpen);
        }
        return scope.isOpen;
    };
    this.isOpen = function() {
        return scope.isOpen;
    };
    scope.getToggleElement = function() {
        return self.toggleElement;
    };
    scope.getAutoClose = function() {
        return $attrs.autoClose || "always";
    };
    scope.getElement = function() {
        return $element;
    };
    scope.isKeynavEnabled = function() {
        return keynavEnabled;
    };
    scope.focusDropdownEntry = function(keyCode) {
        var elems = self.dropdownMenu ? angular.element(self.dropdownMenu).find("a") : $element.find("ul").eq(0).find("a");
        switch (keyCode) {
          case 40:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = 0;
                } else {
                    self.selectedOption = self.selectedOption === elems.length - 1 ? self.selectedOption : self.selectedOption + 1;
                }
                break;
            }

          case 38:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = elems.length - 1;
                } else {
                    self.selectedOption = self.selectedOption === 0 ? 0 : self.selectedOption - 1;
                }
                break;
            }
        }
        elems[self.selectedOption].focus();
    };
    scope.getDropdownElement = function() {
        return self.dropdownMenu;
    };
    scope.focusToggleElement = function() {
        if (self.toggleElement) {
            self.toggleElement[0].focus();
        }
    };
    function removeDropdownMenu() {
        $element.append(self.dropdownMenu);
    }
    scope.$watch("isOpen", function(isOpen, wasOpen) {
        var appendTo = null, appendToBody = false;
        if (angular.isDefined($attrs.dropdownAppendTo)) {
            var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
            if (appendToEl) {
                appendTo = angular.element(appendToEl);
            }
        }
        if (angular.isDefined($attrs.dropdownAppendToBody)) {
            var appendToBodyValue = $parse($attrs.dropdownAppendToBody)(scope);
            if (appendToBodyValue !== false) {
                appendToBody = true;
            }
        }
        if (appendToBody && !appendTo) {
            appendTo = body;
        }
        if (appendTo && self.dropdownMenu) {
            if (isOpen) {
                appendTo.append(self.dropdownMenu);
                $element.on("$destroy", removeDropdownMenu);
            } else {
                $element.off("$destroy", removeDropdownMenu);
                removeDropdownMenu();
            }
        }
        if (appendTo && self.dropdownMenu) {
            var pos = $position.positionElements($element, self.dropdownMenu, "bottom-left", true), css, rightalign, scrollbarPadding, scrollbarWidth = 0;
            css = {
                top: pos.top + "px",
                display: isOpen ? "block" : "none"
            };
            rightalign = self.dropdownMenu.hasClass("dropdown-menu-right");
            if (!rightalign) {
                css.left = pos.left + "px";
                css.right = "auto";
            } else {
                css.left = "auto";
                scrollbarPadding = $position.scrollbarPadding(appendTo);
                if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                    scrollbarWidth = scrollbarPadding.scrollbarWidth;
                }
                css.right = window.innerWidth - scrollbarWidth - (pos.left + $element.prop("offsetWidth")) + "px";
            }
            if (!appendToBody) {
                var appendOffset = $position.offset(appendTo);
                css.top = pos.top - appendOffset.top + "px";
                if (!rightalign) {
                    css.left = pos.left - appendOffset.left + "px";
                } else {
                    css.right = window.innerWidth - (pos.left - appendOffset.left + $element.prop("offsetWidth")) + "px";
                }
            }
            self.dropdownMenu.css(css);
        }
        var openContainer = appendTo ? appendTo : $element;
        var dropdownOpenClass = appendTo ? appendToOpenClass : openClass;
        var hasOpenClass = openContainer.hasClass(dropdownOpenClass);
        var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo);
        if (hasOpenClass === !isOpen) {
            var toggleClass;
            if (appendTo) {
                toggleClass = !isOnlyOpen ? "addClass" : "removeClass";
            } else {
                toggleClass = isOpen ? "addClass" : "removeClass";
            }
            $animate[toggleClass](openContainer, dropdownOpenClass).then(function() {
                if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
                    toggleInvoker($scope, {
                        open: !!isOpen
                    });
                }
            });
        }
        if (isOpen) {
            if (self.dropdownMenuTemplateUrl) {
                $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
                    templateScope = scope.$new();
                    $compile(tplContent.trim())(templateScope, function(dropdownElement) {
                        var newEl = dropdownElement;
                        self.dropdownMenu.replaceWith(newEl);
                        self.dropdownMenu = newEl;
                        $document.on("keydown", uibDropdownService.keybindFilter);
                    });
                });
            } else {
                $document.on("keydown", uibDropdownService.keybindFilter);
            }
            scope.focusToggleElement();
            uibDropdownService.open(scope, $element, appendTo);
        } else {
            uibDropdownService.close(scope, $element, appendTo);
            if (self.dropdownMenuTemplateUrl) {
                if (templateScope) {
                    templateScope.$destroy();
                }
                var newEl = angular.element('<ul class="dropdown-menu"></ul>');
                self.dropdownMenu.replaceWith(newEl);
                self.dropdownMenu = newEl;
            }
            self.selectedOption = null;
        }
        if (angular.isFunction(setIsOpen)) {
            setIsOpen($scope, isOpen);
        }
    });
} ]).directive("uibDropdown", function() {
    return {
        controller: "UibDropdownController",
        link: function(scope, element, attrs, dropdownCtrl) {
            dropdownCtrl.init();
        }
    };
}).directive("uibDropdownMenu", function() {
    return {
        restrict: "A",
        require: "?^uibDropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
                return;
            }
            element.addClass("dropdown-menu");
            var tplUrl = attrs.templateUrl;
            if (tplUrl) {
                dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
            }
            if (!dropdownCtrl.dropdownMenu) {
                dropdownCtrl.dropdownMenu = element;
            }
        }
    };
}).directive("uibDropdownToggle", function() {
    return {
        require: "?^uibDropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl) {
                return;
            }
            element.addClass("dropdown-toggle");
            dropdownCtrl.toggleElement = element;
            var toggleDropdown = function(event) {
                event.preventDefault();
                if (!element.hasClass("disabled") && !attrs.disabled) {
                    scope.$apply(function() {
                        dropdownCtrl.toggle();
                    });
                }
            };
            element.on("click", toggleDropdown);
            element.attr({
                "aria-haspopup": true,
                "aria-expanded": false
            });
            scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
                element.attr("aria-expanded", !!isOpen);
            });
            scope.$on("$destroy", function() {
                element.off("click", toggleDropdown);
            });
        }
    };
});

angular.module("ui.bootstrap.stackedMap", []).factory("$$stackedMap", function() {
    return {
        createNew: function() {
            var stack = [];
            return {
                add: function(key, value) {
                    stack.push({
                        key: key,
                        value: value
                    });
                },
                get: function(key) {
                    for (var i = 0; i < stack.length; i++) {
                        if (key === stack[i].key) {
                            return stack[i];
                        }
                    }
                },
                keys: function() {
                    var keys = [];
                    for (var i = 0; i < stack.length; i++) {
                        keys.push(stack[i].key);
                    }
                    return keys;
                },
                top: function() {
                    return stack[stack.length - 1];
                },
                remove: function(key) {
                    var idx = -1;
                    for (var i = 0; i < stack.length; i++) {
                        if (key === stack[i].key) {
                            idx = i;
                            break;
                        }
                    }
                    return stack.splice(idx, 1)[0];
                },
                removeTop: function() {
                    return stack.pop();
                },
                length: function() {
                    return stack.length;
                }
            };
        }
    };
});

angular.module("ui.bootstrap.modal", [ "ui.bootstrap.multiMap", "ui.bootstrap.stackedMap", "ui.bootstrap.position" ]).provider("$uibResolve", function() {
    var resolve = this;
    this.resolver = null;
    this.setResolver = function(resolver) {
        this.resolver = resolver;
    };
    this.$get = [ "$injector", "$q", function($injector, $q) {
        var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
        return {
            resolve: function(invocables, locals, parent, self) {
                if (resolver) {
                    return resolver.resolve(invocables, locals, parent, self);
                }
                var promises = [];
                angular.forEach(invocables, function(value) {
                    if (angular.isFunction(value) || angular.isArray(value)) {
                        promises.push($q.resolve($injector.invoke(value)));
                    } else if (angular.isString(value)) {
                        promises.push($q.resolve($injector.get(value)));
                    } else {
                        promises.push($q.resolve(value));
                    }
                });
                return $q.all(promises).then(function(resolves) {
                    var resolveObj = {};
                    var resolveIter = 0;
                    angular.forEach(invocables, function(value, key) {
                        resolveObj[key] = resolves[resolveIter++];
                    });
                    return resolveObj;
                });
            }
        };
    } ];
}).directive("uibModalBackdrop", [ "$animate", "$injector", "$uibModalStack", function($animate, $injector, $modalStack) {
    return {
        restrict: "A",
        compile: function(tElement, tAttrs) {
            tElement.addClass(tAttrs.backdropClass);
            return linkFn;
        }
    };
    function linkFn(scope, element, attrs) {
        if (attrs.modalInClass) {
            $animate.addClass(element, attrs.modalInClass);
            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                var done = setIsAsync();
                if (scope.modalOptions.animation) {
                    $animate.removeClass(element, attrs.modalInClass).then(done);
                } else {
                    done();
                }
            });
        }
    }
} ]).directive("uibModalWindow", [ "$uibModalStack", "$q", "$animateCss", "$document", function($modalStack, $q, $animateCss, $document) {
    return {
        scope: {
            index: "@"
        },
        restrict: "A",
        transclude: true,
        templateUrl: function(tElement, tAttrs) {
            return tAttrs.templateUrl || "uib/template/modal/window.html";
        },
        link: function(scope, element, attrs) {
            element.addClass(attrs.windowTopClass || "");
            scope.size = attrs.size;
            scope.close = function(evt) {
                var modal = $modalStack.getTop();
                if (modal && modal.value.backdrop && modal.value.backdrop !== "static" && evt.target === evt.currentTarget) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    $modalStack.dismiss(modal.key, "backdrop click");
                }
            };
            element.on("click", scope.close);
            scope.$isRendered = true;
            var modalRenderDeferObj = $q.defer();
            scope.$$postDigest(function() {
                modalRenderDeferObj.resolve();
            });
            modalRenderDeferObj.promise.then(function() {
                var animationPromise = null;
                if (attrs.modalInClass) {
                    animationPromise = $animateCss(element, {
                        addClass: attrs.modalInClass
                    }).start();
                    scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                        var done = setIsAsync();
                        $animateCss(element, {
                            removeClass: attrs.modalInClass
                        }).start().then(done);
                    });
                }
                $q.when(animationPromise).then(function() {
                    var modal = $modalStack.getTop();
                    if (modal) {
                        $modalStack.modalRendered(modal.key);
                    }
                    if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
                        var inputWithAutofocus = element[0].querySelector("[autofocus]");
                        if (inputWithAutofocus) {
                            inputWithAutofocus.focus();
                        } else {
                            element[0].focus();
                        }
                    }
                });
            });
        }
    };
} ]).directive("uibModalAnimationClass", function() {
    return {
        compile: function(tElement, tAttrs) {
            if (tAttrs.modalAnimation) {
                tElement.addClass(tAttrs.uibModalAnimationClass);
            }
        }
    };
}).directive("uibModalTransclude", [ "$animate", function($animate) {
    return {
        link: function(scope, element, attrs, controller, transclude) {
            transclude(scope.$parent, function(clone) {
                element.empty();
                $animate.enter(clone, element);
            });
        }
    };
} ]).factory("$uibModalStack", [ "$animate", "$animateCss", "$document", "$compile", "$rootScope", "$q", "$$multiMap", "$$stackedMap", "$uibPosition", function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
    var OPENED_MODAL_CLASS = "modal-open";
    var backdropDomEl, backdropScope;
    var openedWindows = $$stackedMap.createNew();
    var openedClasses = $$multiMap.createNew();
    var $modalStack = {
        NOW_CLOSING_EVENT: "modal.stack.now-closing"
    };
    var topModalIndex = 0;
    var previousTopOpenedModal = null;
    var ARIA_HIDDEN_ATTRIBUTE_NAME = "data-bootstrap-modal-aria-hidden-count";
    var tabbableSelector = "a[href], area[href], input:not([disabled]):not([tabindex='-1']), " + "button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), " + "iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]";
    var scrollbarPadding;
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name) {
        var separator = "-";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    function isVisible(element) {
        return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
    }
    function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
            if (openedWindows.get(opened[i]).value.backdrop) {
                topBackdropIndex = i;
            }
        }
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
            topBackdropIndex = topModalIndex;
        }
        return topBackdropIndex;
    }
    $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
            backdropScope.index = newBackdropIndex;
        }
    });
    function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value;
        var appendToElement = modalWindow.appendTo;
        openedWindows.remove(modalInstance);
        previousTopOpenedModal = openedWindows.top();
        if (previousTopOpenedModal) {
            topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr("index"), 10);
        }
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
            var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
            openedClasses.remove(modalBodyClass, modalInstance);
            var areAnyOpen = openedClasses.hasKey(modalBodyClass);
            appendToElement.toggleClass(modalBodyClass, areAnyOpen);
            if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                if (scrollbarPadding.originalRight) {
                    appendToElement.css({
                        paddingRight: scrollbarPadding.originalRight + "px"
                    });
                } else {
                    appendToElement.css({
                        paddingRight: ""
                    });
                }
                scrollbarPadding = null;
            }
            toggleTopWindowClass(true);
        }, modalWindow.closedDeferred);
        checkRemoveBackdrop();
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
            elementToReceiveFocus.focus();
        } else if (appendToElement.focus) {
            appendToElement.focus();
        }
    }
    function toggleTopWindowClass(toggleSwitch) {
        var modalWindow;
        if (openedWindows.length() > 0) {
            modalWindow = openedWindows.top().value;
            modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || "", toggleSwitch);
        }
    }
    function checkRemoveBackdrop() {
        if (backdropDomEl && backdropIndex() === -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, function() {
                backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
        }
    }
    function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
            if (!asyncDeferred) {
                asyncDeferred = $q.defer();
                asyncPromise = asyncDeferred.promise;
            }
            return function asyncDone() {
                asyncDeferred.resolve();
            };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);
        return $q.when(asyncPromise).then(afterAnimating);
        function afterAnimating() {
            if (afterAnimating.done) {
                return;
            }
            afterAnimating.done = true;
            $animate.leave(domEl).then(function() {
                if (done) {
                    done();
                }
                domEl.remove();
                if (closedDeferred) {
                    closedDeferred.resolve();
                }
            });
            scope.$destroy();
        }
    }
    $document.on("keydown", keydownListener);
    $rootScope.$on("$destroy", function() {
        $document.off("keydown", keydownListener);
    });
    function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
            return evt;
        }
        var modal = openedWindows.top();
        if (modal) {
            switch (evt.which) {
              case 27:
                {
                    if (modal.value.keyboard) {
                        evt.preventDefault();
                        $rootScope.$apply(function() {
                            $modalStack.dismiss(modal.key, "escape key press");
                        });
                    }
                    break;
                }

              case 9:
                {
                    var list = $modalStack.loadFocusElementList(modal);
                    var focusChanged = false;
                    if (evt.shiftKey) {
                        if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
                            focusChanged = $modalStack.focusLastFocusableElement(list);
                        }
                    } else {
                        if ($modalStack.isFocusInLastItem(evt, list)) {
                            focusChanged = $modalStack.focusFirstFocusableElement(list);
                        }
                    }
                    if (focusChanged) {
                        evt.preventDefault();
                        evt.stopPropagation();
                    }
                    break;
                }
            }
        }
    }
    $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement, modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;
        toggleTopWindowClass(false);
        previousTopOpenedModal = openedWindows.top();
        openedWindows.add(modalInstance, {
            deferred: modal.deferred,
            renderDeferred: modal.renderDeferred,
            closedDeferred: modal.closedDeferred,
            modalScope: modal.scope,
            backdrop: modal.backdrop,
            keyboard: modal.keyboard,
            openedClass: modal.openedClass,
            windowTopClass: modal.windowTopClass,
            animation: modal.animation,
            appendTo: modal.appendTo
        });
        openedClasses.put(modalBodyClass, modalInstance);
        var appendToElement = modal.appendTo, currBackdropIndex = backdropIndex();
        if (currBackdropIndex >= 0 && !backdropDomEl) {
            backdropScope = $rootScope.$new(true);
            backdropScope.modalOptions = modal;
            backdropScope.index = currBackdropIndex;
            backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
            backdropDomEl.attr({
                class: "modal-backdrop",
                "ng-style": "{'z-index': 1040 + (index && 1 || 0) + index*10}",
                "uib-modal-animation-class": "fade",
                "modal-in-class": "in"
            });
            if (modal.backdropClass) {
                backdropDomEl.addClass(modal.backdropClass);
            }
            if (modal.animation) {
                backdropDomEl.attr("modal-animation", "true");
            }
            $compile(backdropDomEl)(backdropScope);
            $animate.enter(backdropDomEl, appendToElement);
            if ($uibPosition.isScrollable(appendToElement)) {
                scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
                if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                    appendToElement.css({
                        paddingRight: scrollbarPadding.right + "px"
                    });
                }
            }
        }
        var content;
        if (modal.component) {
            content = document.createElement(snake_case(modal.component.name));
            content = angular.element(content);
            content.attr({
                resolve: "$resolve",
                "modal-instance": "$uibModalInstance",
                close: "$close($value)",
                dismiss: "$dismiss($value)"
            });
        } else {
            content = modal.content;
        }
        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr("index"), 10) + 1 : 0;
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
        angularDomEl.attr({
            class: "modal",
            "template-url": modal.windowTemplateUrl,
            "window-top-class": modal.windowTopClass,
            role: "dialog",
            "aria-labelledby": modal.ariaLabelledBy,
            "aria-describedby": modal.ariaDescribedBy,
            size: modal.size,
            index: topModalIndex,
            animate: "animate",
            "ng-style": "{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",
            tabindex: -1,
            "uib-modal-animation-class": "fade",
            "modal-in-class": "in"
        }).append(content);
        if (modal.windowClass) {
            angularDomEl.addClass(modal.windowClass);
        }
        if (modal.animation) {
            angularDomEl.attr("modal-animation", "true");
        }
        appendToElement.addClass(modalBodyClass);
        if (modal.scope) {
            modal.scope.$$topModalIndex = topModalIndex;
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);
        openedWindows.top().value.modalDomEl = angularDomEl;
        openedWindows.top().value.modalOpener = modalOpener;
        applyAriaHidden(angularDomEl);
        function applyAriaHidden(el) {
            if (!el || el[0].tagName === "BODY") {
                return;
            }
            getSiblings(el).forEach(function(sibling) {
                var elemIsAlreadyHidden = sibling.getAttribute("aria-hidden") === "true", ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);
                if (!ariaHiddenCount) {
                    ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
                }
                sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
                sibling.setAttribute("aria-hidden", "true");
            });
            return applyAriaHidden(el.parent());
            function getSiblings(el) {
                var children = el.parent() ? el.parent().children() : [];
                return Array.prototype.filter.call(children, function(child) {
                    return child !== el[0];
                });
            }
        }
    };
    function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast("modal.closing", resultOrReason, closing).defaultPrevented;
    }
    function unhideBackgroundElements() {
        Array.prototype.forEach.call(document.querySelectorAll("[" + ARIA_HIDDEN_ATTRIBUTE_NAME + "]"), function(hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10), newHiddenCount = ariaHiddenCount - 1;
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);
            if (!newHiddenCount) {
                hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
                hiddenEl.removeAttribute("aria-hidden");
            }
        });
    }
    $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.resolve(result);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.reject(reason);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
            topModal = this.getTop();
        }
    };
    $modalStack.getTop = function() {
        return openedWindows.top();
    };
    $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
            modalWindow.value.renderDeferred.resolve();
        }
    };
    $modalStack.focusFirstFocusableElement = function(list) {
        if (list.length > 0) {
            list[0].focus();
            return true;
        }
        return false;
    };
    $modalStack.focusLastFocusableElement = function(list) {
        if (list.length > 0) {
            list[list.length - 1].focus();
            return true;
        }
        return false;
    };
    $modalStack.isModalFocused = function(evt, modalWindow) {
        if (evt && modalWindow) {
            var modalDomEl = modalWindow.value.modalDomEl;
            if (modalDomEl && modalDomEl.length) {
                return (evt.target || evt.srcElement) === modalDomEl[0];
            }
        }
        return false;
    };
    $modalStack.isFocusInFirstItem = function(evt, list) {
        if (list.length > 0) {
            return (evt.target || evt.srcElement) === list[0];
        }
        return false;
    };
    $modalStack.isFocusInLastItem = function(evt, list) {
        if (list.length > 0) {
            return (evt.target || evt.srcElement) === list[list.length - 1];
        }
        return false;
    };
    $modalStack.loadFocusElementList = function(modalWindow) {
        if (modalWindow) {
            var modalDomE1 = modalWindow.value.modalDomEl;
            if (modalDomE1 && modalDomE1.length) {
                var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
                return elements ? Array.prototype.filter.call(elements, function(element) {
                    return isVisible(element);
                }) : elements;
            }
        }
    };
    return $modalStack;
} ]).provider("$uibModal", function() {
    var $modalProvider = {
        options: {
            animation: true,
            backdrop: true,
            keyboard: true
        },
        $get: [ "$rootScope", "$q", "$document", "$templateRequest", "$controller", "$uibResolve", "$uibModalStack", function($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
            var $modal = {};
            function getTemplatePromise(options) {
                return options.template ? $q.when(options.template) : $templateRequest(angular.isFunction(options.templateUrl) ? options.templateUrl() : options.templateUrl);
            }
            var promiseChain = null;
            $modal.getPromiseChain = function() {
                return promiseChain;
            };
            $modal.open = function(modalOptions) {
                var modalResultDeferred = $q.defer();
                var modalOpenedDeferred = $q.defer();
                var modalClosedDeferred = $q.defer();
                var modalRenderDeferred = $q.defer();
                var modalInstance = {
                    result: modalResultDeferred.promise,
                    opened: modalOpenedDeferred.promise,
                    closed: modalClosedDeferred.promise,
                    rendered: modalRenderDeferred.promise,
                    close: function(result) {
                        return $modalStack.close(modalInstance, result);
                    },
                    dismiss: function(reason) {
                        return $modalStack.dismiss(modalInstance, reason);
                    }
                };
                modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
                modalOptions.resolve = modalOptions.resolve || {};
                modalOptions.appendTo = modalOptions.appendTo || $document.find("body").eq(0);
                if (!modalOptions.appendTo.length) {
                    throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");
                }
                if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
                    throw new Error("One of component or template or templateUrl options is required.");
                }
                var templateAndResolvePromise;
                if (modalOptions.component) {
                    templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
                } else {
                    templateAndResolvePromise = $q.all([ getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null) ]);
                }
                function resolveWithTemplate() {
                    return templateAndResolvePromise;
                }
                var samePromise;
                samePromise = promiseChain = $q.all([ promiseChain ]).then(resolveWithTemplate, resolveWithTemplate).then(function resolveSuccess(tplAndVars) {
                    var providedScope = modalOptions.scope || $rootScope;
                    var modalScope = providedScope.$new();
                    modalScope.$close = modalInstance.close;
                    modalScope.$dismiss = modalInstance.dismiss;
                    modalScope.$on("$destroy", function() {
                        if (!modalScope.$$uibDestructionScheduled) {
                            modalScope.$dismiss("$uibUnscheduledDestruction");
                        }
                    });
                    var modal = {
                        scope: modalScope,
                        deferred: modalResultDeferred,
                        renderDeferred: modalRenderDeferred,
                        closedDeferred: modalClosedDeferred,
                        animation: modalOptions.animation,
                        backdrop: modalOptions.backdrop,
                        keyboard: modalOptions.keyboard,
                        backdropClass: modalOptions.backdropClass,
                        windowTopClass: modalOptions.windowTopClass,
                        windowClass: modalOptions.windowClass,
                        windowTemplateUrl: modalOptions.windowTemplateUrl,
                        ariaLabelledBy: modalOptions.ariaLabelledBy,
                        ariaDescribedBy: modalOptions.ariaDescribedBy,
                        size: modalOptions.size,
                        openedClass: modalOptions.openedClass,
                        appendTo: modalOptions.appendTo
                    };
                    var component = {};
                    var ctrlInstance, ctrlInstantiate, ctrlLocals = {};
                    if (modalOptions.component) {
                        constructLocals(component, false, true, false);
                        component.name = modalOptions.component;
                        modal.component = component;
                    } else if (modalOptions.controller) {
                        constructLocals(ctrlLocals, true, false, true);
                        ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
                        if (modalOptions.controllerAs && modalOptions.bindToController) {
                            ctrlInstance = ctrlInstantiate.instance;
                            ctrlInstance.$close = modalScope.$close;
                            ctrlInstance.$dismiss = modalScope.$dismiss;
                            angular.extend(ctrlInstance, {
                                $resolve: ctrlLocals.$scope.$resolve
                            }, providedScope);
                        }
                        ctrlInstance = ctrlInstantiate();
                        if (angular.isFunction(ctrlInstance.$onInit)) {
                            ctrlInstance.$onInit();
                        }
                    }
                    if (!modalOptions.component) {
                        modal.content = tplAndVars[0];
                    }
                    $modalStack.open(modalInstance, modal);
                    modalOpenedDeferred.resolve(true);
                    function constructLocals(obj, template, instanceOnScope, injectable) {
                        obj.$scope = modalScope;
                        obj.$scope.$resolve = {};
                        if (instanceOnScope) {
                            obj.$scope.$uibModalInstance = modalInstance;
                        } else {
                            obj.$uibModalInstance = modalInstance;
                        }
                        var resolves = template ? tplAndVars[1] : tplAndVars;
                        angular.forEach(resolves, function(value, key) {
                            if (injectable) {
                                obj[key] = value;
                            }
                            obj.$scope.$resolve[key] = value;
                        });
                    }
                }, function resolveError(reason) {
                    modalOpenedDeferred.reject(reason);
                    modalResultDeferred.reject(reason);
                })["finally"](function() {
                    if (promiseChain === samePromise) {
                        promiseChain = null;
                    }
                });
                return modalInstance;
            };
            return $modal;
        } ]
    };
    return $modalProvider;
});

angular.module("ui.bootstrap.paging", []).factory("uibPaging", [ "$parse", function($parse) {
    return {
        create: function(ctrl, $scope, $attrs) {
            ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
            ctrl.ngModelCtrl = {
                $setViewValue: angular.noop
            };
            ctrl._watchers = [];
            ctrl.init = function(ngModelCtrl, config) {
                ctrl.ngModelCtrl = ngModelCtrl;
                ctrl.config = config;
                ngModelCtrl.$render = function() {
                    ctrl.render();
                };
                if ($attrs.itemsPerPage) {
                    ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
                        ctrl.itemsPerPage = parseInt(value, 10);
                        $scope.totalPages = ctrl.calculateTotalPages();
                        ctrl.updatePage();
                    }));
                } else {
                    ctrl.itemsPerPage = config.itemsPerPage;
                }
                $scope.$watch("totalItems", function(newTotal, oldTotal) {
                    if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
                        $scope.totalPages = ctrl.calculateTotalPages();
                        ctrl.updatePage();
                    }
                });
            };
            ctrl.calculateTotalPages = function() {
                var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
                return Math.max(totalPages || 0, 1);
            };
            ctrl.render = function() {
                $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
            };
            $scope.selectPage = function(page, evt) {
                if (evt) {
                    evt.preventDefault();
                }
                var clickAllowed = !$scope.ngDisabled || !evt;
                if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
                    if (evt && evt.target) {
                        evt.target.blur();
                    }
                    ctrl.ngModelCtrl.$setViewValue(page);
                    ctrl.ngModelCtrl.$render();
                }
            };
            $scope.getText = function(key) {
                return $scope[key + "Text"] || ctrl.config[key + "Text"];
            };
            $scope.noPrevious = function() {
                return $scope.page === 1;
            };
            $scope.noNext = function() {
                return $scope.page === $scope.totalPages;
            };
            ctrl.updatePage = function() {
                ctrl.setNumPages($scope.$parent, $scope.totalPages);
                if ($scope.page > $scope.totalPages) {
                    $scope.selectPage($scope.totalPages);
                } else {
                    ctrl.ngModelCtrl.$render();
                }
            };
            $scope.$on("$destroy", function() {
                while (ctrl._watchers.length) {
                    ctrl._watchers.shift()();
                }
            });
        }
    };
} ]);

angular.module("ui.bootstrap.pager", [ "ui.bootstrap.paging", "ui.bootstrap.tabindex" ]).controller("UibPagerController", [ "$scope", "$attrs", "uibPaging", "uibPagerConfig", function($scope, $attrs, uibPaging, uibPagerConfig) {
    $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;
    uibPaging.create(this, $scope, $attrs);
} ]).constant("uibPagerConfig", {
    itemsPerPage: 10,
    previousText: "« Previous",
    nextText: "Next »",
    align: true
}).directive("uibPager", [ "uibPagerConfig", function(uibPagerConfig) {
    return {
        scope: {
            totalItems: "=",
            previousText: "@",
            nextText: "@",
            ngDisabled: "="
        },
        require: [ "uibPager", "?ngModel" ],
        restrict: "A",
        controller: "UibPagerController",
        controllerAs: "pager",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/pager/pager.html";
        },
        link: function(scope, element, attrs, ctrls) {
            element.addClass("pager");
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            paginationCtrl.init(ngModelCtrl, uibPagerConfig);
        }
    };
} ]);

angular.module("ui.bootstrap.pagination", [ "ui.bootstrap.paging", "ui.bootstrap.tabindex" ]).controller("UibPaginationController", [ "$scope", "$attrs", "$parse", "uibPaging", "uibPaginationConfig", function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
    var ctrl = this;
    var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize, rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate, forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses, boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers, pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) {
        return $scope.$parent.$eval($attrs.pageLabel, {
            $page: idx
        });
    } : angular.identity;
    $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
    $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;
    $attrs.$set("role", "menu");
    uibPaging.create(this, $scope, $attrs);
    if ($attrs.maxSize) {
        ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
            maxSize = parseInt(value, 10);
            ctrl.render();
        }));
    }
    function makePage(number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    }
    function getPages(currentPage, totalPages) {
        var pages = [];
        var startPage = 1, endPage = totalPages;
        var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;
        if (isMaxSized) {
            if (rotate) {
                startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
                endPage = startPage + maxSize - 1;
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - maxSize + 1;
                }
            } else {
                startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;
                endPage = Math.min(startPage + maxSize - 1, totalPages);
            }
        }
        for (var number = startPage; number <= endPage; number++) {
            var page = makePage(number, pageLabel(number), number === currentPage);
            pages.push(page);
        }
        if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!boundaryLinkNumbers || startPage > 3) {
                    var previousPageSet = makePage(startPage - 1, "...", false);
                    pages.unshift(previousPageSet);
                }
                if (boundaryLinkNumbers) {
                    if (startPage === 3) {
                        var secondPageLink = makePage(2, "2", false);
                        pages.unshift(secondPageLink);
                    }
                    var firstPageLink = makePage(1, "1", false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!boundaryLinkNumbers || endPage < totalPages - 2) {
                    var nextPageSet = makePage(endPage + 1, "...", false);
                    pages.push(nextPageSet);
                }
                if (boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) {
                        var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    var lastPageLink = makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    var originalRender = this.render;
    this.render = function() {
        originalRender();
        if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
            $scope.pages = getPages($scope.page, $scope.totalPages);
        }
    };
} ]).constant("uibPaginationConfig", {
    itemsPerPage: 10,
    boundaryLinks: false,
    boundaryLinkNumbers: false,
    directionLinks: true,
    firstText: "First",
    previousText: "Previous",
    nextText: "Next",
    lastText: "Last",
    rotate: true,
    forceEllipses: false
}).directive("uibPagination", [ "$parse", "uibPaginationConfig", function($parse, uibPaginationConfig) {
    return {
        scope: {
            totalItems: "=",
            firstText: "@",
            previousText: "@",
            nextText: "@",
            lastText: "@",
            ngDisabled: "="
        },
        require: [ "uibPagination", "?ngModel" ],
        restrict: "A",
        controller: "UibPaginationController",
        controllerAs: "pagination",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/pagination/pagination.html";
        },
        link: function(scope, element, attrs, ctrls) {
            element.addClass("pagination");
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
        }
    };
} ]);

angular.module("ui.bootstrap.tooltip", [ "ui.bootstrap.position", "ui.bootstrap.stackedMap" ]).provider("$uibTooltip", function() {
    var defaultOptions = {
        placement: "top",
        placementClassPrefix: "",
        animation: true,
        popupDelay: 0,
        popupCloseDelay: 0,
        useContentExp: false
    };
    var triggerMap = {
        mouseenter: "mouseleave",
        click: "click",
        outsideClick: "outsideClick",
        focus: "blur",
        none: ""
    };
    var globalOptions = {};
    this.options = function(value) {
        angular.extend(globalOptions, value);
    };
    this.setTriggers = function setTriggers(triggers) {
        angular.extend(triggerMap, triggers);
    };
    function snake_case(name) {
        var regexp = /[A-Z]/g;
        var separator = "-";
        return name.replace(regexp, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    this.$get = [ "$window", "$compile", "$timeout", "$document", "$uibPosition", "$interpolate", "$rootScope", "$parse", "$$stackedMap", function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
        var openedTooltips = $$stackedMap.createNew();
        $document.on("keyup", keypressListener);
        $rootScope.$on("$destroy", function() {
            $document.off("keyup", keypressListener);
        });
        function keypressListener(e) {
            if (e.which === 27) {
                var last = openedTooltips.top();
                if (last) {
                    last.value.close();
                    last = null;
                }
            }
        }
        return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
            options = angular.extend({}, defaultOptions, globalOptions, options);
            function getTriggers(trigger) {
                var show = (trigger || options.trigger || defaultTriggerShow).split(" ");
                var hide = show.map(function(trigger) {
                    return triggerMap[trigger] || trigger;
                });
                return {
                    show: show,
                    hide: hide
                };
            }
            var directiveName = snake_case(ttType);
            var startSym = $interpolate.startSymbol();
            var endSym = $interpolate.endSymbol();
            var template = "<div " + directiveName + "-popup " + 'uib-title="' + startSym + "title" + endSym + '" ' + (options.useContentExp ? 'content-exp="contentExp()" ' : 'content="' + startSym + "content" + endSym + '" ') + 'origin-scope="origScope" ' + 'class="uib-position-measure ' + prefix + '" ' + 'tooltip-animation-class="fade"' + "uib-tooltip-classes " + 'ng-class="{ in: isOpen }" ' + ">" + "</div>";
            return {
                compile: function(tElem, tAttrs) {
                    var tooltipLinker = $compile(template);
                    return function link(scope, element, attrs, tooltipCtrl) {
                        var tooltip;
                        var tooltipLinkedScope;
                        var transitionTimeout;
                        var showTimeout;
                        var hideTimeout;
                        var positionTimeout;
                        var adjustmentTimeout;
                        var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
                        var triggers = getTriggers(undefined);
                        var hasEnableExp = angular.isDefined(attrs[prefix + "Enable"]);
                        var ttScope = scope.$new(true);
                        var repositionScheduled = false;
                        var isOpenParse = angular.isDefined(attrs[prefix + "IsOpen"]) ? $parse(attrs[prefix + "IsOpen"]) : false;
                        var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
                        var observers = [];
                        var lastPlacement;
                        var positionTooltip = function() {
                            if (!tooltip || !tooltip.html()) {
                                return;
                            }
                            if (!positionTimeout) {
                                positionTimeout = $timeout(function() {
                                    var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                                    var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop("offsetHeight");
                                    var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
                                    tooltip.css({
                                        top: ttPosition.top + "px",
                                        left: ttPosition.left + "px"
                                    });
                                    var placementClasses = ttPosition.placement.split("-");
                                    if (!tooltip.hasClass(placementClasses[0])) {
                                        tooltip.removeClass(lastPlacement.split("-")[0]);
                                        tooltip.addClass(placementClasses[0]);
                                    }
                                    if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
                                        tooltip.removeClass(options.placementClassPrefix + lastPlacement);
                                        tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
                                    }
                                    adjustmentTimeout = $timeout(function() {
                                        var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop("offsetHeight");
                                        var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
                                        if (adjustment) {
                                            tooltip.css(adjustment);
                                        }
                                        adjustmentTimeout = null;
                                    }, 0, false);
                                    if (tooltip.hasClass("uib-position-measure")) {
                                        $position.positionArrow(tooltip, ttPosition.placement);
                                        tooltip.removeClass("uib-position-measure");
                                    } else if (lastPlacement !== ttPosition.placement) {
                                        $position.positionArrow(tooltip, ttPosition.placement);
                                    }
                                    lastPlacement = ttPosition.placement;
                                    positionTimeout = null;
                                }, 0, false);
                            }
                        };
                        ttScope.origScope = scope;
                        ttScope.isOpen = false;
                        function toggleTooltipBind() {
                            if (!ttScope.isOpen) {
                                showTooltipBind();
                            } else {
                                hideTooltipBind();
                            }
                        }
                        function showTooltipBind() {
                            if (hasEnableExp && !scope.$eval(attrs[prefix + "Enable"])) {
                                return;
                            }
                            cancelHide();
                            prepareTooltip();
                            if (ttScope.popupDelay) {
                                if (!showTimeout) {
                                    showTimeout = $timeout(show, ttScope.popupDelay, false);
                                }
                            } else {
                                show();
                            }
                        }
                        function hideTooltipBind() {
                            cancelShow();
                            if (ttScope.popupCloseDelay) {
                                if (!hideTimeout) {
                                    hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
                                }
                            } else {
                                hide();
                            }
                        }
                        function show() {
                            cancelShow();
                            cancelHide();
                            if (!ttScope.content) {
                                return angular.noop;
                            }
                            createTooltip();
                            ttScope.$evalAsync(function() {
                                ttScope.isOpen = true;
                                assignIsOpen(true);
                                positionTooltip();
                            });
                        }
                        function cancelShow() {
                            if (showTimeout) {
                                $timeout.cancel(showTimeout);
                                showTimeout = null;
                            }
                            if (positionTimeout) {
                                $timeout.cancel(positionTimeout);
                                positionTimeout = null;
                            }
                        }
                        function hide() {
                            if (!ttScope) {
                                return;
                            }
                            ttScope.$evalAsync(function() {
                                if (ttScope) {
                                    ttScope.isOpen = false;
                                    assignIsOpen(false);
                                    if (ttScope.animation) {
                                        if (!transitionTimeout) {
                                            transitionTimeout = $timeout(removeTooltip, 150, false);
                                        }
                                    } else {
                                        removeTooltip();
                                    }
                                }
                            });
                        }
                        function cancelHide() {
                            if (hideTimeout) {
                                $timeout.cancel(hideTimeout);
                                hideTimeout = null;
                            }
                            if (transitionTimeout) {
                                $timeout.cancel(transitionTimeout);
                                transitionTimeout = null;
                            }
                        }
                        function createTooltip() {
                            if (tooltip) {
                                return;
                            }
                            tooltipLinkedScope = ttScope.$new();
                            tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                                if (appendToBody) {
                                    $document.find("body").append(tooltip);
                                } else {
                                    element.after(tooltip);
                                }
                            });
                            openedTooltips.add(ttScope, {
                                close: hide
                            });
                            prepObservers();
                        }
                        function removeTooltip() {
                            cancelShow();
                            cancelHide();
                            unregisterObservers();
                            if (tooltip) {
                                tooltip.remove();
                                tooltip = null;
                                if (adjustmentTimeout) {
                                    $timeout.cancel(adjustmentTimeout);
                                }
                            }
                            openedTooltips.remove(ttScope);
                            if (tooltipLinkedScope) {
                                tooltipLinkedScope.$destroy();
                                tooltipLinkedScope = null;
                            }
                        }
                        function prepareTooltip() {
                            ttScope.title = attrs[prefix + "Title"];
                            if (contentParse) {
                                ttScope.content = contentParse(scope);
                            } else {
                                ttScope.content = attrs[ttType];
                            }
                            ttScope.popupClass = attrs[prefix + "Class"];
                            ttScope.placement = angular.isDefined(attrs[prefix + "Placement"]) ? attrs[prefix + "Placement"] : options.placement;
                            var placement = $position.parsePlacement(ttScope.placement);
                            lastPlacement = placement[1] ? placement[0] + "-" + placement[1] : placement[0];
                            var delay = parseInt(attrs[prefix + "PopupDelay"], 10);
                            var closeDelay = parseInt(attrs[prefix + "PopupCloseDelay"], 10);
                            ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
                            ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
                        }
                        function assignIsOpen(isOpen) {
                            if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                                isOpenParse.assign(scope, isOpen);
                            }
                        }
                        ttScope.contentExp = function() {
                            return ttScope.content;
                        };
                        attrs.$observe("disabled", function(val) {
                            if (val) {
                                cancelShow();
                            }
                            if (val && ttScope.isOpen) {
                                hide();
                            }
                        });
                        if (isOpenParse) {
                            scope.$watch(isOpenParse, function(val) {
                                if (ttScope && !val === ttScope.isOpen) {
                                    toggleTooltipBind();
                                }
                            });
                        }
                        function prepObservers() {
                            observers.length = 0;
                            if (contentParse) {
                                observers.push(scope.$watch(contentParse, function(val) {
                                    ttScope.content = val;
                                    if (!val && ttScope.isOpen) {
                                        hide();
                                    }
                                }));
                                observers.push(tooltipLinkedScope.$watch(function() {
                                    if (!repositionScheduled) {
                                        repositionScheduled = true;
                                        tooltipLinkedScope.$$postDigest(function() {
                                            repositionScheduled = false;
                                            if (ttScope && ttScope.isOpen) {
                                                positionTooltip();
                                            }
                                        });
                                    }
                                }));
                            } else {
                                observers.push(attrs.$observe(ttType, function(val) {
                                    ttScope.content = val;
                                    if (!val && ttScope.isOpen) {
                                        hide();
                                    } else {
                                        positionTooltip();
                                    }
                                }));
                            }
                            observers.push(attrs.$observe(prefix + "Title", function(val) {
                                ttScope.title = val;
                                if (ttScope.isOpen) {
                                    positionTooltip();
                                }
                            }));
                            observers.push(attrs.$observe(prefix + "Placement", function(val) {
                                ttScope.placement = val ? val : options.placement;
                                if (ttScope.isOpen) {
                                    positionTooltip();
                                }
                            }));
                        }
                        function unregisterObservers() {
                            if (observers.length) {
                                angular.forEach(observers, function(observer) {
                                    observer();
                                });
                                observers.length = 0;
                            }
                        }
                        function bodyHideTooltipBind(e) {
                            if (!ttScope || !ttScope.isOpen || !tooltip) {
                                return;
                            }
                            if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                                hideTooltipBind();
                            }
                        }
                        function hideOnEscapeKey(e) {
                            if (e.which === 27) {
                                hideTooltipBind();
                            }
                        }
                        var unregisterTriggers = function() {
                            triggers.show.forEach(function(trigger) {
                                if (trigger === "outsideClick") {
                                    element.off("click", toggleTooltipBind);
                                } else {
                                    element.off(trigger, showTooltipBind);
                                    element.off(trigger, toggleTooltipBind);
                                }
                                element.off("keypress", hideOnEscapeKey);
                            });
                            triggers.hide.forEach(function(trigger) {
                                if (trigger === "outsideClick") {
                                    $document.off("click", bodyHideTooltipBind);
                                } else {
                                    element.off(trigger, hideTooltipBind);
                                }
                            });
                        };
                        function prepTriggers() {
                            var showTriggers = [], hideTriggers = [];
                            var val = scope.$eval(attrs[prefix + "Trigger"]);
                            unregisterTriggers();
                            if (angular.isObject(val)) {
                                Object.keys(val).forEach(function(key) {
                                    showTriggers.push(key);
                                    hideTriggers.push(val[key]);
                                });
                                triggers = {
                                    show: showTriggers,
                                    hide: hideTriggers
                                };
                            } else {
                                triggers = getTriggers(val);
                            }
                            if (triggers.show !== "none") {
                                triggers.show.forEach(function(trigger, idx) {
                                    if (trigger === "outsideClick") {
                                        element.on("click", toggleTooltipBind);
                                        $document.on("click", bodyHideTooltipBind);
                                    } else if (trigger === triggers.hide[idx]) {
                                        element.on(trigger, toggleTooltipBind);
                                    } else if (trigger) {
                                        element.on(trigger, showTooltipBind);
                                        element.on(triggers.hide[idx], hideTooltipBind);
                                    }
                                    element.on("keypress", hideOnEscapeKey);
                                });
                            }
                        }
                        prepTriggers();
                        var animation = scope.$eval(attrs[prefix + "Animation"]);
                        ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;
                        var appendToBodyVal;
                        var appendKey = prefix + "AppendToBody";
                        if (appendKey in attrs && attrs[appendKey] === undefined) {
                            appendToBodyVal = true;
                        } else {
                            appendToBodyVal = scope.$eval(attrs[appendKey]);
                        }
                        appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;
                        scope.$on("$destroy", function onDestroyTooltip() {
                            unregisterTriggers();
                            removeTooltip();
                            ttScope = null;
                        });
                    };
                }
            };
        };
    } ];
}).directive("uibTooltipTemplateTransclude", [ "$animate", "$sce", "$compile", "$templateRequest", function($animate, $sce, $compile, $templateRequest) {
    return {
        link: function(scope, elem, attrs) {
            var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);
            var changeCounter = 0, currentScope, previousElement, currentElement;
            var cleanupLastIncludeContent = function() {
                if (previousElement) {
                    previousElement.remove();
                    previousElement = null;
                }
                if (currentScope) {
                    currentScope.$destroy();
                    currentScope = null;
                }
                if (currentElement) {
                    $animate.leave(currentElement).then(function() {
                        previousElement = null;
                    });
                    previousElement = currentElement;
                    currentElement = null;
                }
            };
            scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
                var thisChangeId = ++changeCounter;
                if (src) {
                    $templateRequest(src, true).then(function(response) {
                        if (thisChangeId !== changeCounter) {
                            return;
                        }
                        var newScope = origScope.$new();
                        var template = response;
                        var clone = $compile(template)(newScope, function(clone) {
                            cleanupLastIncludeContent();
                            $animate.enter(clone, elem);
                        });
                        currentScope = newScope;
                        currentElement = clone;
                        currentScope.$emit("$includeContentLoaded", src);
                    }, function() {
                        if (thisChangeId === changeCounter) {
                            cleanupLastIncludeContent();
                            scope.$emit("$includeContentError", src);
                        }
                    });
                    scope.$emit("$includeContentRequested", src);
                } else {
                    cleanupLastIncludeContent();
                }
            });
            scope.$on("$destroy", cleanupLastIncludeContent);
        }
    };
} ]).directive("uibTooltipClasses", [ "$uibPosition", function($uibPosition) {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            if (scope.placement) {
                var position = $uibPosition.parsePlacement(scope.placement);
                element.addClass(position[0]);
            }
            if (scope.popupClass) {
                element.addClass(scope.popupClass);
            }
            if (scope.animation) {
                element.addClass(attrs.tooltipAnimationClass);
            }
        }
    };
} ]).directive("uibTooltipPopup", function() {
    return {
        restrict: "A",
        scope: {
            content: "@"
        },
        templateUrl: "uib/template/tooltip/tooltip-popup.html"
    };
}).directive("uibTooltip", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltip", "tooltip", "mouseenter");
} ]).directive("uibTooltipTemplatePopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&",
            originScope: "&"
        },
        templateUrl: "uib/template/tooltip/tooltip-template-popup.html"
    };
}).directive("uibTooltipTemplate", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltipTemplate", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]).directive("uibTooltipHtmlPopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&"
        },
        templateUrl: "uib/template/tooltip/tooltip-html-popup.html"
    };
}).directive("uibTooltipHtml", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltipHtml", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]);

angular.module("ui.bootstrap.popover", [ "ui.bootstrap.tooltip" ]).directive("uibPopoverTemplatePopup", function() {
    return {
        restrict: "A",
        scope: {
            uibTitle: "@",
            contentExp: "&",
            originScope: "&"
        },
        templateUrl: "uib/template/popover/popover-template.html"
    };
}).directive("uibPopoverTemplate", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopoverTemplate", "popover", "click", {
        useContentExp: true
    });
} ]).directive("uibPopoverHtmlPopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&",
            uibTitle: "@"
        },
        templateUrl: "uib/template/popover/popover-html.html"
    };
}).directive("uibPopoverHtml", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopoverHtml", "popover", "click", {
        useContentExp: true
    });
} ]).directive("uibPopoverPopup", function() {
    return {
        restrict: "A",
        scope: {
            uibTitle: "@",
            content: "@"
        },
        templateUrl: "uib/template/popover/popover.html"
    };
}).directive("uibPopover", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopover", "popover", "click");
} ]);

angular.module("ui.bootstrap.progressbar", []).constant("uibProgressConfig", {
    animate: true,
    max: 100
}).controller("UibProgressController", [ "$scope", "$attrs", "uibProgressConfig", function($scope, $attrs, progressConfig) {
    var self = this, animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;
    this.bars = [];
    $scope.max = getMaxOrDefault();
    this.addBar = function(bar, element, attrs) {
        if (!animate) {
            element.css({
                transition: "none"
            });
        }
        this.bars.push(bar);
        bar.max = getMaxOrDefault();
        bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : "progressbar";
        bar.$watch("value", function(value) {
            bar.recalculatePercentage();
        });
        bar.recalculatePercentage = function() {
            var totalPercentage = self.bars.reduce(function(total, bar) {
                bar.percent = +(100 * bar.value / bar.max).toFixed(2);
                return total + bar.percent;
            }, 0);
            if (totalPercentage > 100) {
                bar.percent -= totalPercentage - 100;
            }
        };
        bar.$on("$destroy", function() {
            element = null;
            self.removeBar(bar);
        });
    };
    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
        this.bars.forEach(function(bar) {
            bar.recalculatePercentage();
        });
    };
    $scope.$watch("maxParam", function(maxParam) {
        self.bars.forEach(function(bar) {
            bar.max = getMaxOrDefault();
            bar.recalculatePercentage();
        });
    });
    function getMaxOrDefault() {
        return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
    }
} ]).directive("uibProgress", function() {
    return {
        replace: true,
        transclude: true,
        controller: "UibProgressController",
        require: "uibProgress",
        scope: {
            maxParam: "=?max"
        },
        templateUrl: "uib/template/progressbar/progress.html"
    };
}).directive("uibBar", function() {
    return {
        replace: true,
        transclude: true,
        require: "^uibProgress",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "uib/template/progressbar/bar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element, attrs);
        }
    };
}).directive("uibProgressbar", function() {
    return {
        replace: true,
        transclude: true,
        controller: "UibProgressController",
        scope: {
            value: "=",
            maxParam: "=?max",
            type: "@"
        },
        templateUrl: "uib/template/progressbar/progressbar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]), {
                title: attrs.title
            });
        }
    };
});

angular.module("ui.bootstrap.rating", []).constant("uibRatingConfig", {
    max: 5,
    stateOn: null,
    stateOff: null,
    enableReset: true,
    titles: [ "one", "two", "three", "four", "five" ]
}).controller("UibRatingController", [ "$scope", "$attrs", "uibRatingConfig", function($scope, $attrs, ratingConfig) {
    var ngModelCtrl = {
        $setViewValue: angular.noop
    }, self = this;
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.push(function(value) {
            if (angular.isNumber(value) && value << 0 !== value) {
                value = Math.round(value);
            }
            return value;
        });
        this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
        this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
        this.enableReset = angular.isDefined($attrs.enableReset) ? $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
        var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
        this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ? tmpTitles : ratingConfig.titles;
        var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) : new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
        $scope.range = this.buildTemplateObjects(ratingStates);
    };
    this.buildTemplateObjects = function(states) {
        for (var i = 0, n = states.length; i < n; i++) {
            states[i] = angular.extend({
                index: i
            }, {
                stateOn: this.stateOn,
                stateOff: this.stateOff,
                title: this.getTitle(i)
            }, states[i]);
        }
        return states;
    };
    this.getTitle = function(index) {
        if (index >= this.titles.length) {
            return index + 1;
        }
        return this.titles[index];
    };
    $scope.rate = function(value) {
        if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
            var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
            ngModelCtrl.$setViewValue(newViewValue);
            ngModelCtrl.$render();
        }
    };
    $scope.enter = function(value) {
        if (!$scope.readonly) {
            $scope.value = value;
        }
        $scope.onHover({
            value: value
        });
    };
    $scope.reset = function() {
        $scope.value = ngModelCtrl.$viewValue;
        $scope.onLeave();
    };
    $scope.onKeydown = function(evt) {
        if (/(37|38|39|40)/.test(evt.which)) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
        }
    };
    this.render = function() {
        $scope.value = ngModelCtrl.$viewValue;
        $scope.title = self.getTitle($scope.value - 1);
    };
} ]).directive("uibRating", function() {
    return {
        require: [ "uibRating", "ngModel" ],
        restrict: "A",
        scope: {
            readonly: "=?readOnly",
            onHover: "&",
            onLeave: "&"
        },
        controller: "UibRatingController",
        templateUrl: "uib/template/rating/rating.html",
        link: function(scope, element, attrs, ctrls) {
            var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ratingCtrl.init(ngModelCtrl);
        }
    };
});

angular.module("ui.bootstrap.tabs", []).controller("UibTabsetController", [ "$scope", function($scope) {
    var ctrl = this, oldIndex;
    ctrl.tabs = [];
    ctrl.select = function(index, evt) {
        if (!destroyed) {
            var previousIndex = findTabIndex(oldIndex);
            var previousSelected = ctrl.tabs[previousIndex];
            if (previousSelected) {
                previousSelected.tab.onDeselect({
                    $event: evt,
                    $selectedIndex: index
                });
                if (evt && evt.isDefaultPrevented()) {
                    return;
                }
                previousSelected.tab.active = false;
            }
            var selected = ctrl.tabs[index];
            if (selected) {
                selected.tab.onSelect({
                    $event: evt
                });
                selected.tab.active = true;
                ctrl.active = selected.index;
                oldIndex = selected.index;
            } else if (!selected && angular.isDefined(oldIndex)) {
                ctrl.active = null;
                oldIndex = null;
            }
        }
    };
    ctrl.addTab = function addTab(tab) {
        ctrl.tabs.push({
            tab: tab,
            index: tab.index
        });
        ctrl.tabs.sort(function(t1, t2) {
            if (t1.index > t2.index) {
                return 1;
            }
            if (t1.index < t2.index) {
                return -1;
            }
            return 0;
        });
        if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
            var newActiveIndex = findTabIndex(tab.index);
            ctrl.select(newActiveIndex);
        }
    };
    ctrl.removeTab = function removeTab(tab) {
        var index;
        for (var i = 0; i < ctrl.tabs.length; i++) {
            if (ctrl.tabs[i].tab === tab) {
                index = i;
                break;
            }
        }
        if (ctrl.tabs[index].index === ctrl.active) {
            var newActiveTabIndex = index === ctrl.tabs.length - 1 ? index - 1 : index + 1 % ctrl.tabs.length;
            ctrl.select(newActiveTabIndex);
        }
        ctrl.tabs.splice(index, 1);
    };
    $scope.$watch("tabset.active", function(val) {
        if (angular.isDefined(val) && val !== oldIndex) {
            ctrl.select(findTabIndex(val));
        }
    });
    var destroyed;
    $scope.$on("$destroy", function() {
        destroyed = true;
    });
    function findTabIndex(index) {
        for (var i = 0; i < ctrl.tabs.length; i++) {
            if (ctrl.tabs[i].index === index) {
                return i;
            }
        }
    }
} ]).directive("uibTabset", function() {
    return {
        transclude: true,
        replace: true,
        scope: {},
        bindToController: {
            active: "=?",
            type: "@"
        },
        controller: "UibTabsetController",
        controllerAs: "tabset",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/tabs/tabset.html";
        },
        link: function(scope, element, attrs) {
            scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
            scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
        }
    };
}).directive("uibTab", [ "$parse", function($parse) {
    return {
        require: "^uibTabset",
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/tabs/tab.html";
        },
        transclude: true,
        scope: {
            heading: "@",
            index: "=?",
            classes: "@?",
            onSelect: "&select",
            onDeselect: "&deselect"
        },
        controller: function() {},
        controllerAs: "tab",
        link: function(scope, elm, attrs, tabsetCtrl, transclude) {
            scope.disabled = false;
            if (attrs.disable) {
                scope.$parent.$watch($parse(attrs.disable), function(value) {
                    scope.disabled = !!value;
                });
            }
            if (angular.isUndefined(attrs.index)) {
                if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
                    scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) {
                        return t.index;
                    })) + 1;
                } else {
                    scope.index = 0;
                }
            }
            if (angular.isUndefined(attrs.classes)) {
                scope.classes = "";
            }
            scope.select = function(evt) {
                if (!scope.disabled) {
                    var index;
                    for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
                        if (tabsetCtrl.tabs[i].tab === scope) {
                            index = i;
                            break;
                        }
                    }
                    tabsetCtrl.select(index, evt);
                }
            };
            tabsetCtrl.addTab(scope);
            scope.$on("$destroy", function() {
                tabsetCtrl.removeTab(scope);
            });
            scope.$transcludeFn = transclude;
        }
    };
} ]).directive("uibTabHeadingTransclude", function() {
    return {
        restrict: "A",
        require: "^uibTab",
        link: function(scope, elm) {
            scope.$watch("headingElement", function updateHeadingElement(heading) {
                if (heading) {
                    elm.html("");
                    elm.append(heading);
                }
            });
        }
    };
}).directive("uibTabContentTransclude", function() {
    return {
        restrict: "A",
        require: "^uibTabset",
        link: function(scope, elm, attrs) {
            var tab = scope.$eval(attrs.uibTabContentTransclude).tab;
            tab.$transcludeFn(tab.$parent, function(contents) {
                angular.forEach(contents, function(node) {
                    if (isTabHeading(node)) {
                        tab.headingElement = node;
                    } else {
                        elm.append(node);
                    }
                });
            });
        }
    };
    function isTabHeading(node) {
        return node.tagName && (node.hasAttribute("uib-tab-heading") || node.hasAttribute("data-uib-tab-heading") || node.hasAttribute("x-uib-tab-heading") || node.tagName.toLowerCase() === "uib-tab-heading" || node.tagName.toLowerCase() === "data-uib-tab-heading" || node.tagName.toLowerCase() === "x-uib-tab-heading" || node.tagName.toLowerCase() === "uib:tab-heading");
    }
});

angular.module("ui.bootstrap.timepicker", []).constant("uibTimepickerConfig", {
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    showMeridian: true,
    showSeconds: false,
    meridians: null,
    readonlyInput: false,
    mousewheel: true,
    arrowkeys: true,
    showSpinners: true,
    templateUrl: "uib/template/timepicker/timepicker.html"
}).controller("UibTimepickerController", [ "$scope", "$element", "$attrs", "$parse", "$log", "$locale", "uibTimepickerConfig", function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
    var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
    var selected = new Date(), watchers = [], ngModelCtrl = {
        $setViewValue: angular.noop
    }, meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS, padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;
    $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
    $element.removeAttr("tabindex");
    this.init = function(ngModelCtrl_, inputs) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.unshift(function(modelValue) {
            return modelValue ? new Date(modelValue) : null;
        });
        var hoursInputEl = inputs.eq(0), minutesInputEl = inputs.eq(1), secondsInputEl = inputs.eq(2);
        hoursModelCtrl = hoursInputEl.controller("ngModel");
        minutesModelCtrl = minutesInputEl.controller("ngModel");
        secondsModelCtrl = secondsInputEl.controller("ngModel");
        var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
        if (mousewheel) {
            this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
        }
        var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
        if (arrowkeys) {
            this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
        }
        $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
        this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    };
    var hourStep = timepickerConfig.hourStep;
    if ($attrs.hourStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
            hourStep = +value;
        }));
    }
    var minuteStep = timepickerConfig.minuteStep;
    if ($attrs.minuteStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
            minuteStep = +value;
        }));
    }
    var min;
    watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
        var dt = new Date(value);
        min = isNaN(dt) ? undefined : dt;
    }));
    var max;
    watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
        var dt = new Date(value);
        max = isNaN(dt) ? undefined : dt;
    }));
    var disabled = false;
    if ($attrs.ngDisabled) {
        watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
            disabled = value;
        }));
    }
    $scope.noIncrementHours = function() {
        var incrementedSelected = addMinutes(selected, hourStep * 60);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementHours = function() {
        var decrementedSelected = addMinutes(selected, -hourStep * 60);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noIncrementMinutes = function() {
        var incrementedSelected = addMinutes(selected, minuteStep);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementMinutes = function() {
        var decrementedSelected = addMinutes(selected, -minuteStep);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noIncrementSeconds = function() {
        var incrementedSelected = addSeconds(selected, secondStep);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementSeconds = function() {
        var decrementedSelected = addSeconds(selected, -secondStep);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noToggleMeridian = function() {
        if (selected.getHours() < 12) {
            return disabled || addMinutes(selected, 12 * 60) > max;
        }
        return disabled || addMinutes(selected, -12 * 60) < min;
    };
    var secondStep = timepickerConfig.secondStep;
    if ($attrs.secondStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
            secondStep = +value;
        }));
    }
    $scope.showSeconds = timepickerConfig.showSeconds;
    if ($attrs.showSeconds) {
        watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
            $scope.showSeconds = !!value;
        }));
    }
    $scope.showMeridian = timepickerConfig.showMeridian;
    if ($attrs.showMeridian) {
        watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
            $scope.showMeridian = !!value;
            if (ngModelCtrl.$error.time) {
                var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
                if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                    selected.setHours(hours);
                    refresh();
                }
            } else {
                updateTemplate();
            }
        }));
    }
    function getHoursFromTemplate() {
        var hours = +$scope.hours;
        var valid = $scope.showMeridian ? hours > 0 && hours < 13 : hours >= 0 && hours < 24;
        if (!valid || $scope.hours === "") {
            return undefined;
        }
        if ($scope.showMeridian) {
            if (hours === 12) {
                hours = 0;
            }
            if ($scope.meridian === meridians[1]) {
                hours = hours + 12;
            }
        }
        return hours;
    }
    function getMinutesFromTemplate() {
        var minutes = +$scope.minutes;
        var valid = minutes >= 0 && minutes < 60;
        if (!valid || $scope.minutes === "") {
            return undefined;
        }
        return minutes;
    }
    function getSecondsFromTemplate() {
        var seconds = +$scope.seconds;
        return seconds >= 0 && seconds < 60 ? seconds : undefined;
    }
    function pad(value, noPad) {
        if (value === null) {
            return "";
        }
        return angular.isDefined(value) && value.toString().length < 2 && !noPad ? "0" + value : value.toString();
    }
    this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        var isScrollingUp = function(e) {
            if (e.originalEvent) {
                e = e.originalEvent;
            }
            var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
            return e.detail || delta > 0;
        };
        hoursInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
            }
            e.preventDefault();
        });
        minutesInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
            }
            e.preventDefault();
        });
        secondsInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
            }
            e.preventDefault();
        });
    };
    this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        hoursInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementHours();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementHours();
                    $scope.$apply();
                }
            }
        });
        minutesInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementMinutes();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementMinutes();
                    $scope.$apply();
                }
            }
        });
        secondsInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementSeconds();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementSeconds();
                    $scope.$apply();
                }
            }
        });
    };
    this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        if ($scope.readonlyInput) {
            $scope.updateHours = angular.noop;
            $scope.updateMinutes = angular.noop;
            $scope.updateSeconds = angular.noop;
            return;
        }
        var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
            ngModelCtrl.$setViewValue(null);
            ngModelCtrl.$setValidity("time", false);
            if (angular.isDefined(invalidHours)) {
                $scope.invalidHours = invalidHours;
                if (hoursModelCtrl) {
                    hoursModelCtrl.$setValidity("hours", false);
                }
            }
            if (angular.isDefined(invalidMinutes)) {
                $scope.invalidMinutes = invalidMinutes;
                if (minutesModelCtrl) {
                    minutesModelCtrl.$setValidity("minutes", false);
                }
            }
            if (angular.isDefined(invalidSeconds)) {
                $scope.invalidSeconds = invalidSeconds;
                if (secondsModelCtrl) {
                    secondsModelCtrl.$setValidity("seconds", false);
                }
            }
        };
        $scope.updateHours = function() {
            var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                selected.setHours(hours);
                selected.setMinutes(minutes);
                if (selected < min || selected > max) {
                    invalidate(true);
                } else {
                    refresh("h");
                }
            } else {
                invalidate(true);
            }
        };
        hoursInputEl.on("blur", function(e) {
            ngModelCtrl.$setTouched();
            if (modelIsEmpty()) {
                makeValid();
            } else if ($scope.hours === null || $scope.hours === "") {
                invalidate(true);
            } else if (!$scope.invalidHours && $scope.hours < 10) {
                $scope.$apply(function() {
                    $scope.hours = pad($scope.hours, !padHours);
                });
            }
        });
        $scope.updateMinutes = function() {
            var minutes = getMinutesFromTemplate(), hours = getHoursFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(minutes) && angular.isDefined(hours)) {
                selected.setHours(hours);
                selected.setMinutes(minutes);
                if (selected < min || selected > max) {
                    invalidate(undefined, true);
                } else {
                    refresh("m");
                }
            } else {
                invalidate(undefined, true);
            }
        };
        minutesInputEl.on("blur", function(e) {
            ngModelCtrl.$setTouched();
            if (modelIsEmpty()) {
                makeValid();
            } else if ($scope.minutes === null) {
                invalidate(undefined, true);
            } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
                $scope.$apply(function() {
                    $scope.minutes = pad($scope.minutes);
                });
            }
        });
        $scope.updateSeconds = function() {
            var seconds = getSecondsFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(seconds)) {
                selected.setSeconds(seconds);
                refresh("s");
            } else {
                invalidate(undefined, undefined, true);
            }
        };
        secondsInputEl.on("blur", function(e) {
            if (modelIsEmpty()) {
                makeValid();
            } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
                $scope.$apply(function() {
                    $scope.seconds = pad($scope.seconds);
                });
            }
        });
    };
    this.render = function() {
        var date = ngModelCtrl.$viewValue;
        if (isNaN(date)) {
            ngModelCtrl.$setValidity("time", false);
            $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
        } else {
            if (date) {
                selected = date;
            }
            if (selected < min || selected > max) {
                ngModelCtrl.$setValidity("time", false);
                $scope.invalidHours = true;
                $scope.invalidMinutes = true;
            } else {
                makeValid();
            }
            updateTemplate();
        }
    };
    function refresh(keyboardChange) {
        makeValid();
        ngModelCtrl.$setViewValue(new Date(selected));
        updateTemplate(keyboardChange);
    }
    function makeValid() {
        if (hoursModelCtrl) {
            hoursModelCtrl.$setValidity("hours", true);
        }
        if (minutesModelCtrl) {
            minutesModelCtrl.$setValidity("minutes", true);
        }
        if (secondsModelCtrl) {
            secondsModelCtrl.$setValidity("seconds", true);
        }
        ngModelCtrl.$setValidity("time", true);
        $scope.invalidHours = false;
        $scope.invalidMinutes = false;
        $scope.invalidSeconds = false;
    }
    function updateTemplate(keyboardChange) {
        if (!ngModelCtrl.$modelValue) {
            $scope.hours = null;
            $scope.minutes = null;
            $scope.seconds = null;
            $scope.meridian = meridians[0];
        } else {
            var hours = selected.getHours(), minutes = selected.getMinutes(), seconds = selected.getSeconds();
            if ($scope.showMeridian) {
                hours = hours === 0 || hours === 12 ? 12 : hours % 12;
            }
            $scope.hours = keyboardChange === "h" ? hours : pad(hours, !padHours);
            if (keyboardChange !== "m") {
                $scope.minutes = pad(minutes);
            }
            $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
            if (keyboardChange !== "s") {
                $scope.seconds = pad(seconds);
            }
            $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
        }
    }
    function addSecondsToSelected(seconds) {
        selected = addSeconds(selected, seconds);
        refresh();
    }
    function addMinutes(selected, minutes) {
        return addSeconds(selected, minutes * 60);
    }
    function addSeconds(date, seconds) {
        var dt = new Date(date.getTime() + seconds * 1e3);
        var newDate = new Date(date);
        newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
        return newDate;
    }
    function modelIsEmpty() {
        return ($scope.hours === null || $scope.hours === "") && ($scope.minutes === null || $scope.minutes === "") && (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ""));
    }
    $scope.showSpinners = angular.isDefined($attrs.showSpinners) ? $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;
    $scope.incrementHours = function() {
        if (!$scope.noIncrementHours()) {
            addSecondsToSelected(hourStep * 60 * 60);
        }
    };
    $scope.decrementHours = function() {
        if (!$scope.noDecrementHours()) {
            addSecondsToSelected(-hourStep * 60 * 60);
        }
    };
    $scope.incrementMinutes = function() {
        if (!$scope.noIncrementMinutes()) {
            addSecondsToSelected(minuteStep * 60);
        }
    };
    $scope.decrementMinutes = function() {
        if (!$scope.noDecrementMinutes()) {
            addSecondsToSelected(-minuteStep * 60);
        }
    };
    $scope.incrementSeconds = function() {
        if (!$scope.noIncrementSeconds()) {
            addSecondsToSelected(secondStep);
        }
    };
    $scope.decrementSeconds = function() {
        if (!$scope.noDecrementSeconds()) {
            addSecondsToSelected(-secondStep);
        }
    };
    $scope.toggleMeridian = function() {
        var minutes = getMinutesFromTemplate(), hours = getHoursFromTemplate();
        if (!$scope.noToggleMeridian()) {
            if (angular.isDefined(minutes) && angular.isDefined(hours)) {
                addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
            } else {
                $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
            }
        }
    };
    $scope.blur = function() {
        ngModelCtrl.$setTouched();
    };
    $scope.$on("$destroy", function() {
        while (watchers.length) {
            watchers.shift()();
        }
    });
} ]).directive("uibTimepicker", [ "uibTimepickerConfig", function(uibTimepickerConfig) {
    return {
        require: [ "uibTimepicker", "?^ngModel" ],
        restrict: "A",
        controller: "UibTimepickerController",
        controllerAs: "timepicker",
        scope: {},
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || uibTimepickerConfig.templateUrl;
        },
        link: function(scope, element, attrs, ctrls) {
            var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                timepickerCtrl.init(ngModelCtrl, element.find("input"));
            }
        }
    };
} ]);

angular.module("ui.bootstrap.typeahead", [ "ui.bootstrap.debounce", "ui.bootstrap.position" ]).factory("uibTypeaheadParser", [ "$parse", function($parse) {
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
        parse: function(input) {
            var match = input.match(TYPEAHEAD_REGEXP);
            if (!match) {
                throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' + ' but got "' + input + '".');
            }
            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
} ]).controller("UibTypeaheadController", [ "$scope", "$element", "$attrs", "$compile", "$parse", "$q", "$timeout", "$document", "$window", "$rootScope", "$$debounce", "$uibPosition", "uibTypeaheadParser", function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
    var HOT_KEYS = [ 9, 13, 27, 38, 40 ];
    var eventDebounceTime = 200;
    var modelCtrl, ngModelOptions;
    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
    if (!minLength && minLength !== 0) {
        minLength = 1;
    }
    originalScope.$watch(attrs.typeaheadMinLength, function(newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal;
    });
    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;
    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
    originalScope.$watch(attrs.typeaheadEditable, function(newVal) {
        isEditable = newVal !== false;
    });
    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;
    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
        var evt = vals.$event;
        return evt.which === 13 || evt.which === 9;
    };
    var onSelectCallback = $parse(attrs.typeaheadOnSelect);
    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;
    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;
    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;
    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;
    var appendTo = attrs.typeaheadAppendTo ? originalScope.$eval(attrs.typeaheadAppendTo) : null;
    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;
    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;
    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;
    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;
    var parsedModel = $parse(attrs.ngModel);
    var invokeModelSetter = $parse(attrs.ngModel + "($$$p)");
    var $setModelValue = function(scope, newValue) {
        if (angular.isFunction(parsedModel(originalScope)) && ngModelOptions.getOption("getterSetter")) {
            return invokeModelSetter(scope, {
                $$$p: newValue
            });
        }
        return parsedModel.assign(scope, newValue);
    };
    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);
    var hasFocus;
    var selected;
    var scope = originalScope.$new();
    var offDestroy = originalScope.$on("$destroy", function() {
        scope.$destroy();
    });
    scope.$on("$destroy", offDestroy);
    var popupId = "typeahead-" + scope.$id + "-" + Math.floor(Math.random() * 1e4);
    element.attr({
        "aria-autocomplete": "list",
        "aria-expanded": false,
        "aria-owns": popupId
    });
    var inputsContainer, hintInputElem;
    if (showHint) {
        inputsContainer = angular.element("<div></div>");
        inputsContainer.css("position", "relative");
        element.after(inputsContainer);
        hintInputElem = element.clone();
        hintInputElem.attr("placeholder", "");
        hintInputElem.attr("tabindex", "-1");
        hintInputElem.val("");
        hintInputElem.css({
            position: "absolute",
            top: "0px",
            left: "0px",
            "border-color": "transparent",
            "box-shadow": "none",
            opacity: 1,
            background: "none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",
            color: "#999"
        });
        element.css({
            position: "relative",
            "vertical-align": "top",
            "background-color": "transparent"
        });
        if (hintInputElem.attr("id")) {
            hintInputElem.removeAttr("id");
        }
        inputsContainer.append(hintInputElem);
        hintInputElem.after(element);
    }
    var popUpEl = angular.element("<div uib-typeahead-popup></div>");
    popUpEl.attr({
        id: popupId,
        matches: "matches",
        active: "activeIdx",
        select: "select(activeIdx, evt)",
        "move-in-progress": "moveInProgress",
        query: "query",
        position: "position",
        "assign-is-open": "assignIsOpen(isOpen)",
        debounce: "debounceUpdate"
    });
    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr("template-url", attrs.typeaheadTemplateUrl);
    }
    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
        popUpEl.attr("popup-template-url", attrs.typeaheadPopupTemplateUrl);
    }
    var resetHint = function() {
        if (showHint) {
            hintInputElem.val("");
        }
    };
    var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
        element.attr("aria-expanded", false);
        resetHint();
    };
    var getMatchId = function(index) {
        return popupId + "-option-" + index;
    };
    scope.$watch("activeIdx", function(index) {
        if (index < 0) {
            element.removeAttr("aria-activedescendant");
        } else {
            element.attr("aria-activedescendant", getMatchId(index));
        }
    });
    var inputIsExactMatch = function(inputValue, index) {
        if (scope.matches.length > index && inputValue) {
            return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
        }
        return false;
    };
    var getMatchesAsync = function(inputValue, evt) {
        var locals = {
            $viewValue: inputValue
        };
        isLoadingSetter(originalScope, true);
        isNoResultsSetter(originalScope, false);
        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
            var onCurrentRequest = inputValue === modelCtrl.$viewValue;
            if (onCurrentRequest && hasFocus) {
                if (matches && matches.length > 0) {
                    scope.activeIdx = focusFirst ? 0 : -1;
                    isNoResultsSetter(originalScope, false);
                    scope.matches.length = 0;
                    for (var i = 0; i < matches.length; i++) {
                        locals[parserResult.itemName] = matches[i];
                        scope.matches.push({
                            id: getMatchId(i),
                            label: parserResult.viewMapper(scope, locals),
                            model: matches[i]
                        });
                    }
                    scope.query = inputValue;
                    recalculatePosition();
                    element.attr("aria-expanded", true);
                    if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
                        if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                            $$debounce(function() {
                                scope.select(0, evt);
                            }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate["default"]);
                        } else {
                            scope.select(0, evt);
                        }
                    }
                    if (showHint) {
                        var firstLabel = scope.matches[0].label;
                        if (angular.isString(inputValue) && inputValue.length > 0 && firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
                            hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
                        } else {
                            hintInputElem.val("");
                        }
                    }
                } else {
                    resetMatches();
                    isNoResultsSetter(originalScope, true);
                }
            }
            if (onCurrentRequest) {
                isLoadingSetter(originalScope, false);
            }
        }, function() {
            resetMatches();
            isLoadingSetter(originalScope, false);
            isNoResultsSetter(originalScope, true);
        });
    };
    if (appendToBody) {
        angular.element($window).on("resize", fireRecalculating);
        $document.find("body").on("scroll", fireRecalculating);
    }
    var debouncedRecalculate = $$debounce(function() {
        if (scope.matches.length) {
            recalculatePosition();
        }
        scope.moveInProgress = false;
    }, eventDebounceTime);
    scope.moveInProgress = false;
    function fireRecalculating() {
        if (!scope.moveInProgress) {
            scope.moveInProgress = true;
            scope.$digest();
        }
        debouncedRecalculate();
    }
    function recalculatePosition() {
        scope.position = appendToBody ? $position.offset(element) : $position.position(element);
        scope.position.top += element.prop("offsetHeight");
    }
    scope.query = undefined;
    var timeoutPromise;
    var scheduleSearchWithTimeout = function(inputValue) {
        timeoutPromise = $timeout(function() {
            getMatchesAsync(inputValue);
        }, waitTime);
    };
    var cancelPreviousTimeout = function() {
        if (timeoutPromise) {
            $timeout.cancel(timeoutPromise);
        }
    };
    resetMatches();
    scope.assignIsOpen = function(isOpen) {
        isOpenSetter(originalScope, isOpen);
    };
    scope.select = function(activeIdx, evt) {
        var locals = {};
        var model, item;
        selected = true;
        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity("editable", true);
        modelCtrl.$setValidity("parse", true);
        onSelectCallback(originalScope, {
            $item: item,
            $model: model,
            $label: parserResult.viewMapper(originalScope, locals),
            $event: evt
        });
        resetMatches();
        if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
            $timeout(function() {
                element[0].focus();
            }, 0, false);
        }
    };
    element.on("keydown", function(evt) {
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
            return;
        }
        var shouldSelect = isSelectEvent(originalScope, {
            $event: evt
        });
        if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
            resetMatches();
            scope.$digest();
            return;
        }
        evt.preventDefault();
        var target;
        switch (evt.which) {
          case 27:
            evt.stopPropagation();
            resetMatches();
            originalScope.$digest();
            break;

          case 38:
            scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
            scope.$digest();
            target = popUpEl[0].querySelectorAll(".uib-typeahead-match")[scope.activeIdx];
            target.parentNode.scrollTop = target.offsetTop;
            break;

          case 40:
            scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
            scope.$digest();
            target = popUpEl[0].querySelectorAll(".uib-typeahead-match")[scope.activeIdx];
            target.parentNode.scrollTop = target.offsetTop;
            break;

          default:
            if (shouldSelect) {
                scope.$apply(function() {
                    if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                        $$debounce(function() {
                            scope.select(scope.activeIdx, evt);
                        }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate["default"]);
                    } else {
                        scope.select(scope.activeIdx, evt);
                    }
                });
            }
        }
    });
    element.on("focus", function(evt) {
        hasFocus = true;
        if (minLength === 0 && !modelCtrl.$viewValue) {
            $timeout(function() {
                getMatchesAsync(modelCtrl.$viewValue, evt);
            }, 0);
        }
    });
    element.on("blur", function(evt) {
        if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
            selected = true;
            scope.$apply(function() {
                if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
                    $$debounce(function() {
                        scope.select(scope.activeIdx, evt);
                    }, scope.debounceUpdate.blur);
                } else {
                    scope.select(scope.activeIdx, evt);
                }
            });
        }
        if (!isEditable && modelCtrl.$error.editable) {
            modelCtrl.$setViewValue();
            scope.$apply(function() {
                modelCtrl.$setValidity("editable", true);
                modelCtrl.$setValidity("parse", true);
            });
            element.val("");
        }
        hasFocus = false;
        selected = false;
    });
    var dismissClickHandler = function(evt) {
        if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
            resetMatches();
            if (!$rootScope.$$phase) {
                originalScope.$digest();
            }
        }
    };
    $document.on("click", dismissClickHandler);
    originalScope.$on("$destroy", function() {
        $document.off("click", dismissClickHandler);
        if (appendToBody || appendTo) {
            $popup.remove();
        }
        if (appendToBody) {
            angular.element($window).off("resize", fireRecalculating);
            $document.find("body").off("scroll", fireRecalculating);
        }
        popUpEl.remove();
        if (showHint) {
            inputsContainer.remove();
        }
    });
    var $popup = $compile(popUpEl)(scope);
    if (appendToBody) {
        $document.find("body").append($popup);
    } else if (appendTo) {
        angular.element(appendTo).eq(0).append($popup);
    } else {
        element.after($popup);
    }
    this.init = function(_modelCtrl) {
        modelCtrl = _modelCtrl;
        ngModelOptions = extractOptions(modelCtrl);
        scope.debounceUpdate = $parse(ngModelOptions.getOption("debounce"))(originalScope);
        modelCtrl.$parsers.unshift(function(inputValue) {
            hasFocus = true;
            if (minLength === 0 || inputValue && inputValue.length >= minLength) {
                if (waitTime > 0) {
                    cancelPreviousTimeout();
                    scheduleSearchWithTimeout(inputValue);
                } else {
                    getMatchesAsync(inputValue);
                }
            } else {
                isLoadingSetter(originalScope, false);
                cancelPreviousTimeout();
                resetMatches();
            }
            if (isEditable) {
                return inputValue;
            }
            if (!inputValue) {
                modelCtrl.$setValidity("editable", true);
                return null;
            }
            modelCtrl.$setValidity("editable", false);
            return undefined;
        });
        modelCtrl.$formatters.push(function(modelValue) {
            var candidateViewValue, emptyViewValue;
            var locals = {};
            if (!isEditable) {
                modelCtrl.$setValidity("editable", true);
            }
            if (inputFormatter) {
                locals.$model = modelValue;
                return inputFormatter(originalScope, locals);
            }
            locals[parserResult.itemName] = modelValue;
            candidateViewValue = parserResult.viewMapper(originalScope, locals);
            locals[parserResult.itemName] = undefined;
            emptyViewValue = parserResult.viewMapper(originalScope, locals);
            return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
        });
    };
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = ngModelCtrl.$options || {};
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            ngModelOptions = ngModelCtrl.$options;
        }
        return ngModelOptions;
    }
} ]).directive("uibTypeahead", function() {
    return {
        controller: "UibTypeaheadController",
        require: [ "ngModel", "uibTypeahead" ],
        link: function(originalScope, element, attrs, ctrls) {
            ctrls[1].init(ctrls[0]);
        }
    };
}).directive("uibTypeaheadPopup", [ "$$debounce", function($$debounce) {
    return {
        scope: {
            matches: "=",
            query: "=",
            active: "=",
            position: "&",
            moveInProgress: "=",
            select: "&",
            assignIsOpen: "&",
            debounce: "&"
        },
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.popupTemplateUrl || "uib/template/typeahead/typeahead-popup.html";
        },
        link: function(scope, element, attrs) {
            scope.templateUrl = attrs.templateUrl;
            scope.isOpen = function() {
                var isDropdownOpen = scope.matches.length > 0;
                scope.assignIsOpen({
                    isOpen: isDropdownOpen
                });
                return isDropdownOpen;
            };
            scope.isActive = function(matchIdx) {
                return scope.active === matchIdx;
            };
            scope.selectActive = function(matchIdx) {
                scope.active = matchIdx;
            };
            scope.selectMatch = function(activeIdx, evt) {
                var debounce = scope.debounce();
                if (angular.isNumber(debounce) || angular.isObject(debounce)) {
                    $$debounce(function() {
                        scope.select({
                            activeIdx: activeIdx,
                            evt: evt
                        });
                    }, angular.isNumber(debounce) ? debounce : debounce["default"]);
                } else {
                    scope.select({
                        activeIdx: activeIdx,
                        evt: evt
                    });
                }
            };
        }
    };
} ]).directive("uibTypeaheadMatch", [ "$templateRequest", "$compile", "$parse", function($templateRequest, $compile, $parse) {
    return {
        scope: {
            index: "=",
            match: "=",
            query: "="
        },
        link: function(scope, element, attrs) {
            var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || "uib/template/typeahead/typeahead-match.html";
            $templateRequest(tplUrl).then(function(tplContent) {
                var tplEl = angular.element(tplContent.trim());
                element.replaceWith(tplEl);
                $compile(tplEl)(scope);
            });
        }
    };
} ]).filter("uibTypeaheadHighlight", [ "$sce", "$injector", "$log", function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has("$sanitize");
    function escapeRegexp(queryToEscape) {
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
    function containsHtml(matchItem) {
        return /<.*>/g.test(matchItem);
    }
    return function(matchItem, query) {
        if (!isSanitizePresent && containsHtml(matchItem)) {
            $log.warn("Unsafe use of typeahead please use ngSanitize");
        }
        matchItem = query ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), "gi"), "<strong>$&</strong>") : matchItem;
        if (!isSanitizePresent) {
            matchItem = $sce.trustAsHtml(matchItem);
        }
        return matchItem;
    };
} ]);

angular.module("ui.bootstrap.carousel").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');
    angular.$$uibCarouselCss = true;
});

angular.module("ui.bootstrap.datepicker").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>');
    angular.$$uibDatepickerCss = true;
});

angular.module("ui.bootstrap.position").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>');
    angular.$$uibPositionCss = true;
});

angular.module("ui.bootstrap.datepickerPopup").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>');
    angular.$$uibDatepickerpopupCss = true;
});

angular.module("ui.bootstrap.tooltip").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>');
    angular.$$uibTooltipCss = true;
});

angular.module("ui.bootstrap.timepicker").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>');
    angular.$$uibTimepickerCss = true;
});

angular.module("ui.bootstrap.typeahead").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>');
    angular.$$uibTypeaheadCss = true;
});

angular.module("ui.bootstrap", [ "ui.bootstrap.tpls", "ui.bootstrap.collapse", "ui.bootstrap.tabindex", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.datepicker", "ui.bootstrap.position", "ui.bootstrap.datepickerPopup", "ui.bootstrap.debounce", "ui.bootstrap.multiMap", "ui.bootstrap.dropdown", "ui.bootstrap.stackedMap", "ui.bootstrap.modal", "ui.bootstrap.paging", "ui.bootstrap.pager", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead" ]);

angular.module("ui.bootstrap.tpls", [ "uib/template/accordion/accordion-group.html", "uib/template/accordion/accordion.html", "uib/template/alert/alert.html", "uib/template/carousel/carousel.html", "uib/template/carousel/slide.html", "uib/template/datepicker/datepicker.html", "uib/template/datepicker/day.html", "uib/template/datepicker/month.html", "uib/template/datepicker/year.html", "uib/template/datepickerPopup/popup.html", "uib/template/modal/window.html", "uib/template/pager/pager.html", "uib/template/pagination/pagination.html", "uib/template/tooltip/tooltip-html-popup.html", "uib/template/tooltip/tooltip-popup.html", "uib/template/tooltip/tooltip-template-popup.html", "uib/template/popover/popover-html.html", "uib/template/popover/popover-template.html", "uib/template/popover/popover.html", "uib/template/progressbar/bar.html", "uib/template/progressbar/progress.html", "uib/template/progressbar/progressbar.html", "uib/template/rating/rating.html", "uib/template/tabs/tab.html", "uib/template/tabs/tabset.html", "uib/template/timepicker/timepicker.html", "uib/template/typeahead/typeahead-match.html", "uib/template/typeahead/typeahead-popup.html" ]);

angular.module("ui.bootstrap.collapse", []).directive("uibCollapse", [ "$animate", "$q", "$parse", "$injector", function($animate, $q, $parse, $injector) {
    var $animateCss = $injector.has("$animateCss") ? $injector.get("$animateCss") : null;
    return {
        link: function(scope, element, attrs) {
            var expandingExpr = $parse(attrs.expanding), expandedExpr = $parse(attrs.expanded), collapsingExpr = $parse(attrs.collapsing), collapsedExpr = $parse(attrs.collapsed), horizontal = false, css = {}, cssTo = {};
            init();
            function init() {
                horizontal = !!("horizontal" in attrs);
                if (horizontal) {
                    css = {
                        width: ""
                    };
                    cssTo = {
                        width: "0"
                    };
                } else {
                    css = {
                        height: ""
                    };
                    cssTo = {
                        height: "0"
                    };
                }
                if (!scope.$eval(attrs.uibCollapse)) {
                    element.addClass("in").addClass("collapse").attr("aria-expanded", true).attr("aria-hidden", false).css(css);
                }
            }
            function getScrollFromElement(element) {
                if (horizontal) {
                    return {
                        width: element.scrollWidth + "px"
                    };
                }
                return {
                    height: element.scrollHeight + "px"
                };
            }
            function expand() {
                if (element.hasClass("collapse") && element.hasClass("in")) {
                    return;
                }
                $q.resolve(expandingExpr(scope)).then(function() {
                    element.removeClass("collapse").addClass("collapsing").attr("aria-expanded", true).attr("aria-hidden", false);
                    if ($animateCss) {
                        $animateCss(element, {
                            addClass: "in",
                            easing: "ease",
                            css: {
                                overflow: "hidden"
                            },
                            to: getScrollFromElement(element[0])
                        }).start()["finally"](expandDone);
                    } else {
                        $animate.addClass(element, "in", {
                            css: {
                                overflow: "hidden"
                            },
                            to: getScrollFromElement(element[0])
                        }).then(expandDone);
                    }
                }, angular.noop);
            }
            function expandDone() {
                element.removeClass("collapsing").addClass("collapse").css(css);
                expandedExpr(scope);
            }
            function collapse() {
                if (!element.hasClass("collapse") && !element.hasClass("in")) {
                    return collapseDone();
                }
                $q.resolve(collapsingExpr(scope)).then(function() {
                    element.css(getScrollFromElement(element[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded", false).attr("aria-hidden", true);
                    if ($animateCss) {
                        $animateCss(element, {
                            removeClass: "in",
                            to: cssTo
                        }).start()["finally"](collapseDone);
                    } else {
                        $animate.removeClass(element, "in", {
                            to: cssTo
                        }).then(collapseDone);
                    }
                }, angular.noop);
            }
            function collapseDone() {
                element.css(cssTo);
                element.removeClass("collapsing").addClass("collapse");
                collapsedExpr(scope);
            }
            scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
                if (shouldCollapse) {
                    collapse();
                } else {
                    expand();
                }
            });
        }
    };
} ]);

angular.module("ui.bootstrap.tabindex", []).directive("uibTabindexToggle", function() {
    return {
        restrict: "A",
        link: function(scope, elem, attrs) {
            attrs.$observe("disabled", function(disabled) {
                attrs.$set("tabindex", disabled ? -1 : null);
            });
        }
    };
});

angular.module("ui.bootstrap.accordion", [ "ui.bootstrap.collapse", "ui.bootstrap.tabindex" ]).constant("uibAccordionConfig", {
    closeOthers: true
}).controller("UibAccordionController", [ "$scope", "$attrs", "uibAccordionConfig", function($scope, $attrs, accordionConfig) {
    this.groups = [];
    this.closeOthers = function(openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
        if (closeOthers) {
            angular.forEach(this.groups, function(group) {
                if (group !== openGroup) {
                    group.isOpen = false;
                }
            });
        }
    };
    this.addGroup = function(groupScope) {
        var that = this;
        this.groups.push(groupScope);
        groupScope.$on("$destroy", function(event) {
            that.removeGroup(groupScope);
        });
    };
    this.removeGroup = function(group) {
        var index = this.groups.indexOf(group);
        if (index !== -1) {
            this.groups.splice(index, 1);
        }
    };
} ]).directive("uibAccordion", function() {
    return {
        controller: "UibAccordionController",
        controllerAs: "accordion",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/accordion/accordion.html";
        }
    };
}).directive("uibAccordionGroup", function() {
    return {
        require: "^uibAccordion",
        transclude: true,
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/accordion/accordion-group.html";
        },
        scope: {
            heading: "@",
            panelClass: "@?",
            isOpen: "=?",
            isDisabled: "=?"
        },
        controller: function() {
            this.setHeading = function(element) {
                this.heading = element;
            };
        },
        link: function(scope, element, attrs, accordionCtrl) {
            element.addClass("panel");
            accordionCtrl.addGroup(scope);
            scope.openClass = attrs.openClass || "panel-open";
            scope.panelClass = attrs.panelClass || "panel-default";
            scope.$watch("isOpen", function(value) {
                element.toggleClass(scope.openClass, !!value);
                if (value) {
                    accordionCtrl.closeOthers(scope);
                }
            });
            scope.toggleOpen = function($event) {
                if (!scope.isDisabled) {
                    if (!$event || $event.which === 32) {
                        scope.isOpen = !scope.isOpen;
                    }
                }
            };
            var id = "accordiongroup-" + scope.$id + "-" + Math.floor(Math.random() * 1e4);
            scope.headingId = id + "-tab";
            scope.panelId = id + "-panel";
        }
    };
}).directive("uibAccordionHeading", function() {
    return {
        transclude: true,
        template: "",
        replace: true,
        require: "^uibAccordionGroup",
        link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
            accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
        }
    };
}).directive("uibAccordionTransclude", function() {
    return {
        require: "^uibAccordionGroup",
        link: function(scope, element, attrs, controller) {
            scope.$watch(function() {
                return controller[attrs.uibAccordionTransclude];
            }, function(heading) {
                if (heading) {
                    var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
                    elem.html("");
                    elem.append(heading);
                }
            });
        }
    };
    function getHeaderSelectors() {
        return "uib-accordion-header," + "data-uib-accordion-header," + "x-uib-accordion-header," + "uib\\:accordion-header," + "[uib-accordion-header]," + "[data-uib-accordion-header]," + "[x-uib-accordion-header]";
    }
});

angular.module("ui.bootstrap.alert", []).controller("UibAlertController", [ "$scope", "$element", "$attrs", "$interpolate", "$timeout", function($scope, $element, $attrs, $interpolate, $timeout) {
    $scope.closeable = !!$attrs.close;
    $element.addClass("alert");
    $attrs.$set("role", "alert");
    if ($scope.closeable) {
        $element.addClass("alert-dismissible");
    }
    var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ? $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;
    if (dismissOnTimeout) {
        $timeout(function() {
            $scope.close();
        }, parseInt(dismissOnTimeout, 10));
    }
} ]).directive("uibAlert", function() {
    return {
        controller: "UibAlertController",
        controllerAs: "alert",
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/alert/alert.html";
        },
        transclude: true,
        scope: {
            close: "&"
        }
    };
});

angular.module("ui.bootstrap.buttons", []).constant("uibButtonConfig", {
    activeClass: "active",
    toggleEvent: "click"
}).controller("UibButtonsController", [ "uibButtonConfig", function(buttonConfig) {
    this.activeClass = buttonConfig.activeClass || "active";
    this.toggleEvent = buttonConfig.toggleEvent || "click";
} ]).directive("uibBtnRadio", [ "$parse", function($parse) {
    return {
        require: [ "uibBtnRadio", "ngModel" ],
        controller: "UibButtonsController",
        controllerAs: "buttons",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            var uncheckableExpr = $parse(attrs.uibUncheckable);
            element.find("input").css({
                display: "none"
            });
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
            };
            element.on(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                var isActive = element.hasClass(buttonsCtrl.activeClass);
                if (!isActive || angular.isDefined(attrs.uncheckable)) {
                    scope.$apply(function() {
                        ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
                        ngModelCtrl.$render();
                    });
                }
            });
            if (attrs.uibUncheckable) {
                scope.$watch(uncheckableExpr, function(uncheckable) {
                    attrs.$set("uncheckable", uncheckable ? "" : undefined);
                });
            }
        }
    };
} ]).directive("uibBtnCheckbox", function() {
    return {
        require: [ "uibBtnCheckbox", "ngModel" ],
        controller: "UibButtonsController",
        controllerAs: "button",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            element.find("input").css({
                display: "none"
            });
            function getTrueValue() {
                return getCheckboxValue(attrs.btnCheckboxTrue, true);
            }
            function getFalseValue() {
                return getCheckboxValue(attrs.btnCheckboxFalse, false);
            }
            function getCheckboxValue(attribute, defaultValue) {
                return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
            }
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
            };
            element.on(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
                    ngModelCtrl.$render();
                });
            });
        }
    };
});

angular.module("ui.bootstrap.carousel", []).controller("UibCarouselController", [ "$scope", "$element", "$interval", "$timeout", "$animate", function($scope, $element, $interval, $timeout, $animate) {
    var self = this, slides = self.slides = $scope.slides = [], SLIDE_DIRECTION = "uib-slideDirection", currentIndex = $scope.active, currentInterval, isPlaying;
    var destroyed = false;
    $element.addClass("carousel");
    self.addSlide = function(slide, element) {
        slides.push({
            slide: slide,
            element: element
        });
        slides.sort(function(a, b) {
            return +a.slide.index - +b.slide.index;
        });
        if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
            if ($scope.$currentTransition) {
                $scope.$currentTransition = null;
            }
            currentIndex = slide.index;
            $scope.active = slide.index;
            setActive(currentIndex);
            self.select(slides[findSlideIndex(slide)]);
            if (slides.length === 1) {
                $scope.play();
            }
        }
    };
    self.getCurrentIndex = function() {
        for (var i = 0; i < slides.length; i++) {
            if (slides[i].slide.index === currentIndex) {
                return i;
            }
        }
    };
    self.next = $scope.next = function() {
        var newIndex = (self.getCurrentIndex() + 1) % slides.length;
        if (newIndex === 0 && $scope.noWrap()) {
            $scope.pause();
            return;
        }
        return self.select(slides[newIndex], "next");
    };
    self.prev = $scope.prev = function() {
        var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;
        if ($scope.noWrap() && newIndex === slides.length - 1) {
            $scope.pause();
            return;
        }
        return self.select(slides[newIndex], "prev");
    };
    self.removeSlide = function(slide) {
        var index = findSlideIndex(slide);
        slides.splice(index, 1);
        if (slides.length > 0 && currentIndex === index) {
            if (index >= slides.length) {
                currentIndex = slides.length - 1;
                $scope.active = currentIndex;
                setActive(currentIndex);
                self.select(slides[slides.length - 1]);
            } else {
                currentIndex = index;
                $scope.active = currentIndex;
                setActive(currentIndex);
                self.select(slides[index]);
            }
        } else if (currentIndex > index) {
            currentIndex--;
            $scope.active = currentIndex;
        }
        if (slides.length === 0) {
            currentIndex = null;
            $scope.active = null;
        }
    };
    self.select = $scope.select = function(nextSlide, direction) {
        var nextIndex = findSlideIndex(nextSlide.slide);
        if (direction === undefined) {
            direction = nextIndex > self.getCurrentIndex() ? "next" : "prev";
        }
        if (nextSlide.slide.index !== currentIndex && !$scope.$currentTransition) {
            goNext(nextSlide.slide, nextIndex, direction);
        }
    };
    $scope.indexOfSlide = function(slide) {
        return +slide.slide.index;
    };
    $scope.isActive = function(slide) {
        return $scope.active === slide.slide.index;
    };
    $scope.isPrevDisabled = function() {
        return $scope.active === 0 && $scope.noWrap();
    };
    $scope.isNextDisabled = function() {
        return $scope.active === slides.length - 1 && $scope.noWrap();
    };
    $scope.pause = function() {
        if (!$scope.noPause) {
            isPlaying = false;
            resetTimer();
        }
    };
    $scope.play = function() {
        if (!isPlaying) {
            isPlaying = true;
            restartTimer();
        }
    };
    $element.on("mouseenter", $scope.pause);
    $element.on("mouseleave", $scope.play);
    $scope.$on("$destroy", function() {
        destroyed = true;
        resetTimer();
    });
    $scope.$watch("noTransition", function(noTransition) {
        $animate.enabled($element, !noTransition);
    });
    $scope.$watch("interval", restartTimer);
    $scope.$watchCollection("slides", resetTransition);
    $scope.$watch("active", function(index) {
        if (angular.isNumber(index) && currentIndex !== index) {
            for (var i = 0; i < slides.length; i++) {
                if (slides[i].slide.index === index) {
                    index = i;
                    break;
                }
            }
            var slide = slides[index];
            if (slide) {
                setActive(index);
                self.select(slides[index]);
                currentIndex = index;
            }
        }
    });
    function getSlideByIndex(index) {
        for (var i = 0, l = slides.length; i < l; ++i) {
            if (slides[i].index === index) {
                return slides[i];
            }
        }
    }
    function setActive(index) {
        for (var i = 0; i < slides.length; i++) {
            slides[i].slide.active = i === index;
        }
    }
    function goNext(slide, index, direction) {
        if (destroyed) {
            return;
        }
        angular.extend(slide, {
            direction: direction
        });
        angular.extend(slides[currentIndex].slide || {}, {
            direction: direction
        });
        if ($animate.enabled($element) && !$scope.$currentTransition && slides[index].element && self.slides.length > 1) {
            slides[index].element.data(SLIDE_DIRECTION, slide.direction);
            var currentIdx = self.getCurrentIndex();
            if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
                slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
            }
            $scope.$currentTransition = true;
            $animate.on("addClass", slides[index].element, function(element, phase) {
                if (phase === "close") {
                    $scope.$currentTransition = null;
                    $animate.off("addClass", element);
                }
            });
        }
        $scope.active = slide.index;
        currentIndex = slide.index;
        setActive(index);
        restartTimer();
    }
    function findSlideIndex(slide) {
        for (var i = 0; i < slides.length; i++) {
            if (slides[i].slide === slide) {
                return i;
            }
        }
    }
    function resetTimer() {
        if (currentInterval) {
            $interval.cancel(currentInterval);
            currentInterval = null;
        }
    }
    function resetTransition(slides) {
        if (!slides.length) {
            $scope.$currentTransition = null;
        }
    }
    function restartTimer() {
        resetTimer();
        var interval = +$scope.interval;
        if (!isNaN(interval) && interval > 0) {
            currentInterval = $interval(timerFn, interval);
        }
    }
    function timerFn() {
        var interval = +$scope.interval;
        if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
            $scope.next();
        } else {
            $scope.pause();
        }
    }
} ]).directive("uibCarousel", function() {
    return {
        transclude: true,
        controller: "UibCarouselController",
        controllerAs: "carousel",
        restrict: "A",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/carousel/carousel.html";
        },
        scope: {
            active: "=",
            interval: "=",
            noTransition: "=",
            noPause: "=",
            noWrap: "&"
        }
    };
}).directive("uibSlide", [ "$animate", function($animate) {
    return {
        require: "^uibCarousel",
        restrict: "A",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/carousel/slide.html";
        },
        scope: {
            actual: "=?",
            index: "=?"
        },
        link: function(scope, element, attrs, carouselCtrl) {
            element.addClass("item");
            carouselCtrl.addSlide(scope, element);
            scope.$on("$destroy", function() {
                carouselCtrl.removeSlide(scope);
            });
            scope.$watch("active", function(active) {
                $animate[active ? "addClass" : "removeClass"](element, "active");
            });
        }
    };
} ]).animation(".item", [ "$animateCss", function($animateCss) {
    var SLIDE_DIRECTION = "uib-slideDirection";
    function removeClass(element, className, callback) {
        element.removeClass(className);
        if (callback) {
            callback();
        }
    }
    return {
        beforeAddClass: function(element, className, done) {
            if (className === "active") {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction === "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass + " " + direction, done);
                element.addClass(direction);
                $animateCss(element, {
                    addClass: directionClass
                }).start().done(removeClassFn);
                return function() {
                    stopped = true;
                };
            }
            done();
        },
        beforeRemoveClass: function(element, className, done) {
            if (className === "active") {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction === "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass, done);
                $animateCss(element, {
                    addClass: directionClass
                }).start().done(removeClassFn);
                return function() {
                    stopped = true;
                };
            }
            done();
        }
    };
} ]);

angular.module("ui.bootstrap.dateparser", []).service("uibDateParser", [ "$log", "$locale", "dateFilter", "orderByFilter", "filterFilter", function($log, $locale, dateFilter, orderByFilter, filterFilter) {
    var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var localeId;
    var formatCodeToRegex;
    this.init = function() {
        localeId = $locale.id;
        this.parsers = {};
        this.formatters = {};
        formatCodeToRegex = [ {
            key: "yyyy",
            regex: "\\d{4}",
            apply: function(value) {
                this.year = +value;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "yyyy");
            }
        }, {
            key: "yy",
            regex: "\\d{2}",
            apply: function(value) {
                value = +value;
                this.year = value < 69 ? value + 2e3 : value + 1900;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "yy");
            }
        }, {
            key: "y",
            regex: "\\d{1,4}",
            apply: function(value) {
                this.year = +value;
            },
            formatter: function(date) {
                var _date = new Date();
                _date.setFullYear(Math.abs(date.getFullYear()));
                return dateFilter(_date, "y");
            }
        }, {
            key: "M!",
            regex: "0?[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                var value = date.getMonth();
                if (/^[0-9]$/.test(value)) {
                    return dateFilter(date, "MM");
                }
                return dateFilter(date, "M");
            }
        }, {
            key: "MMMM",
            regex: $locale.DATETIME_FORMATS.MONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value);
            },
            formatter: function(date) {
                return dateFilter(date, "MMMM");
            }
        }, {
            key: "MMM",
            regex: $locale.DATETIME_FORMATS.SHORTMONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value);
            },
            formatter: function(date) {
                return dateFilter(date, "MMM");
            }
        }, {
            key: "MM",
            regex: "0[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                return dateFilter(date, "MM");
            }
        }, {
            key: "M",
            regex: "[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            },
            formatter: function(date) {
                return dateFilter(date, "M");
            }
        }, {
            key: "d!",
            regex: "[0-2]?[0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                var value = date.getDate();
                if (/^[1-9]$/.test(value)) {
                    return dateFilter(date, "dd");
                }
                return dateFilter(date, "d");
            }
        }, {
            key: "dd",
            regex: "[0-2][0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "dd");
            }
        }, {
            key: "d",
            regex: "[1-2]?[0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "d");
            }
        }, {
            key: "EEEE",
            regex: $locale.DATETIME_FORMATS.DAY.join("|"),
            formatter: function(date) {
                return dateFilter(date, "EEEE");
            }
        }, {
            key: "EEE",
            regex: $locale.DATETIME_FORMATS.SHORTDAY.join("|"),
            formatter: function(date) {
                return dateFilter(date, "EEE");
            }
        }, {
            key: "HH",
            regex: "(?:0|1)[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "HH");
            }
        }, {
            key: "hh",
            regex: "0[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "hh");
            }
        }, {
            key: "H",
            regex: "1?[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "H");
            }
        }, {
            key: "h",
            regex: "[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "h");
            }
        }, {
            key: "mm",
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "mm");
            }
        }, {
            key: "m",
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "m");
            }
        }, {
            key: "sss",
            regex: "[0-9][0-9][0-9]",
            apply: function(value) {
                this.milliseconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "sss");
            }
        }, {
            key: "ss",
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "ss");
            }
        }, {
            key: "s",
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            },
            formatter: function(date) {
                return dateFilter(date, "s");
            }
        }, {
            key: "a",
            regex: $locale.DATETIME_FORMATS.AMPMS.join("|"),
            apply: function(value) {
                if (this.hours === 12) {
                    this.hours = 0;
                }
                if (value === "PM") {
                    this.hours += 12;
                }
            },
            formatter: function(date) {
                return dateFilter(date, "a");
            }
        }, {
            key: "Z",
            regex: "[+-]\\d{4}",
            apply: function(value) {
                var matches = value.match(/([+-])(\d{2})(\d{2})/), sign = matches[1], hours = matches[2], minutes = matches[3];
                this.hours += toInt(sign + hours);
                this.minutes += toInt(sign + minutes);
            },
            formatter: function(date) {
                return dateFilter(date, "Z");
            }
        }, {
            key: "ww",
            regex: "[0-4][0-9]|5[0-3]",
            formatter: function(date) {
                return dateFilter(date, "ww");
            }
        }, {
            key: "w",
            regex: "[0-9]|[1-4][0-9]|5[0-3]",
            formatter: function(date) {
                return dateFilter(date, "w");
            }
        }, {
            key: "GGGG",
            regex: $locale.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g, "\\s"),
            formatter: function(date) {
                return dateFilter(date, "GGGG");
            }
        }, {
            key: "GGG",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "GGG");
            }
        }, {
            key: "GG",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "GG");
            }
        }, {
            key: "G",
            regex: $locale.DATETIME_FORMATS.ERAS.join("|"),
            formatter: function(date) {
                return dateFilter(date, "G");
            }
        } ];
        if (angular.version.major >= 1 && angular.version.minor > 4) {
            formatCodeToRegex.push({
                key: "LLLL",
                regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join("|"),
                apply: function(value) {
                    this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value);
                },
                formatter: function(date) {
                    return dateFilter(date, "LLLL");
                }
            });
        }
    };
    this.init();
    function getFormatCodeToRegex(key) {
        return filterFilter(formatCodeToRegex, {
            key: key
        }, true)[0];
    }
    this.getParser = function(key) {
        var f = getFormatCodeToRegex(key);
        return f && f.apply || null;
    };
    this.overrideParser = function(key, parser) {
        var f = getFormatCodeToRegex(key);
        if (f && angular.isFunction(parser)) {
            this.parsers = {};
            f.apply = parser;
        }
    }.bind(this);
    function createParser(format) {
        var map = [], regex = format.split("");
        var quoteIndex = format.indexOf("'");
        if (quoteIndex > -1) {
            var inLiteral = false;
            format = format.split("");
            for (var i = quoteIndex; i < format.length; i++) {
                if (inLiteral) {
                    if (format[i] === "'") {
                        if (i + 1 < format.length && format[i + 1] === "'") {
                            format[i + 1] = "$";
                            regex[i + 1] = "";
                        } else {
                            regex[i] = "";
                            inLiteral = false;
                        }
                    }
                    format[i] = "$";
                } else {
                    if (format[i] === "'") {
                        format[i] = "$";
                        regex[i] = "";
                        inLiteral = true;
                    }
                }
            }
            format = format.join("");
        }
        angular.forEach(formatCodeToRegex, function(data) {
            var index = format.indexOf(data.key);
            if (index > -1) {
                format = format.split("");
                regex[index] = "(" + data.regex + ")";
                format[index] = "$";
                for (var i = index + 1, n = index + data.key.length; i < n; i++) {
                    regex[i] = "";
                    format[i] = "$";
                }
                format = format.join("");
                map.push({
                    index: index,
                    key: data.key,
                    apply: data.apply,
                    matcher: data.regex
                });
            }
        });
        return {
            regex: new RegExp("^" + regex.join("") + "$"),
            map: orderByFilter(map, "index")
        };
    }
    function createFormatter(format) {
        var formatters = [];
        var i = 0;
        var formatter, literalIdx;
        while (i < format.length) {
            if (angular.isNumber(literalIdx)) {
                if (format.charAt(i) === "'") {
                    if (i + 1 >= format.length || format.charAt(i + 1) !== "'") {
                        formatters.push(constructLiteralFormatter(format, literalIdx, i));
                        literalIdx = null;
                    }
                } else if (i === format.length) {
                    while (literalIdx < format.length) {
                        formatter = constructFormatterFromIdx(format, literalIdx);
                        formatters.push(formatter);
                        literalIdx = formatter.endIdx;
                    }
                }
                i++;
                continue;
            }
            if (format.charAt(i) === "'") {
                literalIdx = i;
                i++;
                continue;
            }
            formatter = constructFormatterFromIdx(format, i);
            formatters.push(formatter.parser);
            i = formatter.endIdx;
        }
        return formatters;
    }
    function constructLiteralFormatter(format, literalIdx, endIdx) {
        return function() {
            return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
        };
    }
    function constructFormatterFromIdx(format, i) {
        var currentPosStr = format.substr(i);
        for (var j = 0; j < formatCodeToRegex.length; j++) {
            if (new RegExp("^" + formatCodeToRegex[j].key).test(currentPosStr)) {
                var data = formatCodeToRegex[j];
                return {
                    endIdx: i + data.key.length,
                    parser: data.formatter
                };
            }
        }
        return {
            endIdx: i + 1,
            parser: function() {
                return currentPosStr.charAt(0);
            }
        };
    }
    this.filter = function(date, format) {
        if (!angular.isDate(date) || isNaN(date) || !format) {
            return "";
        }
        format = $locale.DATETIME_FORMATS[format] || format;
        if ($locale.id !== localeId) {
            this.init();
        }
        if (!this.formatters[format]) {
            this.formatters[format] = createFormatter(format);
        }
        var formatters = this.formatters[format];
        return formatters.reduce(function(str, formatter) {
            return str + formatter(date);
        }, "");
    };
    this.parse = function(input, format, baseDate) {
        if (!angular.isString(input) || !format) {
            return input;
        }
        format = $locale.DATETIME_FORMATS[format] || format;
        format = format.replace(SPECIAL_CHARACTERS_REGEXP, "\\$&");
        if ($locale.id !== localeId) {
            this.init();
        }
        if (!this.parsers[format]) {
            this.parsers[format] = createParser(format, "apply");
        }
        var parser = this.parsers[format], regex = parser.regex, map = parser.map, results = input.match(regex), tzOffset = false;
        if (results && results.length) {
            var fields, dt;
            if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
                fields = {
                    year: baseDate.getFullYear(),
                    month: baseDate.getMonth(),
                    date: baseDate.getDate(),
                    hours: baseDate.getHours(),
                    minutes: baseDate.getMinutes(),
                    seconds: baseDate.getSeconds(),
                    milliseconds: baseDate.getMilliseconds()
                };
            } else {
                if (baseDate) {
                    $log.warn("dateparser:", "baseDate is not a valid date");
                }
                fields = {
                    year: 1900,
                    month: 0,
                    date: 1,
                    hours: 0,
                    minutes: 0,
                    seconds: 0,
                    milliseconds: 0
                };
            }
            for (var i = 1, n = results.length; i < n; i++) {
                var mapper = map[i - 1];
                if (mapper.matcher === "Z") {
                    tzOffset = true;
                }
                if (mapper.apply) {
                    mapper.apply.call(fields, results[i]);
                }
            }
            var datesetter = tzOffset ? Date.prototype.setUTCFullYear : Date.prototype.setFullYear;
            var timesetter = tzOffset ? Date.prototype.setUTCHours : Date.prototype.setHours;
            if (isValid(fields.year, fields.month, fields.date)) {
                if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
                    dt = new Date(baseDate);
                    datesetter.call(dt, fields.year, fields.month, fields.date);
                    timesetter.call(dt, fields.hours, fields.minutes, fields.seconds, fields.milliseconds);
                } else {
                    dt = new Date(0);
                    datesetter.call(dt, fields.year, fields.month, fields.date);
                    timesetter.call(dt, fields.hours || 0, fields.minutes || 0, fields.seconds || 0, fields.milliseconds || 0);
                }
            }
            return dt;
        }
    };
    function isValid(year, month, date) {
        if (date < 1) {
            return false;
        }
        if (month === 1 && date > 28) {
            return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
        }
        if (month === 3 || month === 5 || month === 8 || month === 10) {
            return date < 31;
        }
        return true;
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    this.toTimezone = toTimezone;
    this.fromTimezone = fromTimezone;
    this.timezoneToOffset = timezoneToOffset;
    this.addDateMinutes = addDateMinutes;
    this.convertTimezoneToLocal = convertTimezoneToLocal;
    function toTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
    }
    function fromTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
    }
    function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(/:/g, "");
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
    }
} ]);

angular.module("ui.bootstrap.isClass", []).directive("uibIsClass", [ "$animate", function($animate) {
    var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
    var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;
    var dataPerTracked = {};
    return {
        restrict: "A",
        compile: function(tElement, tAttrs) {
            var linkedScopes = [];
            var instances = [];
            var expToData = {};
            var lastActivated = null;
            var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
            var onExp = onExpMatches[2];
            var expsStr = onExpMatches[1];
            var exps = expsStr.split(",");
            return linkFn;
            function linkFn(scope, element, attrs) {
                linkedScopes.push(scope);
                instances.push({
                    scope: scope,
                    element: element
                });
                exps.forEach(function(exp, k) {
                    addForExp(exp, scope);
                });
                scope.$on("$destroy", removeScope);
            }
            function addForExp(exp, scope) {
                var matches = exp.match(IS_REGEXP);
                var clazz = scope.$eval(matches[1]);
                var compareWithExp = matches[2];
                var data = expToData[exp];
                if (!data) {
                    var watchFn = function(compareWithVal) {
                        var newActivated = null;
                        instances.some(function(instance) {
                            var thisVal = instance.scope.$eval(onExp);
                            if (thisVal === compareWithVal) {
                                newActivated = instance;
                                return true;
                            }
                        });
                        if (data.lastActivated !== newActivated) {
                            if (data.lastActivated) {
                                $animate.removeClass(data.lastActivated.element, clazz);
                            }
                            if (newActivated) {
                                $animate.addClass(newActivated.element, clazz);
                            }
                            data.lastActivated = newActivated;
                        }
                    };
                    expToData[exp] = data = {
                        lastActivated: null,
                        scope: scope,
                        watchFn: watchFn,
                        compareWithExp: compareWithExp,
                        watcher: scope.$watch(compareWithExp, watchFn)
                    };
                }
                data.watchFn(scope.$eval(compareWithExp));
            }
            function removeScope(e) {
                var removedScope = e.targetScope;
                var index = linkedScopes.indexOf(removedScope);
                linkedScopes.splice(index, 1);
                instances.splice(index, 1);
                if (linkedScopes.length) {
                    var newWatchScope = linkedScopes[0];
                    angular.forEach(expToData, function(data) {
                        if (data.scope === removedScope) {
                            data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
                            data.scope = newWatchScope;
                        }
                    });
                } else {
                    expToData = {};
                }
            }
        }
    };
} ]);

angular.module("ui.bootstrap.datepicker", [ "ui.bootstrap.dateparser", "ui.bootstrap.isClass" ]).value("$datepickerSuppressError", false).value("$datepickerLiteralWarning", true).constant("uibDatepickerConfig", {
    datepickerMode: "day",
    formatDay: "dd",
    formatMonth: "MMMM",
    formatYear: "yyyy",
    formatDayHeader: "EEE",
    formatDayTitle: "MMMM yyyy",
    formatMonthTitle: "yyyy",
    maxDate: null,
    maxMode: "year",
    minDate: null,
    minMode: "day",
    monthColumns: 3,
    ngModelOptions: {},
    shortcutPropagation: false,
    showWeeks: true,
    yearColumns: 5,
    yearRows: 4
}).controller("UibDatepickerController", [ "$scope", "$element", "$attrs", "$parse", "$interpolate", "$locale", "$log", "dateFilter", "uibDatepickerConfig", "$datepickerLiteralWarning", "$datepickerSuppressError", "uibDateParser", function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    }, ngModelOptions = {}, watchListeners = [];
    $element.addClass("uib-datepicker");
    $attrs.$set("role", "application");
    if (!$scope.datepickerOptions) {
        $scope.datepickerOptions = {};
    }
    this.modes = [ "day", "month", "year" ];
    [ "customClass", "dateDisabled", "datepickerMode", "formatDay", "formatDayHeader", "formatDayTitle", "formatMonth", "formatMonthTitle", "formatYear", "maxDate", "maxMode", "minDate", "minMode", "monthColumns", "showWeeks", "shortcutPropagation", "startingDay", "yearColumns", "yearRows" ].forEach(function(key) {
        switch (key) {
          case "customClass":
          case "dateDisabled":
            $scope[key] = $scope.datepickerOptions[key] || angular.noop;
            break;

          case "datepickerMode":
            $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ? $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
            break;

          case "formatDay":
          case "formatDayHeader":
          case "formatDayTitle":
          case "formatMonth":
          case "formatMonthTitle":
          case "formatYear":
            self[key] = angular.isDefined($scope.datepickerOptions[key]) ? $interpolate($scope.datepickerOptions[key])($scope.$parent) : datepickerConfig[key];
            break;

          case "monthColumns":
          case "showWeeks":
          case "shortcutPropagation":
          case "yearColumns":
          case "yearRows":
            self[key] = angular.isDefined($scope.datepickerOptions[key]) ? $scope.datepickerOptions[key] : datepickerConfig[key];
            break;

          case "startingDay":
            if (angular.isDefined($scope.datepickerOptions.startingDay)) {
                self.startingDay = $scope.datepickerOptions.startingDay;
            } else if (angular.isNumber(datepickerConfig.startingDay)) {
                self.startingDay = datepickerConfig.startingDay;
            } else {
                self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
            }
            break;

          case "maxDate":
          case "minDate":
            $scope.$watch("datepickerOptions." + key, function(value) {
                if (value) {
                    if (angular.isDate(value)) {
                        self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.getOption("timezone"));
                    } else {
                        if ($datepickerLiteralWarning) {
                            $log.warn("Literal date support has been deprecated, please switch to date object usage");
                        }
                        self[key] = new Date(dateFilter(value, "medium"));
                    }
                } else {
                    self[key] = datepickerConfig[key] ? dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.getOption("timezone")) : null;
                }
                self.refreshView();
            });
            break;

          case "maxMode":
          case "minMode":
            if ($scope.datepickerOptions[key]) {
                $scope.$watch(function() {
                    return $scope.datepickerOptions[key];
                }, function(value) {
                    self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
                    if (key === "minMode" && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) || key === "maxMode" && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
                        $scope.datepickerMode = self[key];
                        $scope.datepickerOptions.datepickerMode = self[key];
                    }
                });
            } else {
                self[key] = $scope[key] = datepickerConfig[key] || null;
            }
            break;
        }
    });
    $scope.uniqueId = "datepicker-" + $scope.$id + "-" + Math.floor(Math.random() * 1e4);
    $scope.disabled = angular.isDefined($attrs.disabled) || false;
    if (angular.isDefined($attrs.ngDisabled)) {
        watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
            $scope.disabled = disabled;
            self.refreshView();
        }));
    }
    $scope.isActive = function(dateObject) {
        if (self.compare(dateObject.date, self.activeDate) === 0) {
            $scope.activeDateId = dateObject.uid;
            return true;
        }
        return false;
    };
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelOptions = extractOptions(ngModelCtrl);
        if ($scope.datepickerOptions.initDate) {
            self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.getOption("timezone")) || new Date();
            $scope.$watch("datepickerOptions.initDate", function(initDate) {
                if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
                    self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.getOption("timezone"));
                    self.refreshView();
                }
            });
        } else {
            self.activeDate = new Date();
        }
        var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
        this.activeDate = !isNaN(date) ? dateParser.fromTimezone(date, ngModelOptions.getOption("timezone")) : dateParser.fromTimezone(new Date(), ngModelOptions.getOption("timezone"));
        ngModelCtrl.$render = function() {
            self.render();
        };
    };
    this.render = function() {
        if (ngModelCtrl.$viewValue) {
            var date = new Date(ngModelCtrl.$viewValue), isValid = !isNaN(date);
            if (isValid) {
                this.activeDate = dateParser.fromTimezone(date, ngModelOptions.getOption("timezone"));
            } else if (!$datepickerSuppressError) {
                $log.error('Datepicker directive: "ng-model" value must be a Date object');
            }
        }
        this.refreshView();
    };
    this.refreshView = function() {
        if (this.element) {
            $scope.selectedDt = null;
            this._refreshView();
            if ($scope.activeDt) {
                $scope.activeDateId = $scope.activeDt.uid;
            }
            var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
            date = dateParser.fromTimezone(date, ngModelOptions.getOption("timezone"));
            ngModelCtrl.$setValidity("dateDisabled", !date || this.element && !this.isDisabled(date));
        }
    };
    this.createDateObject = function(date, format) {
        var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
        model = dateParser.fromTimezone(model, ngModelOptions.getOption("timezone"));
        var today = new Date();
        today = dateParser.fromTimezone(today, ngModelOptions.getOption("timezone"));
        var time = this.compare(date, today);
        var dt = {
            date: date,
            label: dateParser.filter(date, format),
            selected: model && this.compare(date, model) === 0,
            disabled: this.isDisabled(date),
            past: time < 0,
            current: time === 0,
            future: time > 0,
            customClass: this.customClass(date) || null
        };
        if (model && this.compare(date, model) === 0) {
            $scope.selectedDt = dt;
        }
        if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
            $scope.activeDt = dt;
        }
        return dt;
    };
    this.isDisabled = function(date) {
        return $scope.disabled || this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0 || $scope.dateDisabled && $scope.dateDisabled({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.customClass = function(date) {
        return $scope.customClass({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.split = function(arr, size) {
        var arrays = [];
        while (arr.length > 0) {
            arrays.push(arr.splice(0, size));
        }
        return arrays;
    };
    $scope.select = function(date) {
        if ($scope.datepickerMode === self.minMode) {
            var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.getOption("timezone")) : new Date(0, 0, 0, 0, 0, 0, 0);
            dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            dt = dateParser.toTimezone(dt, ngModelOptions.getOption("timezone"));
            ngModelCtrl.$setViewValue(dt);
            ngModelCtrl.$render();
        } else {
            self.activeDate = date;
            setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);
            $scope.$emit("uib:datepicker.mode");
        }
        $scope.$broadcast("uib:datepicker.focus");
    };
    $scope.move = function(direction) {
        var year = self.activeDate.getFullYear() + direction * (self.step.years || 0), month = self.activeDate.getMonth() + direction * (self.step.months || 0);
        self.activeDate.setFullYear(year, month, 1);
        self.refreshView();
    };
    $scope.toggleMode = function(direction) {
        direction = direction || 1;
        if ($scope.datepickerMode === self.maxMode && direction === 1 || $scope.datepickerMode === self.minMode && direction === -1) {
            return;
        }
        setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);
        $scope.$emit("uib:datepicker.mode");
    };
    $scope.keys = {
        13: "enter",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down"
    };
    var focusElement = function() {
        self.element[0].focus();
    };
    $scope.$on("uib:datepicker.focus", focusElement);
    $scope.keydown = function(evt) {
        var key = $scope.keys[evt.which];
        if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
            return;
        }
        evt.preventDefault();
        if (!self.shortcutPropagation) {
            evt.stopPropagation();
        }
        if (key === "enter" || key === "space") {
            if (self.isDisabled(self.activeDate)) {
                return;
            }
            $scope.select(self.activeDate);
        } else if (evt.ctrlKey && (key === "up" || key === "down")) {
            $scope.toggleMode(key === "up" ? 1 : -1);
        } else {
            self.handleKeyDown(key, evt);
            self.refreshView();
        }
    };
    $element.on("keydown", function(evt) {
        $scope.$apply(function() {
            $scope.keydown(evt);
        });
    });
    $scope.$on("$destroy", function() {
        while (watchListeners.length) {
            watchListeners.shift()();
        }
    });
    function setMode(mode) {
        $scope.datepickerMode = mode;
        $scope.datepickerOptions.datepickerMode = mode;
    }
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = ngModelCtrl.$options || $scope.datepickerOptions.ngModelOptions || datepickerConfig.ngModelOptions || {};
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            var timezone = ngModelCtrl.$options.getOption("timezone") || ($scope.datepickerOptions.ngModelOptions ? $scope.datepickerOptions.ngModelOptions.timezone : null) || (datepickerConfig.ngModelOptions ? datepickerConfig.ngModelOptions.timezone : null);
            ngModelOptions = ngModelCtrl.$options.createChild(datepickerConfig.ngModelOptions).createChild($scope.datepickerOptions.ngModelOptions).createChild(ngModelCtrl.$options).createChild({
                timezone: timezone
            });
        }
        return ngModelOptions;
    }
} ]).controller("UibDaypickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    var DAYS_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
    this.step = {
        months: 1
    };
    this.element = $element;
    function getDaysInMonth(year, month) {
        return month === 1 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
    }
    this.init = function(ctrl) {
        angular.extend(ctrl, this);
        scope.showWeeks = ctrl.showWeeks;
        ctrl.refreshView();
    };
    this.getDates = function(startDate, n) {
        var dates = new Array(n), current = new Date(startDate), i = 0, date;
        while (i < n) {
            date = new Date(current);
            dates[i++] = date;
            current.setDate(current.getDate() + 1);
        }
        return dates;
    };
    this._refreshView = function() {
        var year = this.activeDate.getFullYear(), month = this.activeDate.getMonth(), firstDayOfMonth = new Date(this.activeDate);
        firstDayOfMonth.setFullYear(year, month, 1);
        var difference = this.startingDay - firstDayOfMonth.getDay(), numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference, firstDate = new Date(firstDayOfMonth);
        if (numDisplayedFromPreviousMonth > 0) {
            firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
        }
        var days = this.getDates(firstDate, 42);
        for (var i = 0; i < 42; i++) {
            days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
                secondary: days[i].getMonth() !== month,
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.labels = new Array(7);
        for (var j = 0; j < 7; j++) {
            scope.labels[j] = {
                abbr: dateFilter(days[j].date, this.formatDayHeader),
                full: dateFilter(days[j].date, "EEEE")
            };
        }
        scope.title = dateFilter(this.activeDate, this.formatDayTitle);
        scope.rows = this.split(days, 7);
        if (scope.showWeeks) {
            scope.weekNumbers = [];
            var thursdayIndex = (4 + 7 - this.startingDay) % 7, numWeeks = scope.rows.length;
            for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
                scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
            }
        }
    };
    this.compare = function(date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
        var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
        _date1.setFullYear(date1.getFullYear());
        _date2.setFullYear(date2.getFullYear());
        return _date1 - _date2;
    };
    function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        var time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
    }
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getDate();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - 7;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + 7;
        } else if (key === "pageup" || key === "pagedown") {
            var month = this.activeDate.getMonth() + (key === "pageup" ? -1 : 1);
            this.activeDate.setMonth(month, 1);
            date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
        } else if (key === "home") {
            date = 1;
        } else if (key === "end") {
            date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
        }
        this.activeDate.setDate(date);
    };
} ]).controller("UibMonthpickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    this.step = {
        years: 1
    };
    this.element = $element;
    this.init = function(ctrl) {
        angular.extend(ctrl, this);
        ctrl.refreshView();
    };
    this._refreshView = function() {
        var months = new Array(12), year = this.activeDate.getFullYear(), date;
        for (var i = 0; i < 12; i++) {
            date = new Date(this.activeDate);
            date.setFullYear(year, i, 1);
            months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
        scope.rows = this.split(months, this.monthColumns);
        scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
    };
    this.compare = function(date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth());
        var _date2 = new Date(date2.getFullYear(), date2.getMonth());
        _date1.setFullYear(date1.getFullYear());
        _date2.setFullYear(date2.getFullYear());
        return _date1 - _date2;
    };
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getMonth();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - this.monthColumns;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + this.monthColumns;
        } else if (key === "pageup" || key === "pagedown") {
            var year = this.activeDate.getFullYear() + (key === "pageup" ? -1 : 1);
            this.activeDate.setFullYear(year);
        } else if (key === "home") {
            date = 0;
        } else if (key === "end") {
            date = 11;
        }
        this.activeDate.setMonth(date);
    };
} ]).controller("UibYearpickerController", [ "$scope", "$element", "dateFilter", function(scope, $element, dateFilter) {
    var columns, range;
    this.element = $element;
    function getStartingYear(year) {
        return parseInt((year - 1) / range, 10) * range + 1;
    }
    this.yearpickerInit = function() {
        columns = this.yearColumns;
        range = this.yearRows * columns;
        this.step = {
            years: range
        };
    };
    this._refreshView = function() {
        var years = new Array(range), date;
        for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
            date = new Date(this.activeDate);
            date.setFullYear(start + i, 0, 1);
            years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
                uid: scope.uniqueId + "-" + i
            });
        }
        scope.title = [ years[0].label, years[range - 1].label ].join(" - ");
        scope.rows = this.split(years, columns);
        scope.columns = columns;
    };
    this.compare = function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
    };
    this.handleKeyDown = function(key, evt) {
        var date = this.activeDate.getFullYear();
        if (key === "left") {
            date = date - 1;
        } else if (key === "up") {
            date = date - columns;
        } else if (key === "right") {
            date = date + 1;
        } else if (key === "down") {
            date = date + columns;
        } else if (key === "pageup" || key === "pagedown") {
            date += (key === "pageup" ? -1 : 1) * range;
        } else if (key === "home") {
            date = getStartingYear(this.activeDate.getFullYear());
        } else if (key === "end") {
            date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
        }
        this.activeDate.setFullYear(date);
    };
} ]).directive("uibDatepicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/datepicker.html";
        },
        scope: {
            datepickerOptions: "=?"
        },
        require: [ "uibDatepicker", "^ngModel" ],
        restrict: "A",
        controller: "UibDatepickerController",
        controllerAs: "datepicker",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            datepickerCtrl.init(ngModelCtrl);
        }
    };
}).directive("uibDaypicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/day.html";
        },
        require: [ "^uibDatepicker", "uibDaypicker" ],
        restrict: "A",
        controller: "UibDaypickerController",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], daypickerCtrl = ctrls[1];
            daypickerCtrl.init(datepickerCtrl);
        }
    };
}).directive("uibMonthpicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/month.html";
        },
        require: [ "^uibDatepicker", "uibMonthpicker" ],
        restrict: "A",
        controller: "UibMonthpickerController",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], monthpickerCtrl = ctrls[1];
            monthpickerCtrl.init(datepickerCtrl);
        }
    };
}).directive("uibYearpicker", function() {
    return {
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepicker/year.html";
        },
        require: [ "^uibDatepicker", "uibYearpicker" ],
        restrict: "A",
        controller: "UibYearpickerController",
        link: function(scope, element, attrs, ctrls) {
            var ctrl = ctrls[0];
            angular.extend(ctrl, ctrls[1]);
            ctrl.yearpickerInit();
            ctrl.refreshView();
        }
    };
});

angular.module("ui.bootstrap.position", []).factory("$uibPosition", [ "$document", "$window", function($document, $window) {
    var SCROLLBAR_WIDTH;
    var BODY_SCROLLBAR_WIDTH;
    var OVERFLOW_REGEX = {
        normal: /(auto|scroll)/,
        hidden: /(auto|scroll|hidden)/
    };
    var PLACEMENT_REGEX = {
        auto: /\s?auto?\s?/i,
        primary: /^(top|bottom|left|right)$/,
        secondary: /^(top|bottom|left|right|center)$/,
        vertical: /^(top|bottom)$/
    };
    var BODY_REGEX = /(HTML|BODY)/;
    return {
        getRawNode: function(elem) {
            return elem.nodeName ? elem : elem[0] || elem;
        },
        parseStyle: function(value) {
            value = parseFloat(value);
            return isFinite(value) ? value : 0;
        },
        offsetParent: function(elem) {
            elem = this.getRawNode(elem);
            var offsetParent = elem.offsetParent || $document[0].documentElement;
            function isStaticPositioned(el) {
                return ($window.getComputedStyle(el).position || "static") === "static";
            }
            while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
                offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || $document[0].documentElement;
        },
        scrollbarWidth: function(isBody) {
            if (isBody) {
                if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
                    var bodyElem = $document.find("body");
                    bodyElem.addClass("uib-position-body-scrollbar-measure");
                    BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
                    BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
                    bodyElem.removeClass("uib-position-body-scrollbar-measure");
                }
                return BODY_SCROLLBAR_WIDTH;
            }
            if (angular.isUndefined(SCROLLBAR_WIDTH)) {
                var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
                $document.find("body").append(scrollElem);
                SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
                SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
                scrollElem.remove();
            }
            return SCROLLBAR_WIDTH;
        },
        scrollbarPadding: function(elem) {
            elem = this.getRawNode(elem);
            var elemStyle = $window.getComputedStyle(elem);
            var paddingRight = this.parseStyle(elemStyle.paddingRight);
            var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
            var scrollParent = this.scrollParent(elem, false, true);
            var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));
            return {
                scrollbarWidth: scrollbarWidth,
                widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
                right: paddingRight + scrollbarWidth,
                originalRight: paddingRight,
                heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
                bottom: paddingBottom + scrollbarWidth,
                originalBottom: paddingBottom
            };
        },
        isScrollable: function(elem, includeHidden) {
            elem = this.getRawNode(elem);
            var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
            var elemStyle = $window.getComputedStyle(elem);
            return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
        },
        scrollParent: function(elem, includeHidden, includeSelf) {
            elem = this.getRawNode(elem);
            var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
            var documentEl = $document[0].documentElement;
            var elemStyle = $window.getComputedStyle(elem);
            if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
                return elem;
            }
            var excludeStatic = elemStyle.position === "absolute";
            var scrollParent = elem.parentElement || documentEl;
            if (scrollParent === documentEl || elemStyle.position === "fixed") {
                return documentEl;
            }
            while (scrollParent.parentElement && scrollParent !== documentEl) {
                var spStyle = $window.getComputedStyle(scrollParent);
                if (excludeStatic && spStyle.position !== "static") {
                    excludeStatic = false;
                }
                if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
                    break;
                }
                scrollParent = scrollParent.parentElement;
            }
            return scrollParent;
        },
        position: function(elem, includeMagins) {
            elem = this.getRawNode(elem);
            var elemOffset = this.offset(elem);
            if (includeMagins) {
                var elemStyle = $window.getComputedStyle(elem);
                elemOffset.top -= this.parseStyle(elemStyle.marginTop);
                elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
            }
            var parent = this.offsetParent(elem);
            var parentOffset = {
                top: 0,
                left: 0
            };
            if (parent !== $document[0].documentElement) {
                parentOffset = this.offset(parent);
                parentOffset.top += parent.clientTop - parent.scrollTop;
                parentOffset.left += parent.clientLeft - parent.scrollLeft;
            }
            return {
                width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
                height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
                top: Math.round(elemOffset.top - parentOffset.top),
                left: Math.round(elemOffset.left - parentOffset.left)
            };
        },
        offset: function(elem) {
            elem = this.getRawNode(elem);
            var elemBCR = elem.getBoundingClientRect();
            return {
                width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
                height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
                top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
                left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
            };
        },
        viewportOffset: function(elem, useDocument, includePadding) {
            elem = this.getRawNode(elem);
            includePadding = includePadding !== false ? true : false;
            var elemBCR = elem.getBoundingClientRect();
            var offsetBCR = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            };
            var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
            var offsetParentBCR = offsetParent.getBoundingClientRect();
            offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
            offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
            if (offsetParent === $document[0].documentElement) {
                offsetBCR.top += $window.pageYOffset;
                offsetBCR.left += $window.pageXOffset;
            }
            offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
            offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;
            if (includePadding) {
                var offsetParentStyle = $window.getComputedStyle(offsetParent);
                offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
                offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
                offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
                offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
            }
            return {
                top: Math.round(elemBCR.top - offsetBCR.top),
                bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
                left: Math.round(elemBCR.left - offsetBCR.left),
                right: Math.round(offsetBCR.right - elemBCR.right)
            };
        },
        parsePlacement: function(placement) {
            var autoPlace = PLACEMENT_REGEX.auto.test(placement);
            if (autoPlace) {
                placement = placement.replace(PLACEMENT_REGEX.auto, "");
            }
            placement = placement.split("-");
            placement[0] = placement[0] || "top";
            if (!PLACEMENT_REGEX.primary.test(placement[0])) {
                placement[0] = "top";
            }
            placement[1] = placement[1] || "center";
            if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
                placement[1] = "center";
            }
            if (autoPlace) {
                placement[2] = true;
            } else {
                placement[2] = false;
            }
            return placement;
        },
        positionElements: function(hostElem, targetElem, placement, appendToBody) {
            hostElem = this.getRawNode(hostElem);
            targetElem = this.getRawNode(targetElem);
            var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop("offsetWidth");
            var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop("offsetHeight");
            placement = this.parsePlacement(placement);
            var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
            var targetElemPos = {
                top: 0,
                left: 0,
                placement: ""
            };
            if (placement[2]) {
                var viewportOffset = this.viewportOffset(hostElem, appendToBody);
                var targetElemStyle = $window.getComputedStyle(targetElem);
                var adjustedSize = {
                    width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
                    height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
                };
                placement[0] = placement[0] === "top" && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? "bottom" : placement[0] === "bottom" && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? "top" : placement[0] === "left" && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? "right" : placement[0] === "right" && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? "left" : placement[0];
                placement[1] = placement[1] === "top" && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? "bottom" : placement[1] === "bottom" && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? "top" : placement[1] === "left" && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? "right" : placement[1] === "right" && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? "left" : placement[1];
                if (placement[1] === "center") {
                    if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                        var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
                        if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
                            placement[1] = "left";
                        } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
                            placement[1] = "right";
                        }
                    } else {
                        var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
                        if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
                            placement[1] = "top";
                        } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
                            placement[1] = "bottom";
                        }
                    }
                }
            }
            switch (placement[0]) {
              case "top":
                targetElemPos.top = hostElemPos.top - targetHeight;
                break;

              case "bottom":
                targetElemPos.top = hostElemPos.top + hostElemPos.height;
                break;

              case "left":
                targetElemPos.left = hostElemPos.left - targetWidth;
                break;

              case "right":
                targetElemPos.left = hostElemPos.left + hostElemPos.width;
                break;
            }
            switch (placement[1]) {
              case "top":
                targetElemPos.top = hostElemPos.top;
                break;

              case "bottom":
                targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
                break;

              case "left":
                targetElemPos.left = hostElemPos.left;
                break;

              case "right":
                targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
                break;

              case "center":
                if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                    targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
                } else {
                    targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
                }
                break;
            }
            targetElemPos.top = Math.round(targetElemPos.top);
            targetElemPos.left = Math.round(targetElemPos.left);
            targetElemPos.placement = placement[1] === "center" ? placement[0] : placement[0] + "-" + placement[1];
            return targetElemPos;
        },
        adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
            if (placementClasses.indexOf("top") !== -1 && initialHeight !== currentHeight) {
                return {
                    top: containerPosition.top - currentHeight + "px"
                };
            }
        },
        positionArrow: function(elem, placement) {
            elem = this.getRawNode(elem);
            var innerElem = elem.querySelector(".tooltip-inner, .popover-inner");
            if (!innerElem) {
                return;
            }
            var isTooltip = angular.element(innerElem).hasClass("tooltip-inner");
            var arrowElem = isTooltip ? elem.querySelector(".tooltip-arrow") : elem.querySelector(".arrow");
            if (!arrowElem) {
                return;
            }
            var arrowCss = {
                top: "",
                bottom: "",
                left: "",
                right: ""
            };
            placement = this.parsePlacement(placement);
            if (placement[1] === "center") {
                angular.element(arrowElem).css(arrowCss);
                return;
            }
            var borderProp = "border-" + placement[0] + "-width";
            var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];
            var borderRadiusProp = "border-";
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                borderRadiusProp += placement[0] + "-" + placement[1];
            } else {
                borderRadiusProp += placement[1] + "-" + placement[0];
            }
            borderRadiusProp += "-radius";
            var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];
            switch (placement[0]) {
              case "top":
                arrowCss.bottom = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "bottom":
                arrowCss.top = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "left":
                arrowCss.right = isTooltip ? "0" : "-" + borderWidth;
                break;

              case "right":
                arrowCss.left = isTooltip ? "0" : "-" + borderWidth;
                break;
            }
            arrowCss[placement[1]] = borderRadius;
            angular.element(arrowElem).css(arrowCss);
        }
    };
} ]);

angular.module("ui.bootstrap.datepickerPopup", [ "ui.bootstrap.datepicker", "ui.bootstrap.position" ]).value("$datepickerPopupLiteralWarning", true).constant("uibDatepickerPopupConfig", {
    altInputFormats: [],
    appendToBody: false,
    clearText: "Clear",
    closeOnDateSelection: true,
    closeText: "Done",
    currentText: "Today",
    datepickerPopup: "yyyy-MM-dd",
    datepickerPopupTemplateUrl: "uib/template/datepickerPopup/popup.html",
    datepickerTemplateUrl: "uib/template/datepicker/datepicker.html",
    html5Types: {
        date: "yyyy-MM-dd",
        "datetime-local": "yyyy-MM-ddTHH:mm:ss.sss",
        month: "yyyy-MM"
    },
    onOpenFocus: true,
    showButtonBar: true,
    placement: "auto bottom-left"
}).controller("UibDatepickerPopupController", [ "$scope", "$element", "$attrs", "$compile", "$log", "$parse", "$window", "$document", "$rootScope", "$uibPosition", "dateFilter", "uibDateParser", "uibDatepickerPopupConfig", "$timeout", "uibDatepickerConfig", "$datepickerPopupLiteralWarning", function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
    var cache = {}, isHtml5DateInput = false;
    var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus, datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl, ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];
    this.init = function(_ngModel_) {
        ngModel = _ngModel_;
        ngModelOptions = extractOptions(ngModel);
        closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ? $scope.$parent.$eval($attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection;
        appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ? $scope.$parent.$eval($attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;
        onOpenFocus = angular.isDefined($attrs.onOpenFocus) ? $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
        datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ? $attrs.datepickerPopupTemplateUrl : datepickerPopupConfig.datepickerPopupTemplateUrl;
        datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ? $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
        altInputFormats = angular.isDefined($attrs.altInputFormats) ? $scope.$parent.$eval($attrs.altInputFormats) : datepickerPopupConfig.altInputFormats;
        $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ? $scope.$parent.$eval($attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;
        if (datepickerPopupConfig.html5Types[$attrs.type]) {
            dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
            isHtml5DateInput = true;
        } else {
            dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
            $attrs.$observe("uibDatepickerPopup", function(value, oldValue) {
                var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
                if (newDateFormat !== dateFormat) {
                    dateFormat = newDateFormat;
                    ngModel.$modelValue = null;
                    if (!dateFormat) {
                        throw new Error("uibDatepickerPopup must have a date format specified.");
                    }
                }
            });
        }
        if (!dateFormat) {
            throw new Error("uibDatepickerPopup must have a date format specified.");
        }
        if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
            throw new Error("HTML5 date input types do not support custom formats.");
        }
        popupEl = angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>");
        popupEl.attr({
            "ng-model": "date",
            "ng-change": "dateSelection(date)",
            "template-url": datepickerPopupTemplateUrl
        });
        datepickerEl = angular.element(popupEl.children()[0]);
        datepickerEl.attr("template-url", datepickerTemplateUrl);
        if (!$scope.datepickerOptions) {
            $scope.datepickerOptions = {};
        }
        if (isHtml5DateInput) {
            if ($attrs.type === "month") {
                $scope.datepickerOptions.datepickerMode = "month";
                $scope.datepickerOptions.minMode = "month";
            }
        }
        datepickerEl.attr("datepicker-options", "datepickerOptions");
        if (!isHtml5DateInput) {
            ngModel.$$parserName = "date";
            ngModel.$validators.date = validator;
            ngModel.$parsers.unshift(parseDate);
            ngModel.$formatters.push(function(value) {
                if (ngModel.$isEmpty(value)) {
                    $scope.date = value;
                    return value;
                }
                if (angular.isNumber(value)) {
                    value = new Date(value);
                }
                $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption("timezone"));
                return dateParser.filter($scope.date, dateFormat);
            });
        } else {
            ngModel.$formatters.push(function(value) {
                $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption("timezone"));
                return value;
            });
        }
        ngModel.$viewChangeListeners.push(function() {
            $scope.date = parseDateString(ngModel.$viewValue);
        });
        $element.on("keydown", inputKeydownBind);
        $popup = $compile(popupEl)($scope);
        popupEl.remove();
        if (appendToBody) {
            $document.find("body").append($popup);
        } else {
            $element.after($popup);
        }
        $scope.$on("$destroy", function() {
            if ($scope.isOpen === true) {
                if (!$rootScope.$$phase) {
                    $scope.$apply(function() {
                        $scope.isOpen = false;
                    });
                }
            }
            $popup.remove();
            $element.off("keydown", inputKeydownBind);
            $document.off("click", documentClickBind);
            if (scrollParentEl) {
                scrollParentEl.off("scroll", positionPopup);
            }
            angular.element($window).off("resize", positionPopup);
            while (watchListeners.length) {
                watchListeners.shift()();
            }
        });
    };
    $scope.getText = function(key) {
        return $scope[key + "Text"] || datepickerPopupConfig[key + "Text"];
    };
    $scope.isDisabled = function(date) {
        if (date === "today") {
            date = dateParser.fromTimezone(new Date(), ngModelOptions.getOption("timezone"));
        }
        var dates = {};
        angular.forEach([ "minDate", "maxDate" ], function(key) {
            if (!$scope.datepickerOptions[key]) {
                dates[key] = null;
            } else if (angular.isDate($scope.datepickerOptions[key])) {
                dates[key] = new Date($scope.datepickerOptions[key]);
            } else {
                if ($datepickerPopupLiteralWarning) {
                    $log.warn("Literal date support has been deprecated, please switch to date object usage");
                }
                dates[key] = new Date(dateFilter($scope.datepickerOptions[key], "medium"));
            }
        });
        return $scope.datepickerOptions && dates.minDate && $scope.compare(date, dates.minDate) < 0 || dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
    };
    $scope.compare = function(date1, date2) {
        return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    };
    $scope.dateSelection = function(dt) {
        $scope.date = dt;
        var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null;
        $element.val(date);
        ngModel.$setViewValue(date);
        if (closeOnDateSelection) {
            $scope.isOpen = false;
            $element[0].focus();
        }
    };
    $scope.keydown = function(evt) {
        if (evt.which === 27) {
            evt.stopPropagation();
            $scope.isOpen = false;
            $element[0].focus();
        }
    };
    $scope.select = function(date, evt) {
        evt.stopPropagation();
        if (date === "today") {
            var today = new Date();
            if (angular.isDate($scope.date)) {
                date = new Date($scope.date);
                date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
            } else {
                date = dateParser.fromTimezone(today, ngModelOptions.getOption("timezone"));
                date.setHours(0, 0, 0, 0);
            }
        }
        $scope.dateSelection(date);
    };
    $scope.close = function(evt) {
        evt.stopPropagation();
        $scope.isOpen = false;
        $element[0].focus();
    };
    $scope.disabled = angular.isDefined($attrs.disabled) || false;
    if ($attrs.ngDisabled) {
        watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
            $scope.disabled = disabled;
        }));
    }
    $scope.$watch("isOpen", function(value) {
        if (value) {
            if (!$scope.disabled) {
                $timeout(function() {
                    positionPopup();
                    if (onOpenFocus) {
                        $scope.$broadcast("uib:datepicker.focus");
                    }
                    $document.on("click", documentClickBind);
                    var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
                    if (appendToBody || $position.parsePlacement(placement)[2]) {
                        scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
                        if (scrollParentEl) {
                            scrollParentEl.on("scroll", positionPopup);
                        }
                    } else {
                        scrollParentEl = null;
                    }
                    angular.element($window).on("resize", positionPopup);
                }, 0, false);
            } else {
                $scope.isOpen = false;
            }
        } else {
            $document.off("click", documentClickBind);
            if (scrollParentEl) {
                scrollParentEl.off("scroll", positionPopup);
            }
            angular.element($window).off("resize", positionPopup);
        }
    });
    function cameltoDash(string) {
        return string.replace(/([A-Z])/g, function($1) {
            return "-" + $1.toLowerCase();
        });
    }
    function parseDateString(viewValue) {
        var date = dateParser.parse(viewValue, dateFormat, $scope.date);
        if (isNaN(date)) {
            for (var i = 0; i < altInputFormats.length; i++) {
                date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
                if (!isNaN(date)) {
                    return date;
                }
            }
        }
        return date;
    }
    function parseDate(viewValue) {
        if (angular.isNumber(viewValue)) {
            viewValue = new Date(viewValue);
        }
        if (!viewValue) {
            return null;
        }
        if (angular.isDate(viewValue) && !isNaN(viewValue)) {
            return viewValue;
        }
        if (angular.isString(viewValue)) {
            var date = parseDateString(viewValue);
            if (!isNaN(date)) {
                return dateParser.toTimezone(date, ngModelOptions.getOption("timezone"));
            }
        }
        return ngModelOptions.getOption("allowInvalid") ? viewValue : undefined;
    }
    function validator(modelValue, viewValue) {
        var value = modelValue || viewValue;
        if (!$attrs.ngRequired && !value) {
            return true;
        }
        if (angular.isNumber(value)) {
            value = new Date(value);
        }
        if (!value) {
            return true;
        }
        if (angular.isDate(value) && !isNaN(value)) {
            return true;
        }
        if (angular.isString(value)) {
            return !isNaN(parseDateString(value));
        }
        return false;
    }
    function documentClickBind(event) {
        if (!$scope.isOpen && $scope.disabled) {
            return;
        }
        var popup = $popup[0];
        var dpContainsTarget = $element[0].contains(event.target);
        var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
        if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
            $scope.$apply(function() {
                $scope.isOpen = false;
            });
        }
    }
    function inputKeydownBind(evt) {
        if (evt.which === 27 && $scope.isOpen) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.$apply(function() {
                $scope.isOpen = false;
            });
            $element[0].focus();
        } else if (evt.which === 40 && !$scope.isOpen) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.$apply(function() {
                $scope.isOpen = true;
            });
        }
    }
    function positionPopup() {
        if ($scope.isOpen) {
            var dpElement = angular.element($popup[0].querySelector(".uib-datepicker-popup"));
            var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
            var position = $position.positionElements($element, dpElement, placement, appendToBody);
            dpElement.css({
                top: position.top + "px",
                left: position.left + "px"
            });
            if (dpElement.hasClass("uib-position-measure")) {
                dpElement.removeClass("uib-position-measure");
            }
        }
    }
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = angular.isObject(ngModelCtrl.$options) ? ngModelCtrl.$options : {
                timezone: null
            };
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            ngModelOptions = ngModelCtrl.$options;
        }
        return ngModelOptions;
    }
    $scope.$on("uib:datepicker.mode", function() {
        $timeout(positionPopup, 0, false);
    });
} ]).directive("uibDatepickerPopup", function() {
    return {
        require: [ "ngModel", "uibDatepickerPopup" ],
        controller: "UibDatepickerPopupController",
        scope: {
            datepickerOptions: "=?",
            isOpen: "=?",
            currentText: "@",
            clearText: "@",
            closeText: "@"
        },
        link: function(scope, element, attrs, ctrls) {
            var ngModel = ctrls[0], ctrl = ctrls[1];
            ctrl.init(ngModel);
        }
    };
}).directive("uibDatepickerPopupWrap", function() {
    return {
        restrict: "A",
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/datepickerPopup/popup.html";
        }
    };
});

angular.module("ui.bootstrap.debounce", []).factory("$$debounce", [ "$timeout", function($timeout) {
    return function(callback, debounceTime) {
        var timeoutPromise;
        return function() {
            var self = this;
            var args = Array.prototype.slice.call(arguments);
            if (timeoutPromise) {
                $timeout.cancel(timeoutPromise);
            }
            timeoutPromise = $timeout(function() {
                callback.apply(self, args);
            }, debounceTime);
        };
    };
} ]);

angular.module("ui.bootstrap.multiMap", []).factory("$$multiMap", function() {
    return {
        createNew: function() {
            var map = {};
            return {
                entries: function() {
                    return Object.keys(map).map(function(key) {
                        return {
                            key: key,
                            value: map[key]
                        };
                    });
                },
                get: function(key) {
                    return map[key];
                },
                hasKey: function(key) {
                    return !!map[key];
                },
                keys: function() {
                    return Object.keys(map);
                },
                put: function(key, value) {
                    if (!map[key]) {
                        map[key] = [];
                    }
                    map[key].push(value);
                },
                remove: function(key, value) {
                    var values = map[key];
                    if (!values) {
                        return;
                    }
                    var idx = values.indexOf(value);
                    if (idx !== -1) {
                        values.splice(idx, 1);
                    }
                    if (!values.length) {
                        delete map[key];
                    }
                }
            };
        }
    };
});

angular.module("ui.bootstrap.dropdown", [ "ui.bootstrap.multiMap", "ui.bootstrap.position" ]).constant("uibDropdownConfig", {
    appendToOpenClass: "uib-dropdown-open",
    openClass: "open"
}).service("uibDropdownService", [ "$document", "$rootScope", "$$multiMap", function($document, $rootScope, $$multiMap) {
    var openScope = null;
    var openedContainers = $$multiMap.createNew();
    this.isOnlyOpen = function(dropdownScope, appendTo) {
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var openDropdown = openedDropdowns.reduce(function(toClose, dropdown) {
                if (dropdown.scope === dropdownScope) {
                    return dropdown;
                }
                return toClose;
            }, {});
            if (openDropdown) {
                return openedDropdowns.length === 1;
            }
        }
        return false;
    };
    this.open = function(dropdownScope, element, appendTo) {
        if (!openScope) {
            $document.on("click", closeDropdown);
        }
        if (openScope && openScope !== dropdownScope) {
            openScope.isOpen = false;
        }
        openScope = dropdownScope;
        if (!appendTo) {
            return;
        }
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var openedScopes = openedDropdowns.map(function(dropdown) {
                return dropdown.scope;
            });
            if (openedScopes.indexOf(dropdownScope) === -1) {
                openedContainers.put(appendTo, {
                    scope: dropdownScope
                });
            }
        } else {
            openedContainers.put(appendTo, {
                scope: dropdownScope
            });
        }
    };
    this.close = function(dropdownScope, element, appendTo) {
        if (openScope === dropdownScope) {
            $document.off("click", closeDropdown);
            $document.off("keydown", this.keybindFilter);
            openScope = null;
        }
        if (!appendTo) {
            return;
        }
        var openedDropdowns = openedContainers.get(appendTo);
        if (openedDropdowns) {
            var dropdownToClose = openedDropdowns.reduce(function(toClose, dropdown) {
                if (dropdown.scope === dropdownScope) {
                    return dropdown;
                }
                return toClose;
            }, {});
            if (dropdownToClose) {
                openedContainers.remove(appendTo, dropdownToClose);
            }
        }
    };
    var closeDropdown = function(evt) {
        if (!openScope || !openScope.isOpen) {
            return;
        }
        if (evt && openScope.getAutoClose() === "disabled") {
            return;
        }
        if (evt && evt.which === 3) {
            return;
        }
        var toggleElement = openScope.getToggleElement();
        if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
            return;
        }
        var dropdownElement = openScope.getDropdownElement();
        if (evt && openScope.getAutoClose() === "outsideClick" && dropdownElement && dropdownElement[0].contains(evt.target)) {
            return;
        }
        openScope.focusToggleElement();
        openScope.isOpen = false;
        if (!$rootScope.$$phase) {
            openScope.$apply();
        }
    };
    this.keybindFilter = function(evt) {
        if (!openScope) {
            return;
        }
        var dropdownElement = openScope.getDropdownElement();
        var toggleElement = openScope.getToggleElement();
        var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
        var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
        if (evt.which === 27) {
            evt.stopPropagation();
            openScope.focusToggleElement();
            closeDropdown();
        } else if (openScope.isKeynavEnabled() && [ 38, 40 ].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
            evt.preventDefault();
            evt.stopPropagation();
            openScope.focusDropdownEntry(evt.which);
        }
    };
} ]).controller("UibDropdownController", [ "$scope", "$element", "$attrs", "$parse", "uibDropdownConfig", "uibDropdownService", "$animate", "$uibPosition", "$document", "$compile", "$templateRequest", function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
    var self = this, scope = $scope.$new(), templateScope, appendToOpenClass = dropdownConfig.appendToOpenClass, openClass = dropdownConfig.openClass, getIsOpen, setIsOpen = angular.noop, toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop, keynavEnabled = false, selectedOption = null, body = $document.find("body");
    $element.addClass("dropdown");
    this.init = function() {
        if ($attrs.isOpen) {
            getIsOpen = $parse($attrs.isOpen);
            setIsOpen = getIsOpen.assign;
            $scope.$watch(getIsOpen, function(value) {
                scope.isOpen = !!value;
            });
        }
        keynavEnabled = angular.isDefined($attrs.keyboardNav);
    };
    this.toggle = function(open) {
        scope.isOpen = arguments.length ? !!open : !scope.isOpen;
        if (angular.isFunction(setIsOpen)) {
            setIsOpen(scope, scope.isOpen);
        }
        return scope.isOpen;
    };
    this.isOpen = function() {
        return scope.isOpen;
    };
    scope.getToggleElement = function() {
        return self.toggleElement;
    };
    scope.getAutoClose = function() {
        return $attrs.autoClose || "always";
    };
    scope.getElement = function() {
        return $element;
    };
    scope.isKeynavEnabled = function() {
        return keynavEnabled;
    };
    scope.focusDropdownEntry = function(keyCode) {
        var elems = self.dropdownMenu ? angular.element(self.dropdownMenu).find("a") : $element.find("ul").eq(0).find("a");
        switch (keyCode) {
          case 40:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = 0;
                } else {
                    self.selectedOption = self.selectedOption === elems.length - 1 ? self.selectedOption : self.selectedOption + 1;
                }
                break;
            }

          case 38:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = elems.length - 1;
                } else {
                    self.selectedOption = self.selectedOption === 0 ? 0 : self.selectedOption - 1;
                }
                break;
            }
        }
        elems[self.selectedOption].focus();
    };
    scope.getDropdownElement = function() {
        return self.dropdownMenu;
    };
    scope.focusToggleElement = function() {
        if (self.toggleElement) {
            self.toggleElement[0].focus();
        }
    };
    function removeDropdownMenu() {
        $element.append(self.dropdownMenu);
    }
    scope.$watch("isOpen", function(isOpen, wasOpen) {
        var appendTo = null, appendToBody = false;
        if (angular.isDefined($attrs.dropdownAppendTo)) {
            var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
            if (appendToEl) {
                appendTo = angular.element(appendToEl);
            }
        }
        if (angular.isDefined($attrs.dropdownAppendToBody)) {
            var appendToBodyValue = $parse($attrs.dropdownAppendToBody)(scope);
            if (appendToBodyValue !== false) {
                appendToBody = true;
            }
        }
        if (appendToBody && !appendTo) {
            appendTo = body;
        }
        if (appendTo && self.dropdownMenu) {
            if (isOpen) {
                appendTo.append(self.dropdownMenu);
                $element.on("$destroy", removeDropdownMenu);
            } else {
                $element.off("$destroy", removeDropdownMenu);
                removeDropdownMenu();
            }
        }
        if (appendTo && self.dropdownMenu) {
            var pos = $position.positionElements($element, self.dropdownMenu, "bottom-left", true), css, rightalign, scrollbarPadding, scrollbarWidth = 0;
            css = {
                top: pos.top + "px",
                display: isOpen ? "block" : "none"
            };
            rightalign = self.dropdownMenu.hasClass("dropdown-menu-right");
            if (!rightalign) {
                css.left = pos.left + "px";
                css.right = "auto";
            } else {
                css.left = "auto";
                scrollbarPadding = $position.scrollbarPadding(appendTo);
                if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                    scrollbarWidth = scrollbarPadding.scrollbarWidth;
                }
                css.right = window.innerWidth - scrollbarWidth - (pos.left + $element.prop("offsetWidth")) + "px";
            }
            if (!appendToBody) {
                var appendOffset = $position.offset(appendTo);
                css.top = pos.top - appendOffset.top + "px";
                if (!rightalign) {
                    css.left = pos.left - appendOffset.left + "px";
                } else {
                    css.right = window.innerWidth - (pos.left - appendOffset.left + $element.prop("offsetWidth")) + "px";
                }
            }
            self.dropdownMenu.css(css);
        }
        var openContainer = appendTo ? appendTo : $element;
        var dropdownOpenClass = appendTo ? appendToOpenClass : openClass;
        var hasOpenClass = openContainer.hasClass(dropdownOpenClass);
        var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo);
        if (hasOpenClass === !isOpen) {
            var toggleClass;
            if (appendTo) {
                toggleClass = !isOnlyOpen ? "addClass" : "removeClass";
            } else {
                toggleClass = isOpen ? "addClass" : "removeClass";
            }
            $animate[toggleClass](openContainer, dropdownOpenClass).then(function() {
                if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
                    toggleInvoker($scope, {
                        open: !!isOpen
                    });
                }
            });
        }
        if (isOpen) {
            if (self.dropdownMenuTemplateUrl) {
                $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
                    templateScope = scope.$new();
                    $compile(tplContent.trim())(templateScope, function(dropdownElement) {
                        var newEl = dropdownElement;
                        self.dropdownMenu.replaceWith(newEl);
                        self.dropdownMenu = newEl;
                        $document.on("keydown", uibDropdownService.keybindFilter);
                    });
                });
            } else {
                $document.on("keydown", uibDropdownService.keybindFilter);
            }
            scope.focusToggleElement();
            uibDropdownService.open(scope, $element, appendTo);
        } else {
            uibDropdownService.close(scope, $element, appendTo);
            if (self.dropdownMenuTemplateUrl) {
                if (templateScope) {
                    templateScope.$destroy();
                }
                var newEl = angular.element('<ul class="dropdown-menu"></ul>');
                self.dropdownMenu.replaceWith(newEl);
                self.dropdownMenu = newEl;
            }
            self.selectedOption = null;
        }
        if (angular.isFunction(setIsOpen)) {
            setIsOpen($scope, isOpen);
        }
    });
} ]).directive("uibDropdown", function() {
    return {
        controller: "UibDropdownController",
        link: function(scope, element, attrs, dropdownCtrl) {
            dropdownCtrl.init();
        }
    };
}).directive("uibDropdownMenu", function() {
    return {
        restrict: "A",
        require: "?^uibDropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
                return;
            }
            element.addClass("dropdown-menu");
            var tplUrl = attrs.templateUrl;
            if (tplUrl) {
                dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
            }
            if (!dropdownCtrl.dropdownMenu) {
                dropdownCtrl.dropdownMenu = element;
            }
        }
    };
}).directive("uibDropdownToggle", function() {
    return {
        require: "?^uibDropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl) {
                return;
            }
            element.addClass("dropdown-toggle");
            dropdownCtrl.toggleElement = element;
            var toggleDropdown = function(event) {
                event.preventDefault();
                if (!element.hasClass("disabled") && !attrs.disabled) {
                    scope.$apply(function() {
                        dropdownCtrl.toggle();
                    });
                }
            };
            element.on("click", toggleDropdown);
            element.attr({
                "aria-haspopup": true,
                "aria-expanded": false
            });
            scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
                element.attr("aria-expanded", !!isOpen);
            });
            scope.$on("$destroy", function() {
                element.off("click", toggleDropdown);
            });
        }
    };
});

angular.module("ui.bootstrap.stackedMap", []).factory("$$stackedMap", function() {
    return {
        createNew: function() {
            var stack = [];
            return {
                add: function(key, value) {
                    stack.push({
                        key: key,
                        value: value
                    });
                },
                get: function(key) {
                    for (var i = 0; i < stack.length; i++) {
                        if (key === stack[i].key) {
                            return stack[i];
                        }
                    }
                },
                keys: function() {
                    var keys = [];
                    for (var i = 0; i < stack.length; i++) {
                        keys.push(stack[i].key);
                    }
                    return keys;
                },
                top: function() {
                    return stack[stack.length - 1];
                },
                remove: function(key) {
                    var idx = -1;
                    for (var i = 0; i < stack.length; i++) {
                        if (key === stack[i].key) {
                            idx = i;
                            break;
                        }
                    }
                    return stack.splice(idx, 1)[0];
                },
                removeTop: function() {
                    return stack.pop();
                },
                length: function() {
                    return stack.length;
                }
            };
        }
    };
});

angular.module("ui.bootstrap.modal", [ "ui.bootstrap.multiMap", "ui.bootstrap.stackedMap", "ui.bootstrap.position" ]).provider("$uibResolve", function() {
    var resolve = this;
    this.resolver = null;
    this.setResolver = function(resolver) {
        this.resolver = resolver;
    };
    this.$get = [ "$injector", "$q", function($injector, $q) {
        var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
        return {
            resolve: function(invocables, locals, parent, self) {
                if (resolver) {
                    return resolver.resolve(invocables, locals, parent, self);
                }
                var promises = [];
                angular.forEach(invocables, function(value) {
                    if (angular.isFunction(value) || angular.isArray(value)) {
                        promises.push($q.resolve($injector.invoke(value)));
                    } else if (angular.isString(value)) {
                        promises.push($q.resolve($injector.get(value)));
                    } else {
                        promises.push($q.resolve(value));
                    }
                });
                return $q.all(promises).then(function(resolves) {
                    var resolveObj = {};
                    var resolveIter = 0;
                    angular.forEach(invocables, function(value, key) {
                        resolveObj[key] = resolves[resolveIter++];
                    });
                    return resolveObj;
                });
            }
        };
    } ];
}).directive("uibModalBackdrop", [ "$animate", "$injector", "$uibModalStack", function($animate, $injector, $modalStack) {
    return {
        restrict: "A",
        compile: function(tElement, tAttrs) {
            tElement.addClass(tAttrs.backdropClass);
            return linkFn;
        }
    };
    function linkFn(scope, element, attrs) {
        if (attrs.modalInClass) {
            $animate.addClass(element, attrs.modalInClass);
            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                var done = setIsAsync();
                if (scope.modalOptions.animation) {
                    $animate.removeClass(element, attrs.modalInClass).then(done);
                } else {
                    done();
                }
            });
        }
    }
} ]).directive("uibModalWindow", [ "$uibModalStack", "$q", "$animateCss", "$document", function($modalStack, $q, $animateCss, $document) {
    return {
        scope: {
            index: "@"
        },
        restrict: "A",
        transclude: true,
        templateUrl: function(tElement, tAttrs) {
            return tAttrs.templateUrl || "uib/template/modal/window.html";
        },
        link: function(scope, element, attrs) {
            element.addClass(attrs.windowTopClass || "");
            scope.size = attrs.size;
            scope.close = function(evt) {
                var modal = $modalStack.getTop();
                if (modal && modal.value.backdrop && modal.value.backdrop !== "static" && evt.target === evt.currentTarget) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    $modalStack.dismiss(modal.key, "backdrop click");
                }
            };
            element.on("click", scope.close);
            scope.$isRendered = true;
            var modalRenderDeferObj = $q.defer();
            scope.$$postDigest(function() {
                modalRenderDeferObj.resolve();
            });
            modalRenderDeferObj.promise.then(function() {
                var animationPromise = null;
                if (attrs.modalInClass) {
                    animationPromise = $animateCss(element, {
                        addClass: attrs.modalInClass
                    }).start();
                    scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                        var done = setIsAsync();
                        $animateCss(element, {
                            removeClass: attrs.modalInClass
                        }).start().then(done);
                    });
                }
                $q.when(animationPromise).then(function() {
                    var modal = $modalStack.getTop();
                    if (modal) {
                        $modalStack.modalRendered(modal.key);
                    }
                    if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
                        var inputWithAutofocus = element[0].querySelector("[autofocus]");
                        if (inputWithAutofocus) {
                            inputWithAutofocus.focus();
                        } else {
                            element[0].focus();
                        }
                    }
                });
            });
        }
    };
} ]).directive("uibModalAnimationClass", function() {
    return {
        compile: function(tElement, tAttrs) {
            if (tAttrs.modalAnimation) {
                tElement.addClass(tAttrs.uibModalAnimationClass);
            }
        }
    };
}).directive("uibModalTransclude", [ "$animate", function($animate) {
    return {
        link: function(scope, element, attrs, controller, transclude) {
            transclude(scope.$parent, function(clone) {
                element.empty();
                $animate.enter(clone, element);
            });
        }
    };
} ]).factory("$uibModalStack", [ "$animate", "$animateCss", "$document", "$compile", "$rootScope", "$q", "$$multiMap", "$$stackedMap", "$uibPosition", function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
    var OPENED_MODAL_CLASS = "modal-open";
    var backdropDomEl, backdropScope;
    var openedWindows = $$stackedMap.createNew();
    var openedClasses = $$multiMap.createNew();
    var $modalStack = {
        NOW_CLOSING_EVENT: "modal.stack.now-closing"
    };
    var topModalIndex = 0;
    var previousTopOpenedModal = null;
    var ARIA_HIDDEN_ATTRIBUTE_NAME = "data-bootstrap-modal-aria-hidden-count";
    var tabbableSelector = "a[href], area[href], input:not([disabled]):not([tabindex='-1']), " + "button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), " + "iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]";
    var scrollbarPadding;
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name) {
        var separator = "-";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    function isVisible(element) {
        return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
    }
    function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
            if (openedWindows.get(opened[i]).value.backdrop) {
                topBackdropIndex = i;
            }
        }
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
            topBackdropIndex = topModalIndex;
        }
        return topBackdropIndex;
    }
    $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
            backdropScope.index = newBackdropIndex;
        }
    });
    function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value;
        var appendToElement = modalWindow.appendTo;
        openedWindows.remove(modalInstance);
        previousTopOpenedModal = openedWindows.top();
        if (previousTopOpenedModal) {
            topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr("index"), 10);
        }
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
            var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
            openedClasses.remove(modalBodyClass, modalInstance);
            var areAnyOpen = openedClasses.hasKey(modalBodyClass);
            appendToElement.toggleClass(modalBodyClass, areAnyOpen);
            if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                if (scrollbarPadding.originalRight) {
                    appendToElement.css({
                        paddingRight: scrollbarPadding.originalRight + "px"
                    });
                } else {
                    appendToElement.css({
                        paddingRight: ""
                    });
                }
                scrollbarPadding = null;
            }
            toggleTopWindowClass(true);
        }, modalWindow.closedDeferred);
        checkRemoveBackdrop();
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
            elementToReceiveFocus.focus();
        } else if (appendToElement.focus) {
            appendToElement.focus();
        }
    }
    function toggleTopWindowClass(toggleSwitch) {
        var modalWindow;
        if (openedWindows.length() > 0) {
            modalWindow = openedWindows.top().value;
            modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || "", toggleSwitch);
        }
    }
    function checkRemoveBackdrop() {
        if (backdropDomEl && backdropIndex() === -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, function() {
                backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
        }
    }
    function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
            if (!asyncDeferred) {
                asyncDeferred = $q.defer();
                asyncPromise = asyncDeferred.promise;
            }
            return function asyncDone() {
                asyncDeferred.resolve();
            };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);
        return $q.when(asyncPromise).then(afterAnimating);
        function afterAnimating() {
            if (afterAnimating.done) {
                return;
            }
            afterAnimating.done = true;
            $animate.leave(domEl).then(function() {
                if (done) {
                    done();
                }
                domEl.remove();
                if (closedDeferred) {
                    closedDeferred.resolve();
                }
            });
            scope.$destroy();
        }
    }
    $document.on("keydown", keydownListener);
    $rootScope.$on("$destroy", function() {
        $document.off("keydown", keydownListener);
    });
    function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
            return evt;
        }
        var modal = openedWindows.top();
        if (modal) {
            switch (evt.which) {
              case 27:
                {
                    if (modal.value.keyboard) {
                        evt.preventDefault();
                        $rootScope.$apply(function() {
                            $modalStack.dismiss(modal.key, "escape key press");
                        });
                    }
                    break;
                }

              case 9:
                {
                    var list = $modalStack.loadFocusElementList(modal);
                    var focusChanged = false;
                    if (evt.shiftKey) {
                        if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
                            focusChanged = $modalStack.focusLastFocusableElement(list);
                        }
                    } else {
                        if ($modalStack.isFocusInLastItem(evt, list)) {
                            focusChanged = $modalStack.focusFirstFocusableElement(list);
                        }
                    }
                    if (focusChanged) {
                        evt.preventDefault();
                        evt.stopPropagation();
                    }
                    break;
                }
            }
        }
    }
    $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement, modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;
        toggleTopWindowClass(false);
        previousTopOpenedModal = openedWindows.top();
        openedWindows.add(modalInstance, {
            deferred: modal.deferred,
            renderDeferred: modal.renderDeferred,
            closedDeferred: modal.closedDeferred,
            modalScope: modal.scope,
            backdrop: modal.backdrop,
            keyboard: modal.keyboard,
            openedClass: modal.openedClass,
            windowTopClass: modal.windowTopClass,
            animation: modal.animation,
            appendTo: modal.appendTo
        });
        openedClasses.put(modalBodyClass, modalInstance);
        var appendToElement = modal.appendTo, currBackdropIndex = backdropIndex();
        if (currBackdropIndex >= 0 && !backdropDomEl) {
            backdropScope = $rootScope.$new(true);
            backdropScope.modalOptions = modal;
            backdropScope.index = currBackdropIndex;
            backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
            backdropDomEl.attr({
                class: "modal-backdrop",
                "ng-style": "{'z-index': 1040 + (index && 1 || 0) + index*10}",
                "uib-modal-animation-class": "fade",
                "modal-in-class": "in"
            });
            if (modal.backdropClass) {
                backdropDomEl.addClass(modal.backdropClass);
            }
            if (modal.animation) {
                backdropDomEl.attr("modal-animation", "true");
            }
            $compile(backdropDomEl)(backdropScope);
            $animate.enter(backdropDomEl, appendToElement);
            if ($uibPosition.isScrollable(appendToElement)) {
                scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
                if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
                    appendToElement.css({
                        paddingRight: scrollbarPadding.right + "px"
                    });
                }
            }
        }
        var content;
        if (modal.component) {
            content = document.createElement(snake_case(modal.component.name));
            content = angular.element(content);
            content.attr({
                resolve: "$resolve",
                "modal-instance": "$uibModalInstance",
                close: "$close($value)",
                dismiss: "$dismiss($value)"
            });
        } else {
            content = modal.content;
        }
        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr("index"), 10) + 1 : 0;
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
        angularDomEl.attr({
            class: "modal",
            "template-url": modal.windowTemplateUrl,
            "window-top-class": modal.windowTopClass,
            role: "dialog",
            "aria-labelledby": modal.ariaLabelledBy,
            "aria-describedby": modal.ariaDescribedBy,
            size: modal.size,
            index: topModalIndex,
            animate: "animate",
            "ng-style": "{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",
            tabindex: -1,
            "uib-modal-animation-class": "fade",
            "modal-in-class": "in"
        }).append(content);
        if (modal.windowClass) {
            angularDomEl.addClass(modal.windowClass);
        }
        if (modal.animation) {
            angularDomEl.attr("modal-animation", "true");
        }
        appendToElement.addClass(modalBodyClass);
        if (modal.scope) {
            modal.scope.$$topModalIndex = topModalIndex;
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);
        openedWindows.top().value.modalDomEl = angularDomEl;
        openedWindows.top().value.modalOpener = modalOpener;
        applyAriaHidden(angularDomEl);
        function applyAriaHidden(el) {
            if (!el || el[0].tagName === "BODY") {
                return;
            }
            getSiblings(el).forEach(function(sibling) {
                var elemIsAlreadyHidden = sibling.getAttribute("aria-hidden") === "true", ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);
                if (!ariaHiddenCount) {
                    ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
                }
                sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
                sibling.setAttribute("aria-hidden", "true");
            });
            return applyAriaHidden(el.parent());
            function getSiblings(el) {
                var children = el.parent() ? el.parent().children() : [];
                return Array.prototype.filter.call(children, function(child) {
                    return child !== el[0];
                });
            }
        }
    };
    function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast("modal.closing", resultOrReason, closing).defaultPrevented;
    }
    function unhideBackgroundElements() {
        Array.prototype.forEach.call(document.querySelectorAll("[" + ARIA_HIDDEN_ATTRIBUTE_NAME + "]"), function(hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10), newHiddenCount = ariaHiddenCount - 1;
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);
            if (!newHiddenCount) {
                hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
                hiddenEl.removeAttribute("aria-hidden");
            }
        });
    }
    $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.resolve(result);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        unhideBackgroundElements();
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.reject(reason);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
            topModal = this.getTop();
        }
    };
    $modalStack.getTop = function() {
        return openedWindows.top();
    };
    $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
            modalWindow.value.renderDeferred.resolve();
        }
    };
    $modalStack.focusFirstFocusableElement = function(list) {
        if (list.length > 0) {
            list[0].focus();
            return true;
        }
        return false;
    };
    $modalStack.focusLastFocusableElement = function(list) {
        if (list.length > 0) {
            list[list.length - 1].focus();
            return true;
        }
        return false;
    };
    $modalStack.isModalFocused = function(evt, modalWindow) {
        if (evt && modalWindow) {
            var modalDomEl = modalWindow.value.modalDomEl;
            if (modalDomEl && modalDomEl.length) {
                return (evt.target || evt.srcElement) === modalDomEl[0];
            }
        }
        return false;
    };
    $modalStack.isFocusInFirstItem = function(evt, list) {
        if (list.length > 0) {
            return (evt.target || evt.srcElement) === list[0];
        }
        return false;
    };
    $modalStack.isFocusInLastItem = function(evt, list) {
        if (list.length > 0) {
            return (evt.target || evt.srcElement) === list[list.length - 1];
        }
        return false;
    };
    $modalStack.loadFocusElementList = function(modalWindow) {
        if (modalWindow) {
            var modalDomE1 = modalWindow.value.modalDomEl;
            if (modalDomE1 && modalDomE1.length) {
                var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
                return elements ? Array.prototype.filter.call(elements, function(element) {
                    return isVisible(element);
                }) : elements;
            }
        }
    };
    return $modalStack;
} ]).provider("$uibModal", function() {
    var $modalProvider = {
        options: {
            animation: true,
            backdrop: true,
            keyboard: true
        },
        $get: [ "$rootScope", "$q", "$document", "$templateRequest", "$controller", "$uibResolve", "$uibModalStack", function($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
            var $modal = {};
            function getTemplatePromise(options) {
                return options.template ? $q.when(options.template) : $templateRequest(angular.isFunction(options.templateUrl) ? options.templateUrl() : options.templateUrl);
            }
            var promiseChain = null;
            $modal.getPromiseChain = function() {
                return promiseChain;
            };
            $modal.open = function(modalOptions) {
                var modalResultDeferred = $q.defer();
                var modalOpenedDeferred = $q.defer();
                var modalClosedDeferred = $q.defer();
                var modalRenderDeferred = $q.defer();
                var modalInstance = {
                    result: modalResultDeferred.promise,
                    opened: modalOpenedDeferred.promise,
                    closed: modalClosedDeferred.promise,
                    rendered: modalRenderDeferred.promise,
                    close: function(result) {
                        return $modalStack.close(modalInstance, result);
                    },
                    dismiss: function(reason) {
                        return $modalStack.dismiss(modalInstance, reason);
                    }
                };
                modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
                modalOptions.resolve = modalOptions.resolve || {};
                modalOptions.appendTo = modalOptions.appendTo || $document.find("body").eq(0);
                if (!modalOptions.appendTo.length) {
                    throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");
                }
                if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
                    throw new Error("One of component or template or templateUrl options is required.");
                }
                var templateAndResolvePromise;
                if (modalOptions.component) {
                    templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
                } else {
                    templateAndResolvePromise = $q.all([ getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null) ]);
                }
                function resolveWithTemplate() {
                    return templateAndResolvePromise;
                }
                var samePromise;
                samePromise = promiseChain = $q.all([ promiseChain ]).then(resolveWithTemplate, resolveWithTemplate).then(function resolveSuccess(tplAndVars) {
                    var providedScope = modalOptions.scope || $rootScope;
                    var modalScope = providedScope.$new();
                    modalScope.$close = modalInstance.close;
                    modalScope.$dismiss = modalInstance.dismiss;
                    modalScope.$on("$destroy", function() {
                        if (!modalScope.$$uibDestructionScheduled) {
                            modalScope.$dismiss("$uibUnscheduledDestruction");
                        }
                    });
                    var modal = {
                        scope: modalScope,
                        deferred: modalResultDeferred,
                        renderDeferred: modalRenderDeferred,
                        closedDeferred: modalClosedDeferred,
                        animation: modalOptions.animation,
                        backdrop: modalOptions.backdrop,
                        keyboard: modalOptions.keyboard,
                        backdropClass: modalOptions.backdropClass,
                        windowTopClass: modalOptions.windowTopClass,
                        windowClass: modalOptions.windowClass,
                        windowTemplateUrl: modalOptions.windowTemplateUrl,
                        ariaLabelledBy: modalOptions.ariaLabelledBy,
                        ariaDescribedBy: modalOptions.ariaDescribedBy,
                        size: modalOptions.size,
                        openedClass: modalOptions.openedClass,
                        appendTo: modalOptions.appendTo
                    };
                    var component = {};
                    var ctrlInstance, ctrlInstantiate, ctrlLocals = {};
                    if (modalOptions.component) {
                        constructLocals(component, false, true, false);
                        component.name = modalOptions.component;
                        modal.component = component;
                    } else if (modalOptions.controller) {
                        constructLocals(ctrlLocals, true, false, true);
                        ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
                        if (modalOptions.controllerAs && modalOptions.bindToController) {
                            ctrlInstance = ctrlInstantiate.instance;
                            ctrlInstance.$close = modalScope.$close;
                            ctrlInstance.$dismiss = modalScope.$dismiss;
                            angular.extend(ctrlInstance, {
                                $resolve: ctrlLocals.$scope.$resolve
                            }, providedScope);
                        }
                        ctrlInstance = ctrlInstantiate();
                        if (angular.isFunction(ctrlInstance.$onInit)) {
                            ctrlInstance.$onInit();
                        }
                    }
                    if (!modalOptions.component) {
                        modal.content = tplAndVars[0];
                    }
                    $modalStack.open(modalInstance, modal);
                    modalOpenedDeferred.resolve(true);
                    function constructLocals(obj, template, instanceOnScope, injectable) {
                        obj.$scope = modalScope;
                        obj.$scope.$resolve = {};
                        if (instanceOnScope) {
                            obj.$scope.$uibModalInstance = modalInstance;
                        } else {
                            obj.$uibModalInstance = modalInstance;
                        }
                        var resolves = template ? tplAndVars[1] : tplAndVars;
                        angular.forEach(resolves, function(value, key) {
                            if (injectable) {
                                obj[key] = value;
                            }
                            obj.$scope.$resolve[key] = value;
                        });
                    }
                }, function resolveError(reason) {
                    modalOpenedDeferred.reject(reason);
                    modalResultDeferred.reject(reason);
                })["finally"](function() {
                    if (promiseChain === samePromise) {
                        promiseChain = null;
                    }
                });
                return modalInstance;
            };
            return $modal;
        } ]
    };
    return $modalProvider;
});

angular.module("ui.bootstrap.paging", []).factory("uibPaging", [ "$parse", function($parse) {
    return {
        create: function(ctrl, $scope, $attrs) {
            ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
            ctrl.ngModelCtrl = {
                $setViewValue: angular.noop
            };
            ctrl._watchers = [];
            ctrl.init = function(ngModelCtrl, config) {
                ctrl.ngModelCtrl = ngModelCtrl;
                ctrl.config = config;
                ngModelCtrl.$render = function() {
                    ctrl.render();
                };
                if ($attrs.itemsPerPage) {
                    ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
                        ctrl.itemsPerPage = parseInt(value, 10);
                        $scope.totalPages = ctrl.calculateTotalPages();
                        ctrl.updatePage();
                    }));
                } else {
                    ctrl.itemsPerPage = config.itemsPerPage;
                }
                $scope.$watch("totalItems", function(newTotal, oldTotal) {
                    if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
                        $scope.totalPages = ctrl.calculateTotalPages();
                        ctrl.updatePage();
                    }
                });
            };
            ctrl.calculateTotalPages = function() {
                var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
                return Math.max(totalPages || 0, 1);
            };
            ctrl.render = function() {
                $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
            };
            $scope.selectPage = function(page, evt) {
                if (evt) {
                    evt.preventDefault();
                }
                var clickAllowed = !$scope.ngDisabled || !evt;
                if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
                    if (evt && evt.target) {
                        evt.target.blur();
                    }
                    ctrl.ngModelCtrl.$setViewValue(page);
                    ctrl.ngModelCtrl.$render();
                }
            };
            $scope.getText = function(key) {
                return $scope[key + "Text"] || ctrl.config[key + "Text"];
            };
            $scope.noPrevious = function() {
                return $scope.page === 1;
            };
            $scope.noNext = function() {
                return $scope.page === $scope.totalPages;
            };
            ctrl.updatePage = function() {
                ctrl.setNumPages($scope.$parent, $scope.totalPages);
                if ($scope.page > $scope.totalPages) {
                    $scope.selectPage($scope.totalPages);
                } else {
                    ctrl.ngModelCtrl.$render();
                }
            };
            $scope.$on("$destroy", function() {
                while (ctrl._watchers.length) {
                    ctrl._watchers.shift()();
                }
            });
        }
    };
} ]);

angular.module("ui.bootstrap.pager", [ "ui.bootstrap.paging", "ui.bootstrap.tabindex" ]).controller("UibPagerController", [ "$scope", "$attrs", "uibPaging", "uibPagerConfig", function($scope, $attrs, uibPaging, uibPagerConfig) {
    $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;
    uibPaging.create(this, $scope, $attrs);
} ]).constant("uibPagerConfig", {
    itemsPerPage: 10,
    previousText: "« Previous",
    nextText: "Next »",
    align: true
}).directive("uibPager", [ "uibPagerConfig", function(uibPagerConfig) {
    return {
        scope: {
            totalItems: "=",
            previousText: "@",
            nextText: "@",
            ngDisabled: "="
        },
        require: [ "uibPager", "?ngModel" ],
        restrict: "A",
        controller: "UibPagerController",
        controllerAs: "pager",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/pager/pager.html";
        },
        link: function(scope, element, attrs, ctrls) {
            element.addClass("pager");
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            paginationCtrl.init(ngModelCtrl, uibPagerConfig);
        }
    };
} ]);

angular.module("ui.bootstrap.pagination", [ "ui.bootstrap.paging", "ui.bootstrap.tabindex" ]).controller("UibPaginationController", [ "$scope", "$attrs", "$parse", "uibPaging", "uibPaginationConfig", function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
    var ctrl = this;
    var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize, rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate, forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses, boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers, pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) {
        return $scope.$parent.$eval($attrs.pageLabel, {
            $page: idx
        });
    } : angular.identity;
    $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
    $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;
    $attrs.$set("role", "menu");
    uibPaging.create(this, $scope, $attrs);
    if ($attrs.maxSize) {
        ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
            maxSize = parseInt(value, 10);
            ctrl.render();
        }));
    }
    function makePage(number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    }
    function getPages(currentPage, totalPages) {
        var pages = [];
        var startPage = 1, endPage = totalPages;
        var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;
        if (isMaxSized) {
            if (rotate) {
                startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
                endPage = startPage + maxSize - 1;
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - maxSize + 1;
                }
            } else {
                startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;
                endPage = Math.min(startPage + maxSize - 1, totalPages);
            }
        }
        for (var number = startPage; number <= endPage; number++) {
            var page = makePage(number, pageLabel(number), number === currentPage);
            pages.push(page);
        }
        if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!boundaryLinkNumbers || startPage > 3) {
                    var previousPageSet = makePage(startPage - 1, "...", false);
                    pages.unshift(previousPageSet);
                }
                if (boundaryLinkNumbers) {
                    if (startPage === 3) {
                        var secondPageLink = makePage(2, "2", false);
                        pages.unshift(secondPageLink);
                    }
                    var firstPageLink = makePage(1, "1", false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!boundaryLinkNumbers || endPage < totalPages - 2) {
                    var nextPageSet = makePage(endPage + 1, "...", false);
                    pages.push(nextPageSet);
                }
                if (boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) {
                        var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    var lastPageLink = makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    var originalRender = this.render;
    this.render = function() {
        originalRender();
        if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
            $scope.pages = getPages($scope.page, $scope.totalPages);
        }
    };
} ]).constant("uibPaginationConfig", {
    itemsPerPage: 10,
    boundaryLinks: false,
    boundaryLinkNumbers: false,
    directionLinks: true,
    firstText: "First",
    previousText: "Previous",
    nextText: "Next",
    lastText: "Last",
    rotate: true,
    forceEllipses: false
}).directive("uibPagination", [ "$parse", "uibPaginationConfig", function($parse, uibPaginationConfig) {
    return {
        scope: {
            totalItems: "=",
            firstText: "@",
            previousText: "@",
            nextText: "@",
            lastText: "@",
            ngDisabled: "="
        },
        require: [ "uibPagination", "?ngModel" ],
        restrict: "A",
        controller: "UibPaginationController",
        controllerAs: "pagination",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/pagination/pagination.html";
        },
        link: function(scope, element, attrs, ctrls) {
            element.addClass("pagination");
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
        }
    };
} ]);

angular.module("ui.bootstrap.tooltip", [ "ui.bootstrap.position", "ui.bootstrap.stackedMap" ]).provider("$uibTooltip", function() {
    var defaultOptions = {
        placement: "top",
        placementClassPrefix: "",
        animation: true,
        popupDelay: 0,
        popupCloseDelay: 0,
        useContentExp: false
    };
    var triggerMap = {
        mouseenter: "mouseleave",
        click: "click",
        outsideClick: "outsideClick",
        focus: "blur",
        none: ""
    };
    var globalOptions = {};
    this.options = function(value) {
        angular.extend(globalOptions, value);
    };
    this.setTriggers = function setTriggers(triggers) {
        angular.extend(triggerMap, triggers);
    };
    function snake_case(name) {
        var regexp = /[A-Z]/g;
        var separator = "-";
        return name.replace(regexp, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    this.$get = [ "$window", "$compile", "$timeout", "$document", "$uibPosition", "$interpolate", "$rootScope", "$parse", "$$stackedMap", function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
        var openedTooltips = $$stackedMap.createNew();
        $document.on("keyup", keypressListener);
        $rootScope.$on("$destroy", function() {
            $document.off("keyup", keypressListener);
        });
        function keypressListener(e) {
            if (e.which === 27) {
                var last = openedTooltips.top();
                if (last) {
                    last.value.close();
                    last = null;
                }
            }
        }
        return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
            options = angular.extend({}, defaultOptions, globalOptions, options);
            function getTriggers(trigger) {
                var show = (trigger || options.trigger || defaultTriggerShow).split(" ");
                var hide = show.map(function(trigger) {
                    return triggerMap[trigger] || trigger;
                });
                return {
                    show: show,
                    hide: hide
                };
            }
            var directiveName = snake_case(ttType);
            var startSym = $interpolate.startSymbol();
            var endSym = $interpolate.endSymbol();
            var template = "<div " + directiveName + "-popup " + 'uib-title="' + startSym + "title" + endSym + '" ' + (options.useContentExp ? 'content-exp="contentExp()" ' : 'content="' + startSym + "content" + endSym + '" ') + 'origin-scope="origScope" ' + 'class="uib-position-measure ' + prefix + '" ' + 'tooltip-animation-class="fade"' + "uib-tooltip-classes " + 'ng-class="{ in: isOpen }" ' + ">" + "</div>";
            return {
                compile: function(tElem, tAttrs) {
                    var tooltipLinker = $compile(template);
                    return function link(scope, element, attrs, tooltipCtrl) {
                        var tooltip;
                        var tooltipLinkedScope;
                        var transitionTimeout;
                        var showTimeout;
                        var hideTimeout;
                        var positionTimeout;
                        var adjustmentTimeout;
                        var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
                        var triggers = getTriggers(undefined);
                        var hasEnableExp = angular.isDefined(attrs[prefix + "Enable"]);
                        var ttScope = scope.$new(true);
                        var repositionScheduled = false;
                        var isOpenParse = angular.isDefined(attrs[prefix + "IsOpen"]) ? $parse(attrs[prefix + "IsOpen"]) : false;
                        var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
                        var observers = [];
                        var lastPlacement;
                        var positionTooltip = function() {
                            if (!tooltip || !tooltip.html()) {
                                return;
                            }
                            if (!positionTimeout) {
                                positionTimeout = $timeout(function() {
                                    var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                                    var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop("offsetHeight");
                                    var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
                                    tooltip.css({
                                        top: ttPosition.top + "px",
                                        left: ttPosition.left + "px"
                                    });
                                    var placementClasses = ttPosition.placement.split("-");
                                    if (!tooltip.hasClass(placementClasses[0])) {
                                        tooltip.removeClass(lastPlacement.split("-")[0]);
                                        tooltip.addClass(placementClasses[0]);
                                    }
                                    if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
                                        tooltip.removeClass(options.placementClassPrefix + lastPlacement);
                                        tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
                                    }
                                    adjustmentTimeout = $timeout(function() {
                                        var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop("offsetHeight");
                                        var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
                                        if (adjustment) {
                                            tooltip.css(adjustment);
                                        }
                                        adjustmentTimeout = null;
                                    }, 0, false);
                                    if (tooltip.hasClass("uib-position-measure")) {
                                        $position.positionArrow(tooltip, ttPosition.placement);
                                        tooltip.removeClass("uib-position-measure");
                                    } else if (lastPlacement !== ttPosition.placement) {
                                        $position.positionArrow(tooltip, ttPosition.placement);
                                    }
                                    lastPlacement = ttPosition.placement;
                                    positionTimeout = null;
                                }, 0, false);
                            }
                        };
                        ttScope.origScope = scope;
                        ttScope.isOpen = false;
                        function toggleTooltipBind() {
                            if (!ttScope.isOpen) {
                                showTooltipBind();
                            } else {
                                hideTooltipBind();
                            }
                        }
                        function showTooltipBind() {
                            if (hasEnableExp && !scope.$eval(attrs[prefix + "Enable"])) {
                                return;
                            }
                            cancelHide();
                            prepareTooltip();
                            if (ttScope.popupDelay) {
                                if (!showTimeout) {
                                    showTimeout = $timeout(show, ttScope.popupDelay, false);
                                }
                            } else {
                                show();
                            }
                        }
                        function hideTooltipBind() {
                            cancelShow();
                            if (ttScope.popupCloseDelay) {
                                if (!hideTimeout) {
                                    hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
                                }
                            } else {
                                hide();
                            }
                        }
                        function show() {
                            cancelShow();
                            cancelHide();
                            if (!ttScope.content) {
                                return angular.noop;
                            }
                            createTooltip();
                            ttScope.$evalAsync(function() {
                                ttScope.isOpen = true;
                                assignIsOpen(true);
                                positionTooltip();
                            });
                        }
                        function cancelShow() {
                            if (showTimeout) {
                                $timeout.cancel(showTimeout);
                                showTimeout = null;
                            }
                            if (positionTimeout) {
                                $timeout.cancel(positionTimeout);
                                positionTimeout = null;
                            }
                        }
                        function hide() {
                            if (!ttScope) {
                                return;
                            }
                            ttScope.$evalAsync(function() {
                                if (ttScope) {
                                    ttScope.isOpen = false;
                                    assignIsOpen(false);
                                    if (ttScope.animation) {
                                        if (!transitionTimeout) {
                                            transitionTimeout = $timeout(removeTooltip, 150, false);
                                        }
                                    } else {
                                        removeTooltip();
                                    }
                                }
                            });
                        }
                        function cancelHide() {
                            if (hideTimeout) {
                                $timeout.cancel(hideTimeout);
                                hideTimeout = null;
                            }
                            if (transitionTimeout) {
                                $timeout.cancel(transitionTimeout);
                                transitionTimeout = null;
                            }
                        }
                        function createTooltip() {
                            if (tooltip) {
                                return;
                            }
                            tooltipLinkedScope = ttScope.$new();
                            tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                                if (appendToBody) {
                                    $document.find("body").append(tooltip);
                                } else {
                                    element.after(tooltip);
                                }
                            });
                            openedTooltips.add(ttScope, {
                                close: hide
                            });
                            prepObservers();
                        }
                        function removeTooltip() {
                            cancelShow();
                            cancelHide();
                            unregisterObservers();
                            if (tooltip) {
                                tooltip.remove();
                                tooltip = null;
                                if (adjustmentTimeout) {
                                    $timeout.cancel(adjustmentTimeout);
                                }
                            }
                            openedTooltips.remove(ttScope);
                            if (tooltipLinkedScope) {
                                tooltipLinkedScope.$destroy();
                                tooltipLinkedScope = null;
                            }
                        }
                        function prepareTooltip() {
                            ttScope.title = attrs[prefix + "Title"];
                            if (contentParse) {
                                ttScope.content = contentParse(scope);
                            } else {
                                ttScope.content = attrs[ttType];
                            }
                            ttScope.popupClass = attrs[prefix + "Class"];
                            ttScope.placement = angular.isDefined(attrs[prefix + "Placement"]) ? attrs[prefix + "Placement"] : options.placement;
                            var placement = $position.parsePlacement(ttScope.placement);
                            lastPlacement = placement[1] ? placement[0] + "-" + placement[1] : placement[0];
                            var delay = parseInt(attrs[prefix + "PopupDelay"], 10);
                            var closeDelay = parseInt(attrs[prefix + "PopupCloseDelay"], 10);
                            ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
                            ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
                        }
                        function assignIsOpen(isOpen) {
                            if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                                isOpenParse.assign(scope, isOpen);
                            }
                        }
                        ttScope.contentExp = function() {
                            return ttScope.content;
                        };
                        attrs.$observe("disabled", function(val) {
                            if (val) {
                                cancelShow();
                            }
                            if (val && ttScope.isOpen) {
                                hide();
                            }
                        });
                        if (isOpenParse) {
                            scope.$watch(isOpenParse, function(val) {
                                if (ttScope && !val === ttScope.isOpen) {
                                    toggleTooltipBind();
                                }
                            });
                        }
                        function prepObservers() {
                            observers.length = 0;
                            if (contentParse) {
                                observers.push(scope.$watch(contentParse, function(val) {
                                    ttScope.content = val;
                                    if (!val && ttScope.isOpen) {
                                        hide();
                                    }
                                }));
                                observers.push(tooltipLinkedScope.$watch(function() {
                                    if (!repositionScheduled) {
                                        repositionScheduled = true;
                                        tooltipLinkedScope.$$postDigest(function() {
                                            repositionScheduled = false;
                                            if (ttScope && ttScope.isOpen) {
                                                positionTooltip();
                                            }
                                        });
                                    }
                                }));
                            } else {
                                observers.push(attrs.$observe(ttType, function(val) {
                                    ttScope.content = val;
                                    if (!val && ttScope.isOpen) {
                                        hide();
                                    } else {
                                        positionTooltip();
                                    }
                                }));
                            }
                            observers.push(attrs.$observe(prefix + "Title", function(val) {
                                ttScope.title = val;
                                if (ttScope.isOpen) {
                                    positionTooltip();
                                }
                            }));
                            observers.push(attrs.$observe(prefix + "Placement", function(val) {
                                ttScope.placement = val ? val : options.placement;
                                if (ttScope.isOpen) {
                                    positionTooltip();
                                }
                            }));
                        }
                        function unregisterObservers() {
                            if (observers.length) {
                                angular.forEach(observers, function(observer) {
                                    observer();
                                });
                                observers.length = 0;
                            }
                        }
                        function bodyHideTooltipBind(e) {
                            if (!ttScope || !ttScope.isOpen || !tooltip) {
                                return;
                            }
                            if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                                hideTooltipBind();
                            }
                        }
                        function hideOnEscapeKey(e) {
                            if (e.which === 27) {
                                hideTooltipBind();
                            }
                        }
                        var unregisterTriggers = function() {
                            triggers.show.forEach(function(trigger) {
                                if (trigger === "outsideClick") {
                                    element.off("click", toggleTooltipBind);
                                } else {
                                    element.off(trigger, showTooltipBind);
                                    element.off(trigger, toggleTooltipBind);
                                }
                                element.off("keypress", hideOnEscapeKey);
                            });
                            triggers.hide.forEach(function(trigger) {
                                if (trigger === "outsideClick") {
                                    $document.off("click", bodyHideTooltipBind);
                                } else {
                                    element.off(trigger, hideTooltipBind);
                                }
                            });
                        };
                        function prepTriggers() {
                            var showTriggers = [], hideTriggers = [];
                            var val = scope.$eval(attrs[prefix + "Trigger"]);
                            unregisterTriggers();
                            if (angular.isObject(val)) {
                                Object.keys(val).forEach(function(key) {
                                    showTriggers.push(key);
                                    hideTriggers.push(val[key]);
                                });
                                triggers = {
                                    show: showTriggers,
                                    hide: hideTriggers
                                };
                            } else {
                                triggers = getTriggers(val);
                            }
                            if (triggers.show !== "none") {
                                triggers.show.forEach(function(trigger, idx) {
                                    if (trigger === "outsideClick") {
                                        element.on("click", toggleTooltipBind);
                                        $document.on("click", bodyHideTooltipBind);
                                    } else if (trigger === triggers.hide[idx]) {
                                        element.on(trigger, toggleTooltipBind);
                                    } else if (trigger) {
                                        element.on(trigger, showTooltipBind);
                                        element.on(triggers.hide[idx], hideTooltipBind);
                                    }
                                    element.on("keypress", hideOnEscapeKey);
                                });
                            }
                        }
                        prepTriggers();
                        var animation = scope.$eval(attrs[prefix + "Animation"]);
                        ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;
                        var appendToBodyVal;
                        var appendKey = prefix + "AppendToBody";
                        if (appendKey in attrs && attrs[appendKey] === undefined) {
                            appendToBodyVal = true;
                        } else {
                            appendToBodyVal = scope.$eval(attrs[appendKey]);
                        }
                        appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;
                        scope.$on("$destroy", function onDestroyTooltip() {
                            unregisterTriggers();
                            removeTooltip();
                            ttScope = null;
                        });
                    };
                }
            };
        };
    } ];
}).directive("uibTooltipTemplateTransclude", [ "$animate", "$sce", "$compile", "$templateRequest", function($animate, $sce, $compile, $templateRequest) {
    return {
        link: function(scope, elem, attrs) {
            var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);
            var changeCounter = 0, currentScope, previousElement, currentElement;
            var cleanupLastIncludeContent = function() {
                if (previousElement) {
                    previousElement.remove();
                    previousElement = null;
                }
                if (currentScope) {
                    currentScope.$destroy();
                    currentScope = null;
                }
                if (currentElement) {
                    $animate.leave(currentElement).then(function() {
                        previousElement = null;
                    });
                    previousElement = currentElement;
                    currentElement = null;
                }
            };
            scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
                var thisChangeId = ++changeCounter;
                if (src) {
                    $templateRequest(src, true).then(function(response) {
                        if (thisChangeId !== changeCounter) {
                            return;
                        }
                        var newScope = origScope.$new();
                        var template = response;
                        var clone = $compile(template)(newScope, function(clone) {
                            cleanupLastIncludeContent();
                            $animate.enter(clone, elem);
                        });
                        currentScope = newScope;
                        currentElement = clone;
                        currentScope.$emit("$includeContentLoaded", src);
                    }, function() {
                        if (thisChangeId === changeCounter) {
                            cleanupLastIncludeContent();
                            scope.$emit("$includeContentError", src);
                        }
                    });
                    scope.$emit("$includeContentRequested", src);
                } else {
                    cleanupLastIncludeContent();
                }
            });
            scope.$on("$destroy", cleanupLastIncludeContent);
        }
    };
} ]).directive("uibTooltipClasses", [ "$uibPosition", function($uibPosition) {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            if (scope.placement) {
                var position = $uibPosition.parsePlacement(scope.placement);
                element.addClass(position[0]);
            }
            if (scope.popupClass) {
                element.addClass(scope.popupClass);
            }
            if (scope.animation) {
                element.addClass(attrs.tooltipAnimationClass);
            }
        }
    };
} ]).directive("uibTooltipPopup", function() {
    return {
        restrict: "A",
        scope: {
            content: "@"
        },
        templateUrl: "uib/template/tooltip/tooltip-popup.html"
    };
}).directive("uibTooltip", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltip", "tooltip", "mouseenter");
} ]).directive("uibTooltipTemplatePopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&",
            originScope: "&"
        },
        templateUrl: "uib/template/tooltip/tooltip-template-popup.html"
    };
}).directive("uibTooltipTemplate", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltipTemplate", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]).directive("uibTooltipHtmlPopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&"
        },
        templateUrl: "uib/template/tooltip/tooltip-html-popup.html"
    };
}).directive("uibTooltipHtml", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibTooltipHtml", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]);

angular.module("ui.bootstrap.popover", [ "ui.bootstrap.tooltip" ]).directive("uibPopoverTemplatePopup", function() {
    return {
        restrict: "A",
        scope: {
            uibTitle: "@",
            contentExp: "&",
            originScope: "&"
        },
        templateUrl: "uib/template/popover/popover-template.html"
    };
}).directive("uibPopoverTemplate", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopoverTemplate", "popover", "click", {
        useContentExp: true
    });
} ]).directive("uibPopoverHtmlPopup", function() {
    return {
        restrict: "A",
        scope: {
            contentExp: "&",
            uibTitle: "@"
        },
        templateUrl: "uib/template/popover/popover-html.html"
    };
}).directive("uibPopoverHtml", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopoverHtml", "popover", "click", {
        useContentExp: true
    });
} ]).directive("uibPopoverPopup", function() {
    return {
        restrict: "A",
        scope: {
            uibTitle: "@",
            content: "@"
        },
        templateUrl: "uib/template/popover/popover.html"
    };
}).directive("uibPopover", [ "$uibTooltip", function($uibTooltip) {
    return $uibTooltip("uibPopover", "popover", "click");
} ]);

angular.module("ui.bootstrap.progressbar", []).constant("uibProgressConfig", {
    animate: true,
    max: 100
}).controller("UibProgressController", [ "$scope", "$attrs", "uibProgressConfig", function($scope, $attrs, progressConfig) {
    var self = this, animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;
    this.bars = [];
    $scope.max = getMaxOrDefault();
    this.addBar = function(bar, element, attrs) {
        if (!animate) {
            element.css({
                transition: "none"
            });
        }
        this.bars.push(bar);
        bar.max = getMaxOrDefault();
        bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : "progressbar";
        bar.$watch("value", function(value) {
            bar.recalculatePercentage();
        });
        bar.recalculatePercentage = function() {
            var totalPercentage = self.bars.reduce(function(total, bar) {
                bar.percent = +(100 * bar.value / bar.max).toFixed(2);
                return total + bar.percent;
            }, 0);
            if (totalPercentage > 100) {
                bar.percent -= totalPercentage - 100;
            }
        };
        bar.$on("$destroy", function() {
            element = null;
            self.removeBar(bar);
        });
    };
    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
        this.bars.forEach(function(bar) {
            bar.recalculatePercentage();
        });
    };
    $scope.$watch("maxParam", function(maxParam) {
        self.bars.forEach(function(bar) {
            bar.max = getMaxOrDefault();
            bar.recalculatePercentage();
        });
    });
    function getMaxOrDefault() {
        return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
    }
} ]).directive("uibProgress", function() {
    return {
        replace: true,
        transclude: true,
        controller: "UibProgressController",
        require: "uibProgress",
        scope: {
            maxParam: "=?max"
        },
        templateUrl: "uib/template/progressbar/progress.html"
    };
}).directive("uibBar", function() {
    return {
        replace: true,
        transclude: true,
        require: "^uibProgress",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "uib/template/progressbar/bar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element, attrs);
        }
    };
}).directive("uibProgressbar", function() {
    return {
        replace: true,
        transclude: true,
        controller: "UibProgressController",
        scope: {
            value: "=",
            maxParam: "=?max",
            type: "@"
        },
        templateUrl: "uib/template/progressbar/progressbar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]), {
                title: attrs.title
            });
        }
    };
});

angular.module("ui.bootstrap.rating", []).constant("uibRatingConfig", {
    max: 5,
    stateOn: null,
    stateOff: null,
    enableReset: true,
    titles: [ "one", "two", "three", "four", "five" ]
}).controller("UibRatingController", [ "$scope", "$attrs", "uibRatingConfig", function($scope, $attrs, ratingConfig) {
    var ngModelCtrl = {
        $setViewValue: angular.noop
    }, self = this;
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.push(function(value) {
            if (angular.isNumber(value) && value << 0 !== value) {
                value = Math.round(value);
            }
            return value;
        });
        this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
        this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
        this.enableReset = angular.isDefined($attrs.enableReset) ? $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
        var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
        this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ? tmpTitles : ratingConfig.titles;
        var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) : new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
        $scope.range = this.buildTemplateObjects(ratingStates);
    };
    this.buildTemplateObjects = function(states) {
        for (var i = 0, n = states.length; i < n; i++) {
            states[i] = angular.extend({
                index: i
            }, {
                stateOn: this.stateOn,
                stateOff: this.stateOff,
                title: this.getTitle(i)
            }, states[i]);
        }
        return states;
    };
    this.getTitle = function(index) {
        if (index >= this.titles.length) {
            return index + 1;
        }
        return this.titles[index];
    };
    $scope.rate = function(value) {
        if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
            var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
            ngModelCtrl.$setViewValue(newViewValue);
            ngModelCtrl.$render();
        }
    };
    $scope.enter = function(value) {
        if (!$scope.readonly) {
            $scope.value = value;
        }
        $scope.onHover({
            value: value
        });
    };
    $scope.reset = function() {
        $scope.value = ngModelCtrl.$viewValue;
        $scope.onLeave();
    };
    $scope.onKeydown = function(evt) {
        if (/(37|38|39|40)/.test(evt.which)) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
        }
    };
    this.render = function() {
        $scope.value = ngModelCtrl.$viewValue;
        $scope.title = self.getTitle($scope.value - 1);
    };
} ]).directive("uibRating", function() {
    return {
        require: [ "uibRating", "ngModel" ],
        restrict: "A",
        scope: {
            readonly: "=?readOnly",
            onHover: "&",
            onLeave: "&"
        },
        controller: "UibRatingController",
        templateUrl: "uib/template/rating/rating.html",
        link: function(scope, element, attrs, ctrls) {
            var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ratingCtrl.init(ngModelCtrl);
        }
    };
});

angular.module("ui.bootstrap.tabs", []).controller("UibTabsetController", [ "$scope", function($scope) {
    var ctrl = this, oldIndex;
    ctrl.tabs = [];
    ctrl.select = function(index, evt) {
        if (!destroyed) {
            var previousIndex = findTabIndex(oldIndex);
            var previousSelected = ctrl.tabs[previousIndex];
            if (previousSelected) {
                previousSelected.tab.onDeselect({
                    $event: evt,
                    $selectedIndex: index
                });
                if (evt && evt.isDefaultPrevented()) {
                    return;
                }
                previousSelected.tab.active = false;
            }
            var selected = ctrl.tabs[index];
            if (selected) {
                selected.tab.onSelect({
                    $event: evt
                });
                selected.tab.active = true;
                ctrl.active = selected.index;
                oldIndex = selected.index;
            } else if (!selected && angular.isDefined(oldIndex)) {
                ctrl.active = null;
                oldIndex = null;
            }
        }
    };
    ctrl.addTab = function addTab(tab) {
        ctrl.tabs.push({
            tab: tab,
            index: tab.index
        });
        ctrl.tabs.sort(function(t1, t2) {
            if (t1.index > t2.index) {
                return 1;
            }
            if (t1.index < t2.index) {
                return -1;
            }
            return 0;
        });
        if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
            var newActiveIndex = findTabIndex(tab.index);
            ctrl.select(newActiveIndex);
        }
    };
    ctrl.removeTab = function removeTab(tab) {
        var index;
        for (var i = 0; i < ctrl.tabs.length; i++) {
            if (ctrl.tabs[i].tab === tab) {
                index = i;
                break;
            }
        }
        if (ctrl.tabs[index].index === ctrl.active) {
            var newActiveTabIndex = index === ctrl.tabs.length - 1 ? index - 1 : index + 1 % ctrl.tabs.length;
            ctrl.select(newActiveTabIndex);
        }
        ctrl.tabs.splice(index, 1);
    };
    $scope.$watch("tabset.active", function(val) {
        if (angular.isDefined(val) && val !== oldIndex) {
            ctrl.select(findTabIndex(val));
        }
    });
    var destroyed;
    $scope.$on("$destroy", function() {
        destroyed = true;
    });
    function findTabIndex(index) {
        for (var i = 0; i < ctrl.tabs.length; i++) {
            if (ctrl.tabs[i].index === index) {
                return i;
            }
        }
    }
} ]).directive("uibTabset", function() {
    return {
        transclude: true,
        replace: true,
        scope: {},
        bindToController: {
            active: "=?",
            type: "@"
        },
        controller: "UibTabsetController",
        controllerAs: "tabset",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/tabs/tabset.html";
        },
        link: function(scope, element, attrs) {
            scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
            scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
        }
    };
}).directive("uibTab", [ "$parse", function($parse) {
    return {
        require: "^uibTabset",
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "uib/template/tabs/tab.html";
        },
        transclude: true,
        scope: {
            heading: "@",
            index: "=?",
            classes: "@?",
            onSelect: "&select",
            onDeselect: "&deselect"
        },
        controller: function() {},
        controllerAs: "tab",
        link: function(scope, elm, attrs, tabsetCtrl, transclude) {
            scope.disabled = false;
            if (attrs.disable) {
                scope.$parent.$watch($parse(attrs.disable), function(value) {
                    scope.disabled = !!value;
                });
            }
            if (angular.isUndefined(attrs.index)) {
                if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
                    scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) {
                        return t.index;
                    })) + 1;
                } else {
                    scope.index = 0;
                }
            }
            if (angular.isUndefined(attrs.classes)) {
                scope.classes = "";
            }
            scope.select = function(evt) {
                if (!scope.disabled) {
                    var index;
                    for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
                        if (tabsetCtrl.tabs[i].tab === scope) {
                            index = i;
                            break;
                        }
                    }
                    tabsetCtrl.select(index, evt);
                }
            };
            tabsetCtrl.addTab(scope);
            scope.$on("$destroy", function() {
                tabsetCtrl.removeTab(scope);
            });
            scope.$transcludeFn = transclude;
        }
    };
} ]).directive("uibTabHeadingTransclude", function() {
    return {
        restrict: "A",
        require: "^uibTab",
        link: function(scope, elm) {
            scope.$watch("headingElement", function updateHeadingElement(heading) {
                if (heading) {
                    elm.html("");
                    elm.append(heading);
                }
            });
        }
    };
}).directive("uibTabContentTransclude", function() {
    return {
        restrict: "A",
        require: "^uibTabset",
        link: function(scope, elm, attrs) {
            var tab = scope.$eval(attrs.uibTabContentTransclude).tab;
            tab.$transcludeFn(tab.$parent, function(contents) {
                angular.forEach(contents, function(node) {
                    if (isTabHeading(node)) {
                        tab.headingElement = node;
                    } else {
                        elm.append(node);
                    }
                });
            });
        }
    };
    function isTabHeading(node) {
        return node.tagName && (node.hasAttribute("uib-tab-heading") || node.hasAttribute("data-uib-tab-heading") || node.hasAttribute("x-uib-tab-heading") || node.tagName.toLowerCase() === "uib-tab-heading" || node.tagName.toLowerCase() === "data-uib-tab-heading" || node.tagName.toLowerCase() === "x-uib-tab-heading" || node.tagName.toLowerCase() === "uib:tab-heading");
    }
});

angular.module("ui.bootstrap.timepicker", []).constant("uibTimepickerConfig", {
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    showMeridian: true,
    showSeconds: false,
    meridians: null,
    readonlyInput: false,
    mousewheel: true,
    arrowkeys: true,
    showSpinners: true,
    templateUrl: "uib/template/timepicker/timepicker.html"
}).controller("UibTimepickerController", [ "$scope", "$element", "$attrs", "$parse", "$log", "$locale", "uibTimepickerConfig", function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
    var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
    var selected = new Date(), watchers = [], ngModelCtrl = {
        $setViewValue: angular.noop
    }, meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS, padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;
    $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
    $element.removeAttr("tabindex");
    this.init = function(ngModelCtrl_, inputs) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.unshift(function(modelValue) {
            return modelValue ? new Date(modelValue) : null;
        });
        var hoursInputEl = inputs.eq(0), minutesInputEl = inputs.eq(1), secondsInputEl = inputs.eq(2);
        hoursModelCtrl = hoursInputEl.controller("ngModel");
        minutesModelCtrl = minutesInputEl.controller("ngModel");
        secondsModelCtrl = secondsInputEl.controller("ngModel");
        var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
        if (mousewheel) {
            this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
        }
        var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
        if (arrowkeys) {
            this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
        }
        $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
        this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
    };
    var hourStep = timepickerConfig.hourStep;
    if ($attrs.hourStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
            hourStep = +value;
        }));
    }
    var minuteStep = timepickerConfig.minuteStep;
    if ($attrs.minuteStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
            minuteStep = +value;
        }));
    }
    var min;
    watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
        var dt = new Date(value);
        min = isNaN(dt) ? undefined : dt;
    }));
    var max;
    watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
        var dt = new Date(value);
        max = isNaN(dt) ? undefined : dt;
    }));
    var disabled = false;
    if ($attrs.ngDisabled) {
        watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
            disabled = value;
        }));
    }
    $scope.noIncrementHours = function() {
        var incrementedSelected = addMinutes(selected, hourStep * 60);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementHours = function() {
        var decrementedSelected = addMinutes(selected, -hourStep * 60);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noIncrementMinutes = function() {
        var incrementedSelected = addMinutes(selected, minuteStep);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementMinutes = function() {
        var decrementedSelected = addMinutes(selected, -minuteStep);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noIncrementSeconds = function() {
        var incrementedSelected = addSeconds(selected, secondStep);
        return disabled || incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementSeconds = function() {
        var decrementedSelected = addSeconds(selected, -secondStep);
        return disabled || decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noToggleMeridian = function() {
        if (selected.getHours() < 12) {
            return disabled || addMinutes(selected, 12 * 60) > max;
        }
        return disabled || addMinutes(selected, -12 * 60) < min;
    };
    var secondStep = timepickerConfig.secondStep;
    if ($attrs.secondStep) {
        watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
            secondStep = +value;
        }));
    }
    $scope.showSeconds = timepickerConfig.showSeconds;
    if ($attrs.showSeconds) {
        watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
            $scope.showSeconds = !!value;
        }));
    }
    $scope.showMeridian = timepickerConfig.showMeridian;
    if ($attrs.showMeridian) {
        watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
            $scope.showMeridian = !!value;
            if (ngModelCtrl.$error.time) {
                var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
                if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                    selected.setHours(hours);
                    refresh();
                }
            } else {
                updateTemplate();
            }
        }));
    }
    function getHoursFromTemplate() {
        var hours = +$scope.hours;
        var valid = $scope.showMeridian ? hours > 0 && hours < 13 : hours >= 0 && hours < 24;
        if (!valid || $scope.hours === "") {
            return undefined;
        }
        if ($scope.showMeridian) {
            if (hours === 12) {
                hours = 0;
            }
            if ($scope.meridian === meridians[1]) {
                hours = hours + 12;
            }
        }
        return hours;
    }
    function getMinutesFromTemplate() {
        var minutes = +$scope.minutes;
        var valid = minutes >= 0 && minutes < 60;
        if (!valid || $scope.minutes === "") {
            return undefined;
        }
        return minutes;
    }
    function getSecondsFromTemplate() {
        var seconds = +$scope.seconds;
        return seconds >= 0 && seconds < 60 ? seconds : undefined;
    }
    function pad(value, noPad) {
        if (value === null) {
            return "";
        }
        return angular.isDefined(value) && value.toString().length < 2 && !noPad ? "0" + value : value.toString();
    }
    this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        var isScrollingUp = function(e) {
            if (e.originalEvent) {
                e = e.originalEvent;
            }
            var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
            return e.detail || delta > 0;
        };
        hoursInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
            }
            e.preventDefault();
        });
        minutesInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
            }
            e.preventDefault();
        });
        secondsInputEl.on("mousewheel wheel", function(e) {
            if (!disabled) {
                $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
            }
            e.preventDefault();
        });
    };
    this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        hoursInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementHours();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementHours();
                    $scope.$apply();
                }
            }
        });
        minutesInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementMinutes();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementMinutes();
                    $scope.$apply();
                }
            }
        });
        secondsInputEl.on("keydown", function(e) {
            if (!disabled) {
                if (e.which === 38) {
                    e.preventDefault();
                    $scope.incrementSeconds();
                    $scope.$apply();
                } else if (e.which === 40) {
                    e.preventDefault();
                    $scope.decrementSeconds();
                    $scope.$apply();
                }
            }
        });
    };
    this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
        if ($scope.readonlyInput) {
            $scope.updateHours = angular.noop;
            $scope.updateMinutes = angular.noop;
            $scope.updateSeconds = angular.noop;
            return;
        }
        var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
            ngModelCtrl.$setViewValue(null);
            ngModelCtrl.$setValidity("time", false);
            if (angular.isDefined(invalidHours)) {
                $scope.invalidHours = invalidHours;
                if (hoursModelCtrl) {
                    hoursModelCtrl.$setValidity("hours", false);
                }
            }
            if (angular.isDefined(invalidMinutes)) {
                $scope.invalidMinutes = invalidMinutes;
                if (minutesModelCtrl) {
                    minutesModelCtrl.$setValidity("minutes", false);
                }
            }
            if (angular.isDefined(invalidSeconds)) {
                $scope.invalidSeconds = invalidSeconds;
                if (secondsModelCtrl) {
                    secondsModelCtrl.$setValidity("seconds", false);
                }
            }
        };
        $scope.updateHours = function() {
            var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                selected.setHours(hours);
                selected.setMinutes(minutes);
                if (selected < min || selected > max) {
                    invalidate(true);
                } else {
                    refresh("h");
                }
            } else {
                invalidate(true);
            }
        };
        hoursInputEl.on("blur", function(e) {
            ngModelCtrl.$setTouched();
            if (modelIsEmpty()) {
                makeValid();
            } else if ($scope.hours === null || $scope.hours === "") {
                invalidate(true);
            } else if (!$scope.invalidHours && $scope.hours < 10) {
                $scope.$apply(function() {
                    $scope.hours = pad($scope.hours, !padHours);
                });
            }
        });
        $scope.updateMinutes = function() {
            var minutes = getMinutesFromTemplate(), hours = getHoursFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(minutes) && angular.isDefined(hours)) {
                selected.setHours(hours);
                selected.setMinutes(minutes);
                if (selected < min || selected > max) {
                    invalidate(undefined, true);
                } else {
                    refresh("m");
                }
            } else {
                invalidate(undefined, true);
            }
        };
        minutesInputEl.on("blur", function(e) {
            ngModelCtrl.$setTouched();
            if (modelIsEmpty()) {
                makeValid();
            } else if ($scope.minutes === null) {
                invalidate(undefined, true);
            } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
                $scope.$apply(function() {
                    $scope.minutes = pad($scope.minutes);
                });
            }
        });
        $scope.updateSeconds = function() {
            var seconds = getSecondsFromTemplate();
            ngModelCtrl.$setDirty();
            if (angular.isDefined(seconds)) {
                selected.setSeconds(seconds);
                refresh("s");
            } else {
                invalidate(undefined, undefined, true);
            }
        };
        secondsInputEl.on("blur", function(e) {
            if (modelIsEmpty()) {
                makeValid();
            } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
                $scope.$apply(function() {
                    $scope.seconds = pad($scope.seconds);
                });
            }
        });
    };
    this.render = function() {
        var date = ngModelCtrl.$viewValue;
        if (isNaN(date)) {
            ngModelCtrl.$setValidity("time", false);
            $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
        } else {
            if (date) {
                selected = date;
            }
            if (selected < min || selected > max) {
                ngModelCtrl.$setValidity("time", false);
                $scope.invalidHours = true;
                $scope.invalidMinutes = true;
            } else {
                makeValid();
            }
            updateTemplate();
        }
    };
    function refresh(keyboardChange) {
        makeValid();
        ngModelCtrl.$setViewValue(new Date(selected));
        updateTemplate(keyboardChange);
    }
    function makeValid() {
        if (hoursModelCtrl) {
            hoursModelCtrl.$setValidity("hours", true);
        }
        if (minutesModelCtrl) {
            minutesModelCtrl.$setValidity("minutes", true);
        }
        if (secondsModelCtrl) {
            secondsModelCtrl.$setValidity("seconds", true);
        }
        ngModelCtrl.$setValidity("time", true);
        $scope.invalidHours = false;
        $scope.invalidMinutes = false;
        $scope.invalidSeconds = false;
    }
    function updateTemplate(keyboardChange) {
        if (!ngModelCtrl.$modelValue) {
            $scope.hours = null;
            $scope.minutes = null;
            $scope.seconds = null;
            $scope.meridian = meridians[0];
        } else {
            var hours = selected.getHours(), minutes = selected.getMinutes(), seconds = selected.getSeconds();
            if ($scope.showMeridian) {
                hours = hours === 0 || hours === 12 ? 12 : hours % 12;
            }
            $scope.hours = keyboardChange === "h" ? hours : pad(hours, !padHours);
            if (keyboardChange !== "m") {
                $scope.minutes = pad(minutes);
            }
            $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
            if (keyboardChange !== "s") {
                $scope.seconds = pad(seconds);
            }
            $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
        }
    }
    function addSecondsToSelected(seconds) {
        selected = addSeconds(selected, seconds);
        refresh();
    }
    function addMinutes(selected, minutes) {
        return addSeconds(selected, minutes * 60);
    }
    function addSeconds(date, seconds) {
        var dt = new Date(date.getTime() + seconds * 1e3);
        var newDate = new Date(date);
        newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
        return newDate;
    }
    function modelIsEmpty() {
        return ($scope.hours === null || $scope.hours === "") && ($scope.minutes === null || $scope.minutes === "") && (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ""));
    }
    $scope.showSpinners = angular.isDefined($attrs.showSpinners) ? $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;
    $scope.incrementHours = function() {
        if (!$scope.noIncrementHours()) {
            addSecondsToSelected(hourStep * 60 * 60);
        }
    };
    $scope.decrementHours = function() {
        if (!$scope.noDecrementHours()) {
            addSecondsToSelected(-hourStep * 60 * 60);
        }
    };
    $scope.incrementMinutes = function() {
        if (!$scope.noIncrementMinutes()) {
            addSecondsToSelected(minuteStep * 60);
        }
    };
    $scope.decrementMinutes = function() {
        if (!$scope.noDecrementMinutes()) {
            addSecondsToSelected(-minuteStep * 60);
        }
    };
    $scope.incrementSeconds = function() {
        if (!$scope.noIncrementSeconds()) {
            addSecondsToSelected(secondStep);
        }
    };
    $scope.decrementSeconds = function() {
        if (!$scope.noDecrementSeconds()) {
            addSecondsToSelected(-secondStep);
        }
    };
    $scope.toggleMeridian = function() {
        var minutes = getMinutesFromTemplate(), hours = getHoursFromTemplate();
        if (!$scope.noToggleMeridian()) {
            if (angular.isDefined(minutes) && angular.isDefined(hours)) {
                addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
            } else {
                $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
            }
        }
    };
    $scope.blur = function() {
        ngModelCtrl.$setTouched();
    };
    $scope.$on("$destroy", function() {
        while (watchers.length) {
            watchers.shift()();
        }
    });
} ]).directive("uibTimepicker", [ "uibTimepickerConfig", function(uibTimepickerConfig) {
    return {
        require: [ "uibTimepicker", "?^ngModel" ],
        restrict: "A",
        controller: "UibTimepickerController",
        controllerAs: "timepicker",
        scope: {},
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || uibTimepickerConfig.templateUrl;
        },
        link: function(scope, element, attrs, ctrls) {
            var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                timepickerCtrl.init(ngModelCtrl, element.find("input"));
            }
        }
    };
} ]);

angular.module("ui.bootstrap.typeahead", [ "ui.bootstrap.debounce", "ui.bootstrap.position" ]).factory("uibTypeaheadParser", [ "$parse", function($parse) {
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
        parse: function(input) {
            var match = input.match(TYPEAHEAD_REGEXP);
            if (!match) {
                throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' + ' but got "' + input + '".');
            }
            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
} ]).controller("UibTypeaheadController", [ "$scope", "$element", "$attrs", "$compile", "$parse", "$q", "$timeout", "$document", "$window", "$rootScope", "$$debounce", "$uibPosition", "uibTypeaheadParser", function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
    var HOT_KEYS = [ 9, 13, 27, 38, 40 ];
    var eventDebounceTime = 200;
    var modelCtrl, ngModelOptions;
    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
    if (!minLength && minLength !== 0) {
        minLength = 1;
    }
    originalScope.$watch(attrs.typeaheadMinLength, function(newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal;
    });
    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;
    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
    originalScope.$watch(attrs.typeaheadEditable, function(newVal) {
        isEditable = newVal !== false;
    });
    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;
    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
        var evt = vals.$event;
        return evt.which === 13 || evt.which === 9;
    };
    var onSelectCallback = $parse(attrs.typeaheadOnSelect);
    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;
    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;
    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;
    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;
    var appendTo = attrs.typeaheadAppendTo ? originalScope.$eval(attrs.typeaheadAppendTo) : null;
    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;
    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;
    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;
    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;
    var parsedModel = $parse(attrs.ngModel);
    var invokeModelSetter = $parse(attrs.ngModel + "($$$p)");
    var $setModelValue = function(scope, newValue) {
        if (angular.isFunction(parsedModel(originalScope)) && ngModelOptions.getOption("getterSetter")) {
            return invokeModelSetter(scope, {
                $$$p: newValue
            });
        }
        return parsedModel.assign(scope, newValue);
    };
    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);
    var hasFocus;
    var selected;
    var scope = originalScope.$new();
    var offDestroy = originalScope.$on("$destroy", function() {
        scope.$destroy();
    });
    scope.$on("$destroy", offDestroy);
    var popupId = "typeahead-" + scope.$id + "-" + Math.floor(Math.random() * 1e4);
    element.attr({
        "aria-autocomplete": "list",
        "aria-expanded": false,
        "aria-owns": popupId
    });
    var inputsContainer, hintInputElem;
    if (showHint) {
        inputsContainer = angular.element("<div></div>");
        inputsContainer.css("position", "relative");
        element.after(inputsContainer);
        hintInputElem = element.clone();
        hintInputElem.attr("placeholder", "");
        hintInputElem.attr("tabindex", "-1");
        hintInputElem.val("");
        hintInputElem.css({
            position: "absolute",
            top: "0px",
            left: "0px",
            "border-color": "transparent",
            "box-shadow": "none",
            opacity: 1,
            background: "none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",
            color: "#999"
        });
        element.css({
            position: "relative",
            "vertical-align": "top",
            "background-color": "transparent"
        });
        if (hintInputElem.attr("id")) {
            hintInputElem.removeAttr("id");
        }
        inputsContainer.append(hintInputElem);
        hintInputElem.after(element);
    }
    var popUpEl = angular.element("<div uib-typeahead-popup></div>");
    popUpEl.attr({
        id: popupId,
        matches: "matches",
        active: "activeIdx",
        select: "select(activeIdx, evt)",
        "move-in-progress": "moveInProgress",
        query: "query",
        position: "position",
        "assign-is-open": "assignIsOpen(isOpen)",
        debounce: "debounceUpdate"
    });
    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr("template-url", attrs.typeaheadTemplateUrl);
    }
    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
        popUpEl.attr("popup-template-url", attrs.typeaheadPopupTemplateUrl);
    }
    var resetHint = function() {
        if (showHint) {
            hintInputElem.val("");
        }
    };
    var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
        element.attr("aria-expanded", false);
        resetHint();
    };
    var getMatchId = function(index) {
        return popupId + "-option-" + index;
    };
    scope.$watch("activeIdx", function(index) {
        if (index < 0) {
            element.removeAttr("aria-activedescendant");
        } else {
            element.attr("aria-activedescendant", getMatchId(index));
        }
    });
    var inputIsExactMatch = function(inputValue, index) {
        if (scope.matches.length > index && inputValue) {
            return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
        }
        return false;
    };
    var getMatchesAsync = function(inputValue, evt) {
        var locals = {
            $viewValue: inputValue
        };
        isLoadingSetter(originalScope, true);
        isNoResultsSetter(originalScope, false);
        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
            var onCurrentRequest = inputValue === modelCtrl.$viewValue;
            if (onCurrentRequest && hasFocus) {
                if (matches && matches.length > 0) {
                    scope.activeIdx = focusFirst ? 0 : -1;
                    isNoResultsSetter(originalScope, false);
                    scope.matches.length = 0;
                    for (var i = 0; i < matches.length; i++) {
                        locals[parserResult.itemName] = matches[i];
                        scope.matches.push({
                            id: getMatchId(i),
                            label: parserResult.viewMapper(scope, locals),
                            model: matches[i]
                        });
                    }
                    scope.query = inputValue;
                    recalculatePosition();
                    element.attr("aria-expanded", true);
                    if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
                        if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                            $$debounce(function() {
                                scope.select(0, evt);
                            }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate["default"]);
                        } else {
                            scope.select(0, evt);
                        }
                    }
                    if (showHint) {
                        var firstLabel = scope.matches[0].label;
                        if (angular.isString(inputValue) && inputValue.length > 0 && firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
                            hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
                        } else {
                            hintInputElem.val("");
                        }
                    }
                } else {
                    resetMatches();
                    isNoResultsSetter(originalScope, true);
                }
            }
            if (onCurrentRequest) {
                isLoadingSetter(originalScope, false);
            }
        }, function() {
            resetMatches();
            isLoadingSetter(originalScope, false);
            isNoResultsSetter(originalScope, true);
        });
    };
    if (appendToBody) {
        angular.element($window).on("resize", fireRecalculating);
        $document.find("body").on("scroll", fireRecalculating);
    }
    var debouncedRecalculate = $$debounce(function() {
        if (scope.matches.length) {
            recalculatePosition();
        }
        scope.moveInProgress = false;
    }, eventDebounceTime);
    scope.moveInProgress = false;
    function fireRecalculating() {
        if (!scope.moveInProgress) {
            scope.moveInProgress = true;
            scope.$digest();
        }
        debouncedRecalculate();
    }
    function recalculatePosition() {
        scope.position = appendToBody ? $position.offset(element) : $position.position(element);
        scope.position.top += element.prop("offsetHeight");
    }
    scope.query = undefined;
    var timeoutPromise;
    var scheduleSearchWithTimeout = function(inputValue) {
        timeoutPromise = $timeout(function() {
            getMatchesAsync(inputValue);
        }, waitTime);
    };
    var cancelPreviousTimeout = function() {
        if (timeoutPromise) {
            $timeout.cancel(timeoutPromise);
        }
    };
    resetMatches();
    scope.assignIsOpen = function(isOpen) {
        isOpenSetter(originalScope, isOpen);
    };
    scope.select = function(activeIdx, evt) {
        var locals = {};
        var model, item;
        selected = true;
        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity("editable", true);
        modelCtrl.$setValidity("parse", true);
        onSelectCallback(originalScope, {
            $item: item,
            $model: model,
            $label: parserResult.viewMapper(originalScope, locals),
            $event: evt
        });
        resetMatches();
        if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
            $timeout(function() {
                element[0].focus();
            }, 0, false);
        }
    };
    element.on("keydown", function(evt) {
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
            return;
        }
        var shouldSelect = isSelectEvent(originalScope, {
            $event: evt
        });
        if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
            resetMatches();
            scope.$digest();
            return;
        }
        evt.preventDefault();
        var target;
        switch (evt.which) {
          case 27:
            evt.stopPropagation();
            resetMatches();
            originalScope.$digest();
            break;

          case 38:
            scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
            scope.$digest();
            target = popUpEl[0].querySelectorAll(".uib-typeahead-match")[scope.activeIdx];
            target.parentNode.scrollTop = target.offsetTop;
            break;

          case 40:
            scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
            scope.$digest();
            target = popUpEl[0].querySelectorAll(".uib-typeahead-match")[scope.activeIdx];
            target.parentNode.scrollTop = target.offsetTop;
            break;

          default:
            if (shouldSelect) {
                scope.$apply(function() {
                    if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
                        $$debounce(function() {
                            scope.select(scope.activeIdx, evt);
                        }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate["default"]);
                    } else {
                        scope.select(scope.activeIdx, evt);
                    }
                });
            }
        }
    });
    element.on("focus", function(evt) {
        hasFocus = true;
        if (minLength === 0 && !modelCtrl.$viewValue) {
            $timeout(function() {
                getMatchesAsync(modelCtrl.$viewValue, evt);
            }, 0);
        }
    });
    element.on("blur", function(evt) {
        if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
            selected = true;
            scope.$apply(function() {
                if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
                    $$debounce(function() {
                        scope.select(scope.activeIdx, evt);
                    }, scope.debounceUpdate.blur);
                } else {
                    scope.select(scope.activeIdx, evt);
                }
            });
        }
        if (!isEditable && modelCtrl.$error.editable) {
            modelCtrl.$setViewValue();
            scope.$apply(function() {
                modelCtrl.$setValidity("editable", true);
                modelCtrl.$setValidity("parse", true);
            });
            element.val("");
        }
        hasFocus = false;
        selected = false;
    });
    var dismissClickHandler = function(evt) {
        if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
            resetMatches();
            if (!$rootScope.$$phase) {
                originalScope.$digest();
            }
        }
    };
    $document.on("click", dismissClickHandler);
    originalScope.$on("$destroy", function() {
        $document.off("click", dismissClickHandler);
        if (appendToBody || appendTo) {
            $popup.remove();
        }
        if (appendToBody) {
            angular.element($window).off("resize", fireRecalculating);
            $document.find("body").off("scroll", fireRecalculating);
        }
        popUpEl.remove();
        if (showHint) {
            inputsContainer.remove();
        }
    });
    var $popup = $compile(popUpEl)(scope);
    if (appendToBody) {
        $document.find("body").append($popup);
    } else if (appendTo) {
        angular.element(appendTo).eq(0).append($popup);
    } else {
        element.after($popup);
    }
    this.init = function(_modelCtrl) {
        modelCtrl = _modelCtrl;
        ngModelOptions = extractOptions(modelCtrl);
        scope.debounceUpdate = $parse(ngModelOptions.getOption("debounce"))(originalScope);
        modelCtrl.$parsers.unshift(function(inputValue) {
            hasFocus = true;
            if (minLength === 0 || inputValue && inputValue.length >= minLength) {
                if (waitTime > 0) {
                    cancelPreviousTimeout();
                    scheduleSearchWithTimeout(inputValue);
                } else {
                    getMatchesAsync(inputValue);
                }
            } else {
                isLoadingSetter(originalScope, false);
                cancelPreviousTimeout();
                resetMatches();
            }
            if (isEditable) {
                return inputValue;
            }
            if (!inputValue) {
                modelCtrl.$setValidity("editable", true);
                return null;
            }
            modelCtrl.$setValidity("editable", false);
            return undefined;
        });
        modelCtrl.$formatters.push(function(modelValue) {
            var candidateViewValue, emptyViewValue;
            var locals = {};
            if (!isEditable) {
                modelCtrl.$setValidity("editable", true);
            }
            if (inputFormatter) {
                locals.$model = modelValue;
                return inputFormatter(originalScope, locals);
            }
            locals[parserResult.itemName] = modelValue;
            candidateViewValue = parserResult.viewMapper(originalScope, locals);
            locals[parserResult.itemName] = undefined;
            emptyViewValue = parserResult.viewMapper(originalScope, locals);
            return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
        });
    };
    function extractOptions(ngModelCtrl) {
        var ngModelOptions;
        if (angular.version.minor < 6) {
            ngModelOptions = ngModelCtrl.$options || {};
            ngModelOptions.getOption = function(key) {
                return ngModelOptions[key];
            };
        } else {
            ngModelOptions = ngModelCtrl.$options;
        }
        return ngModelOptions;
    }
} ]).directive("uibTypeahead", function() {
    return {
        controller: "UibTypeaheadController",
        require: [ "ngModel", "uibTypeahead" ],
        link: function(originalScope, element, attrs, ctrls) {
            ctrls[1].init(ctrls[0]);
        }
    };
}).directive("uibTypeaheadPopup", [ "$$debounce", function($$debounce) {
    return {
        scope: {
            matches: "=",
            query: "=",
            active: "=",
            position: "&",
            moveInProgress: "=",
            select: "&",
            assignIsOpen: "&",
            debounce: "&"
        },
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.popupTemplateUrl || "uib/template/typeahead/typeahead-popup.html";
        },
        link: function(scope, element, attrs) {
            scope.templateUrl = attrs.templateUrl;
            scope.isOpen = function() {
                var isDropdownOpen = scope.matches.length > 0;
                scope.assignIsOpen({
                    isOpen: isDropdownOpen
                });
                return isDropdownOpen;
            };
            scope.isActive = function(matchIdx) {
                return scope.active === matchIdx;
            };
            scope.selectActive = function(matchIdx) {
                scope.active = matchIdx;
            };
            scope.selectMatch = function(activeIdx, evt) {
                var debounce = scope.debounce();
                if (angular.isNumber(debounce) || angular.isObject(debounce)) {
                    $$debounce(function() {
                        scope.select({
                            activeIdx: activeIdx,
                            evt: evt
                        });
                    }, angular.isNumber(debounce) ? debounce : debounce["default"]);
                } else {
                    scope.select({
                        activeIdx: activeIdx,
                        evt: evt
                    });
                }
            };
        }
    };
} ]).directive("uibTypeaheadMatch", [ "$templateRequest", "$compile", "$parse", function($templateRequest, $compile, $parse) {
    return {
        scope: {
            index: "=",
            match: "=",
            query: "="
        },
        link: function(scope, element, attrs) {
            var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || "uib/template/typeahead/typeahead-match.html";
            $templateRequest(tplUrl).then(function(tplContent) {
                var tplEl = angular.element(tplContent.trim());
                element.replaceWith(tplEl);
                $compile(tplEl)(scope);
            });
        }
    };
} ]).filter("uibTypeaheadHighlight", [ "$sce", "$injector", "$log", function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has("$sanitize");
    function escapeRegexp(queryToEscape) {
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
    function containsHtml(matchItem) {
        return /<.*>/g.test(matchItem);
    }
    return function(matchItem, query) {
        if (!isSanitizePresent && containsHtml(matchItem)) {
            $log.warn("Unsafe use of typeahead please use ngSanitize");
        }
        matchItem = query ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), "gi"), "<strong>$&</strong>") : matchItem;
        if (!isSanitizePresent) {
            matchItem = $sce.trustAsHtml(matchItem);
        }
        return matchItem;
    };
} ]);

angular.module("uib/template/accordion/accordion-group.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/accordion/accordion-group.html", '<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n' + '  <h4 class="panel-title">\n' + '    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n' + "  </h4>\n" + "</div>\n" + '<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n' + '  <div class="panel-body" ng-transclude></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/accordion/accordion.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/accordion/accordion.html", '<div role="tablist" class="panel-group" ng-transclude></div>');
} ]);

angular.module("uib/template/alert/alert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/alert/alert.html", '<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n' + '  <span aria-hidden="true">&times;</span>\n' + '  <span class="sr-only">Close</span>\n' + "</button>\n" + "<div ng-transclude></div>\n" + "");
} ]);

angular.module("uib/template/carousel/carousel.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/carousel/carousel.html", '<div class="carousel-inner" ng-transclude></div>\n' + '<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n' + '  <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n' + '  <span class="sr-only">previous</span>\n' + "</a>\n" + '<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n' + '  <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n' + '  <span class="sr-only">next</span>\n' + "</a>\n" + '<ol class="carousel-indicators" ng-show="slides.length > 1">\n' + '  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n' + '    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n' + "  </li>\n" + "</ol>\n" + "");
} ]);

angular.module("uib/template/carousel/slide.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/carousel/slide.html", '<div class="text-center" ng-transclude></div>\n' + "");
} ]);

angular.module("uib/template/datepicker/datepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/datepicker/datepicker.html", '<div ng-switch="datepickerMode">\n' + '  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n' + '  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n' + '  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/datepicker/day.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/datepicker/day.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n' + '      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n' + "    </tr>\n" + "    <tr>\n" + '      <th ng-if="showWeeks" class="text-center"></th>\n' + '      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n' + '      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n' + '      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n' + '        id="{{::dt.uid}}"\n' + '        ng-class="::dt.customClass">\n' + '        <button type="button" class="btn btn-default btn-sm"\n' + '          uib-is-class="\n' + "            'btn-info' for selectedDt,\n" + "            'active' for activeDt\n" + '            on dt"\n' + '          ng-click="select(dt.date)"\n' + '          ng-disabled="::dt.disabled"\n' + "          tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("uib/template/datepicker/month.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/datepicker/month.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n' + '      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n' + '      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n' + '        id="{{::dt.uid}}"\n' + '        ng-class="::dt.customClass">\n' + '        <button type="button" class="btn btn-default"\n' + '          uib-is-class="\n' + "            'btn-info' for selectedDt,\n" + "            'active' for activeDt\n" + '            on dt"\n' + '          ng-click="select(dt.date)"\n' + '          ng-disabled="::dt.disabled"\n' + '          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("uib/template/datepicker/year.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/datepicker/year.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n' + '      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n' + '      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n' + '        id="{{::dt.uid}}"\n' + '        ng-class="::dt.customClass">\n' + '        <button type="button" class="btn btn-default"\n' + '          uib-is-class="\n' + "            'btn-info' for selectedDt,\n" + "            'active' for activeDt\n" + '            on dt"\n' + '          ng-click="select(dt.date)"\n' + '          ng-disabled="::dt.disabled"\n' + '          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("uib/template/datepickerPopup/popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/datepickerPopup/popup.html", '<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n' + "  <li ng-transclude></li>\n" + '  <li ng-if="showButtonBar" class="uib-button-bar">\n' + '    <span class="btn-group pull-left">\n' + '      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n' + '      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n' + "    </span>\n" + '    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n' + "  </li>\n" + "</ul>\n" + "");
} ]);

angular.module("uib/template/modal/window.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/modal/window.html", "<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" + "");
} ]);

angular.module("uib/template/pager/pager.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/pager/pager.html", '<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n' + '<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n' + "");
} ]);

angular.module("uib/template/pagination/pagination.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/pagination/pagination.html", '<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n' + '<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n' + '<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n' + '<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n' + '<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n' + "");
} ]);

angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/tooltip/tooltip-html-popup.html", '<div class="tooltip-arrow"></div>\n' + '<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n' + "");
} ]);

angular.module("uib/template/tooltip/tooltip-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/tooltip/tooltip-popup.html", '<div class="tooltip-arrow"></div>\n' + '<div class="tooltip-inner" ng-bind="content"></div>\n' + "");
} ]);

angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/tooltip/tooltip-template-popup.html", '<div class="tooltip-arrow"></div>\n' + '<div class="tooltip-inner"\n' + '  uib-tooltip-template-transclude="contentExp()"\n' + '  tooltip-template-transclude-scope="originScope()"></div>\n' + "");
} ]);

angular.module("uib/template/popover/popover-html.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/popover/popover-html.html", '<div class="arrow"></div>\n' + "\n" + '<div class="popover-inner">\n' + '    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' + '    <div class="popover-content" ng-bind-html="contentExp()"></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/popover/popover-template.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/popover/popover-template.html", '<div class="arrow"></div>\n' + "\n" + '<div class="popover-inner">\n' + '    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' + '    <div class="popover-content"\n' + '      uib-tooltip-template-transclude="contentExp()"\n' + '      tooltip-template-transclude-scope="originScope()"></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/popover/popover.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/popover/popover.html", '<div class="arrow"></div>\n' + "\n" + '<div class="popover-inner">\n' + '    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' + '    <div class="popover-content" ng-bind="content"></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/progressbar/bar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n' + "");
} ]);

angular.module("uib/template/progressbar/progress.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/progressbar/progress.html", '<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>');
} ]);

angular.module("uib/template/progressbar/progressbar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/progressbar/progressbar.html", '<div class="progress">\n' + '  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n' + "</div>\n" + "");
} ]);

angular.module("uib/template/rating/rating.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n' + "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" + '    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n' + "</span>\n" + "");
} ]);

angular.module("uib/template/tabs/tab.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/tabs/tab.html", '<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n' + '  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n' + "</li>\n" + "");
} ]);

angular.module("uib/template/tabs/tabset.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/tabs/tabset.html", "<div>\n" + "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" + '  <div class="tab-content">\n' + '    <div class="tab-pane"\n' + '         ng-repeat="tab in tabset.tabs"\n' + '         ng-class="{active: tabset.active === tab.index}"\n' + '         uib-tab-content-transclude="tab">\n' + "    </div>\n" + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("uib/template/timepicker/timepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/timepicker/timepicker.html", '<table class="uib-timepicker">\n' + "  <tbody>\n" + '    <tr class="text-center" ng-show="::showSpinners">\n' + '      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n' + "      <td>&nbsp;</td>\n" + '      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n' + '      <td ng-show="showSeconds">&nbsp;</td>\n' + '      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n' + '      <td ng-show="showMeridian"></td>\n' + "    </tr>\n" + "    <tr>\n" + '      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n' + '        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n' + "      </td>\n" + '      <td class="uib-separator">:</td>\n' + '      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n' + '        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n' + "      </td>\n" + '      <td ng-show="showSeconds" class="uib-separator">:</td>\n' + '      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n' + '        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n' + "      </td>\n" + '      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n' + "    </tr>\n" + '    <tr class="text-center" ng-show="::showSpinners">\n' + '      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n' + "      <td>&nbsp;</td>\n" + '      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n' + '      <td ng-show="showSeconds">&nbsp;</td>\n' + '      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n' + '      <td ng-show="showMeridian"></td>\n' + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("uib/template/typeahead/typeahead-match.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/typeahead/typeahead-match.html", "<a href\n" + '   tabindex="-1"\n' + '   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n' + '   ng-attr-title="{{match.label}}"></a>\n' + "");
} ]);

angular.module("uib/template/typeahead/typeahead-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("uib/template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n' + '    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n' + '        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n' + "    </li>\n" + "</ul>\n" + "");
} ]);

angular.module("ui.bootstrap.carousel").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');
    angular.$$uibCarouselCss = true;
});

angular.module("ui.bootstrap.datepicker").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>');
    angular.$$uibDatepickerCss = true;
});

angular.module("ui.bootstrap.position").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>');
    angular.$$uibPositionCss = true;
});

angular.module("ui.bootstrap.datepickerPopup").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>');
    angular.$$uibDatepickerpopupCss = true;
});

angular.module("ui.bootstrap.tooltip").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>');
    angular.$$uibTooltipCss = true;
});

angular.module("ui.bootstrap.timepicker").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>');
    angular.$$uibTimepickerCss = true;
});

angular.module("ui.bootstrap.typeahead").run(function() {
    !angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>');
    angular.$$uibTypeaheadCss = true;
});

if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = "ui.router";
}

(function(window, angular, undefined) {
    "use strict";
    var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, toJson = angular.toJson;
    function inherit(parent, extra) {
        return extend(new (extend(function() {}, {
            prototype: parent
        }))(), extra);
    }
    function merge(dst) {
        forEach(arguments, function(obj) {
            if (obj !== dst) {
                forEach(obj, function(value, key) {
                    if (!dst.hasOwnProperty(key)) dst[key] = value;
                });
            }
        });
        return dst;
    }
    function ancestors(first, second) {
        var path = [];
        for (var n in first.path) {
            if (first.path[n] !== second.path[n]) break;
            path.push(first.path[n]);
        }
        return path;
    }
    function objectKeys(object) {
        if (Object.keys) {
            return Object.keys(object);
        }
        var result = [];
        forEach(object, function(val, key) {
            result.push(key);
        });
        return result;
    }
    function indexOf(array, value) {
        if (Array.prototype.indexOf) {
            return array.indexOf(value, Number(arguments[2]) || 0);
        }
        var len = array.length >>> 0, from = Number(arguments[2]) || 0;
        from = from < 0 ? Math.ceil(from) : Math.floor(from);
        if (from < 0) from += len;
        for (;from < len; from++) {
            if (from in array && array[from] === value) return from;
        }
        return -1;
    }
    function inheritParams(currentParams, newParams, $current, $to) {
        var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
        for (var i in parents) {
            if (!parents[i] || !parents[i].params) continue;
            parentParams = objectKeys(parents[i].params);
            if (!parentParams.length) continue;
            for (var j in parentParams) {
                if (indexOf(inheritList, parentParams[j]) >= 0) continue;
                inheritList.push(parentParams[j]);
                inherited[parentParams[j]] = currentParams[parentParams[j]];
            }
        }
        return extend({}, inherited, newParams);
    }
    function equalForKeys(a, b, keys) {
        if (!keys) {
            keys = [];
            for (var n in a) keys.push(n);
        }
        for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            if (a[k] != b[k]) return false;
        }
        return true;
    }
    function filterByKeys(keys, values) {
        var filtered = {};
        forEach(keys, function(name) {
            filtered[name] = values[name];
        });
        return filtered;
    }
    function indexBy(array, propName) {
        var result = {};
        forEach(array, function(item) {
            result[item[propName]] = item;
        });
        return result;
    }
    function pick(obj) {
        var copy = {};
        var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        forEach(keys, function(key) {
            if (key in obj) copy[key] = obj[key];
        });
        return copy;
    }
    function omit(obj) {
        var copy = {};
        var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var key in obj) {
            if (indexOf(keys, key) == -1) copy[key] = obj[key];
        }
        return copy;
    }
    function pluck(collection, key) {
        var result = isArray(collection) ? [] : {};
        forEach(collection, function(val, i) {
            result[i] = isFunction(key) ? key(val) : val[key];
        });
        return result;
    }
    function filter(collection, callback) {
        var array = isArray(collection);
        var result = array ? [] : {};
        forEach(collection, function(val, i) {
            if (callback(val, i)) {
                result[array ? result.length : i] = val;
            }
        });
        return result;
    }
    function map(collection, callback) {
        var result = isArray(collection) ? [] : {};
        forEach(collection, function(val, i) {
            result[i] = callback(val, i);
        });
        return result;
    }
    angular.module("ui.router.util", [ "ng" ]);
    angular.module("ui.router.router", [ "ui.router.util" ]);
    angular.module("ui.router.state", [ "ui.router.router", "ui.router.util" ]);
    angular.module("ui.router", [ "ui.router.state" ]);
    angular.module("ui.router.compat", [ "ui.router" ]);
    $Resolve.$inject = [ "$q", "$injector" ];
    function $Resolve($q, $injector) {
        var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
            $$promises: NOTHING,
            $$values: NOTHING
        });
        this.study = function(invocables) {
            if (!isObject(invocables)) throw new Error("'invocables' must be an object");
            var invocableKeys = objectKeys(invocables || {});
            var plan = [], cycle = [], visited = {};
            function visit(value, key) {
                if (visited[key] === VISIT_DONE) return;
                cycle.push(key);
                if (visited[key] === VISIT_IN_PROGRESS) {
                    cycle.splice(0, indexOf(cycle, key));
                    throw new Error("Cyclic dependency: " + cycle.join(" -> "));
                }
                visited[key] = VISIT_IN_PROGRESS;
                if (isString(value)) {
                    plan.push(key, [ function() {
                        return $injector.get(value);
                    } ], NO_DEPENDENCIES);
                } else {
                    var params = $injector.annotate(value);
                    forEach(params, function(param) {
                        if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
                    });
                    plan.push(key, value, params);
                }
                cycle.pop();
                visited[key] = VISIT_DONE;
            }
            forEach(invocables, visit);
            invocables = cycle = visited = null;
            function isResolve(value) {
                return isObject(value) && value.then && value.$$promises;
            }
            return function(locals, parent, self) {
                if (isResolve(locals) && self === undefined) {
                    self = parent;
                    parent = locals;
                    locals = null;
                }
                if (!locals) locals = NO_LOCALS; else if (!isObject(locals)) {
                    throw new Error("'locals' must be an object");
                }
                if (!parent) parent = NO_PARENT; else if (!isResolve(parent)) {
                    throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                }
                var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = false;
                function done() {
                    if (!--wait) {
                        if (!merged) merge(values, parent.$$values);
                        result.$$values = values;
                        result.$$promises = result.$$promises || true;
                        delete result.$$inheritedValues;
                        resolution.resolve(values);
                    }
                }
                function fail(reason) {
                    result.$$failure = reason;
                    resolution.reject(reason);
                }
                if (isDefined(parent.$$failure)) {
                    fail(parent.$$failure);
                    return result;
                }
                if (parent.$$inheritedValues) {
                    merge(values, omit(parent.$$inheritedValues, invocableKeys));
                }
                extend(promises, parent.$$promises);
                if (parent.$$values) {
                    merged = merge(values, omit(parent.$$values, invocableKeys));
                    result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                    done();
                } else {
                    if (parent.$$inheritedValues) {
                        result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
                    }
                    parent.then(done, fail);
                }
                for (var i = 0, ii = plan.length; i < ii; i += 3) {
                    if (locals.hasOwnProperty(plan[i])) done(); else invoke(plan[i], plan[i + 1], plan[i + 2]);
                }
                function invoke(key, invocable, params) {
                    var invocation = $q.defer(), waitParams = 0;
                    function onfailure(reason) {
                        invocation.reject(reason);
                        fail(reason);
                    }
                    forEach(params, function(dep) {
                        if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                            waitParams++;
                            promises[dep].then(function(result) {
                                values[dep] = result;
                                if (!--waitParams) proceed();
                            }, onfailure);
                        }
                    });
                    if (!waitParams) proceed();
                    function proceed() {
                        if (isDefined(result.$$failure)) return;
                        try {
                            invocation.resolve($injector.invoke(invocable, self, values));
                            invocation.promise.then(function(result) {
                                values[key] = result;
                                done();
                            }, onfailure);
                        } catch (e) {
                            onfailure(e);
                        }
                    }
                    promises[key] = invocation.promise;
                }
                return result;
            };
        };
        this.resolve = function(invocables, locals, parent, self) {
            return this.study(invocables)(locals, parent, self);
        };
    }
    angular.module("ui.router.util").service("$resolve", $Resolve);
    $TemplateFactory.$inject = [ "$http", "$templateCache", "$injector" ];
    function $TemplateFactory($http, $templateCache, $injector) {
        this.fromConfig = function(config, params, locals) {
            return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
        };
        this.fromString = function(template, params) {
            return isFunction(template) ? template(params) : template;
        };
        this.fromUrl = function(url, params) {
            if (isFunction(url)) url = url(params);
            if (url == null) return null; else return $http.get(url, {
                cache: $templateCache,
                headers: {
                    Accept: "text/html"
                }
            }).then(function(response) {
                return response.data;
            });
        };
        this.fromProvider = function(provider, params, locals) {
            return $injector.invoke(provider, null, locals || {
                params: params
            });
        };
    }
    angular.module("ui.router.util").service("$templateFactory", $TemplateFactory);
    var $$UMFP;
    function UrlMatcher(pattern, config, parentMatcher) {
        config = extend({
            params: {}
        }, isObject(config) ? config : {});
        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = "^", last = 0, m, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
        function addParameter(id, type, config, location) {
            paramNames.push(id);
            if (parentParams[id]) return parentParams[id];
            if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
            params[id] = new $$UMFP.Param(id, type, config, location);
            return params[id];
        }
        function quoteRegExp(string, pattern, squash, optional) {
            var surroundPattern = [ "", "" ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!pattern) return result;
            switch (squash) {
              case false:
                surroundPattern = [ "(", ")" + (optional ? "?" : "") ];
                break;

              case true:
                result = result.replace(/\/$/, "");
                surroundPattern = [ "(?:/(", ")|/)?" ];
                break;

              default:
                surroundPattern = [ "(" + squash + "|", ")?" ];
                break;
            }
            return result + surroundPattern[0] + pattern + surroundPattern[1];
        }
        this.source = pattern;
        function matchDetails(m, isSearch) {
            var id, regexp, segment, type, cfg, arrayMode;
            id = m[2] || m[3];
            cfg = config.params[id];
            segment = pattern.substring(last, m.index);
            regexp = isSearch ? m[4] : m[4] || (m[1] == "*" ? ".*" : null);
            if (regexp) {
                type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), {
                    pattern: new RegExp(regexp, config.caseInsensitive ? "i" : undefined)
                });
            }
            return {
                id: id,
                regexp: regexp,
                segment: segment,
                type: type,
                cfg: cfg
            };
        }
        var p, param, segment;
        while (m = placeholder.exec(pattern)) {
            p = matchDetails(m, false);
            if (p.segment.indexOf("?") >= 0) break;
            param = addParameter(p.id, p.type, p.cfg, "path");
            compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
            segments.push(p.segment);
            last = placeholder.lastIndex;
        }
        segment = pattern.substring(last);
        var i = segment.indexOf("?");
        if (i >= 0) {
            var search = this.sourceSearch = segment.substring(i);
            segment = segment.substring(0, i);
            this.sourcePath = pattern.substring(0, last + i);
            if (search.length > 0) {
                last = 0;
                while (m = searchPlaceholder.exec(search)) {
                    p = matchDetails(m, true);
                    param = addParameter(p.id, p.type, p.cfg, "search");
                    last = placeholder.lastIndex;
                }
            }
        } else {
            this.sourcePath = pattern;
            this.sourceSearch = "";
        }
        compiled += quoteRegExp(segment) + (config.strict === false ? "/?" : "") + "$";
        segments.push(segment);
        this.regexp = new RegExp(compiled, config.caseInsensitive ? "i" : undefined);
        this.prefix = segments[0];
        this.$$paramNames = paramNames;
    }
    UrlMatcher.prototype.concat = function(pattern, config) {
        var defaultConfig = {
            caseInsensitive: $$UMFP.caseInsensitive(),
            strict: $$UMFP.strictMode(),
            squash: $$UMFP.defaultSquashPolicy()
        };
        return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
    };
    UrlMatcher.prototype.toString = function() {
        return this.source;
    };
    UrlMatcher.prototype.exec = function(path, searchParams) {
        var m = this.regexp.exec(path);
        if (!m) return null;
        searchParams = searchParams || {};
        var paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {}, i, j, cfg, paramName;
        if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
        function decodePathArray(string) {
            function reverseString(str) {
                return str.split("").reverse().join("");
            }
            function unquoteDashes(str) {
                return str.replace(/\\-/g, "-");
            }
            var split = reverseString(string).split(/-(?!\\)/);
            var allReversed = map(split, reverseString);
            return map(allReversed, unquoteDashes).reverse();
        }
        var param, paramVal;
        for (i = 0; i < nPath; i++) {
            paramName = paramNames[i];
            param = this.params[paramName];
            paramVal = m[i + 1];
            for (j = 0; j < param.replace.length; j++) {
                if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
            }
            if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
            if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
            values[paramName] = param.value(paramVal);
        }
        for (;i < nTotal; i++) {
            paramName = paramNames[i];
            values[paramName] = this.params[paramName].value(searchParams[paramName]);
            param = this.params[paramName];
            paramVal = searchParams[paramName];
            for (j = 0; j < param.replace.length; j++) {
                if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
            }
            if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
            values[paramName] = param.value(paramVal);
        }
        return values;
    };
    UrlMatcher.prototype.parameters = function(param) {
        if (!isDefined(param)) return this.$$paramNames;
        return this.params[param] || null;
    };
    UrlMatcher.prototype.validates = function(params) {
        return this.params.$$validates(params);
    };
    UrlMatcher.prototype.format = function(values) {
        values = values || {};
        var segments = this.segments, params = this.parameters(), paramset = this.params;
        if (!this.validates(values)) return null;
        var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
        function encodeDashes(str) {
            return encodeURIComponent(str).replace(/-/g, function(c) {
                return "%5C%" + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        for (i = 0; i < nTotal; i++) {
            var isPathParam = i < nPath;
            var name = params[i], param = paramset[name], value = param.value(values[name]);
            var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
            var squash = isDefaultValue ? param.squash : false;
            var encoded = param.type.encode(value);
            if (isPathParam) {
                var nextSegment = segments[i + 1];
                var isFinalPathParam = i + 1 === nPath;
                if (squash === false) {
                    if (encoded != null) {
                        if (isArray(encoded)) {
                            result += map(encoded, encodeDashes).join("-");
                        } else {
                            result += encodeURIComponent(encoded);
                        }
                    }
                    result += nextSegment;
                } else if (squash === true) {
                    var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    result += nextSegment.match(capture)[1];
                } else if (isString(squash)) {
                    result += squash + nextSegment;
                }
                if (isFinalPathParam && param.squash === true && result.slice(-1) === "/") result = result.slice(0, -1);
            } else {
                if (encoded == null || isDefaultValue && squash !== false) continue;
                if (!isArray(encoded)) encoded = [ encoded ];
                if (encoded.length === 0) continue;
                encoded = map(encoded, encodeURIComponent).join("&" + name + "=");
                result += (search ? "&" : "?") + (name + "=" + encoded);
                search = true;
            }
        }
        return result;
    };
    function Type(config) {
        extend(this, config);
    }
    Type.prototype.is = function(val, key) {
        return true;
    };
    Type.prototype.encode = function(val, key) {
        return val;
    };
    Type.prototype.decode = function(val, key) {
        return val;
    };
    Type.prototype.equals = function(a, b) {
        return a == b;
    };
    Type.prototype.$subPattern = function() {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };
    Type.prototype.pattern = /.*/;
    Type.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    };
    Type.prototype.$normalize = function(val) {
        return this.is(val) ? val : this.decode(val);
    };
    Type.prototype.$asArray = function(mode, isSearch) {
        if (!mode) return this;
        if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
        function ArrayType(type, mode) {
            function bindTo(type, callbackName) {
                return function() {
                    return type[callbackName].apply(type, arguments);
                };
            }
            function arrayWrap(val) {
                return isArray(val) ? val : isDefined(val) ? [ val ] : [];
            }
            function arrayUnwrap(val) {
                switch (val.length) {
                  case 0:
                    return undefined;

                  case 1:
                    return mode === "auto" ? val[0] : val;

                  default:
                    return val;
                }
            }
            function falsey(val) {
                return !val;
            }
            function arrayHandler(callback, allTruthyMode) {
                return function handleArray(val) {
                    if (isArray(val) && val.length === 0) return val;
                    val = arrayWrap(val);
                    var result = map(val, callback);
                    if (allTruthyMode === true) return filter(result, falsey).length === 0;
                    return arrayUnwrap(result);
                };
            }
            function arrayEqualsHandler(callback) {
                return function handleArray(val1, val2) {
                    var left = arrayWrap(val1), right = arrayWrap(val2);
                    if (left.length !== right.length) return false;
                    for (var i = 0; i < left.length; i++) {
                        if (!callback(left[i], right[i])) return false;
                    }
                    return true;
                };
            }
            this.encode = arrayHandler(bindTo(type, "encode"));
            this.decode = arrayHandler(bindTo(type, "decode"));
            this.is = arrayHandler(bindTo(type, "is"), true);
            this.equals = arrayEqualsHandler(bindTo(type, "equals"));
            this.pattern = type.pattern;
            this.$normalize = arrayHandler(bindTo(type, "$normalize"));
            this.name = type.name;
            this.$arrayMode = mode;
        }
        return new ArrayType(this, mode);
    };
    function $UrlMatcherFactory() {
        $$UMFP = this;
        var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;
        function valToString(val) {
            return val != null ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val;
        }
        function valFromString(val) {
            return val != null ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val;
        }
        var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
            string: {
                encode: valToString,
                decode: valFromString,
                is: function(val) {
                    return val == null || !isDefined(val) || typeof val === "string";
                },
                pattern: /[^\/]*/
            },
            int: {
                encode: valToString,
                decode: function(val) {
                    return parseInt(val, 10);
                },
                is: function(val) {
                    return isDefined(val) && this.decode(val.toString()) === val;
                },
                pattern: /\d+/
            },
            bool: {
                encode: function(val) {
                    return val ? 1 : 0;
                },
                decode: function(val) {
                    return parseInt(val, 10) !== 0;
                },
                is: function(val) {
                    return val === true || val === false;
                },
                pattern: /0|1/
            },
            date: {
                encode: function(val) {
                    if (!this.is(val)) return undefined;
                    return [ val.getFullYear(), ("0" + (val.getMonth() + 1)).slice(-2), ("0" + val.getDate()).slice(-2) ].join("-");
                },
                decode: function(val) {
                    if (this.is(val)) return val;
                    var match = this.capture.exec(val);
                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                },
                is: function(val) {
                    return val instanceof Date && !isNaN(val.valueOf());
                },
                equals: function(a, b) {
                    return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                },
                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
            },
            json: {
                encode: angular.toJson,
                decode: angular.fromJson,
                is: angular.isObject,
                equals: angular.equals,
                pattern: /[^\/]*/
            },
            any: {
                encode: angular.identity,
                decode: angular.identity,
                equals: angular.equals,
                pattern: /.*/
            }
        };
        function getDefaultConfig() {
            return {
                strict: isStrictMode,
                caseInsensitive: isCaseInsensitive
            };
        }
        function isInjectable(value) {
            return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
        }
        $UrlMatcherFactory.$$getDefaultValue = function(config) {
            if (!isInjectable(config.value)) return config.value;
            if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
            return injector.invoke(config.value);
        };
        this.caseInsensitive = function(value) {
            if (isDefined(value)) isCaseInsensitive = value;
            return isCaseInsensitive;
        };
        this.strictMode = function(value) {
            if (isDefined(value)) isStrictMode = value;
            return isStrictMode;
        };
        this.defaultSquashPolicy = function(value) {
            if (!isDefined(value)) return defaultSquashPolicy;
            if (value !== true && value !== false && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
            defaultSquashPolicy = value;
            return value;
        };
        this.compile = function(pattern, config) {
            return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
        };
        this.isMatcher = function(o) {
            if (!isObject(o)) return false;
            var result = true;
            forEach(UrlMatcher.prototype, function(val, name) {
                if (isFunction(val)) {
                    result = result && (isDefined(o[name]) && isFunction(o[name]));
                }
            });
            return result;
        };
        this.type = function(name, definition, definitionFn) {
            if (!isDefined(definition)) return $types[name];
            if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
            $types[name] = new Type(extend({
                name: name
            }, definition));
            if (definitionFn) {
                typeQueue.push({
                    name: name,
                    def: definitionFn
                });
                if (!enqueue) flushTypeQueue();
            }
            return this;
        };
        function flushTypeQueue() {
            while (typeQueue.length) {
                var type = typeQueue.shift();
                if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                angular.extend($types[type.name], injector.invoke(type.def));
            }
        }
        forEach(defaultTypes, function(type, name) {
            $types[name] = new Type(extend({
                name: name
            }, type));
        });
        $types = inherit($types, {});
        this.$get = [ "$injector", function($injector) {
            injector = $injector;
            enqueue = false;
            flushTypeQueue();
            forEach(defaultTypes, function(type, name) {
                if (!$types[name]) $types[name] = new Type(type);
            });
            return this;
        } ];
        this.Param = function Param(id, type, config, location) {
            var self = this;
            config = unwrapShorthand(config);
            type = getType(config, type, location);
            var arrayMode = getArrayMode();
            type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
            if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined) config.value = "";
            var isOptional = config.value !== undefined;
            var squash = getSquashPolicy(config, isOptional);
            var replace = getReplace(config, arrayMode, isOptional, squash);
            function unwrapShorthand(config) {
                var keys = isObject(config) ? objectKeys(config) : [];
                var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 && indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
                if (isShorthand) config = {
                    value: config
                };
                config.$$fn = isInjectable(config.value) ? config.value : function() {
                    return config.value;
                };
                return config;
            }
            function getType(config, urlType, location) {
                if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
                if (urlType) return urlType;
                if (!config.type) return location === "config" ? $types.any : $types.string;
                if (angular.isString(config.type)) return $types[config.type];
                if (config.type instanceof Type) return config.type;
                return new Type(config.type);
            }
            function getArrayMode() {
                var arrayDefaults = {
                    array: location === "search" ? "auto" : false
                };
                var arrayParamNomenclature = id.match(/\[\]$/) ? {
                    array: true
                } : {};
                return extend(arrayDefaults, arrayParamNomenclature, config).array;
            }
            function getSquashPolicy(config, isOptional) {
                var squash = config.squash;
                if (!isOptional || squash === false) return false;
                if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
                if (squash === true || isString(squash)) return squash;
                throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
            }
            function getReplace(config, arrayMode, isOptional, squash) {
                var replace, configuredKeys, defaultPolicy = [ {
                    from: "",
                    to: isOptional || arrayMode ? undefined : ""
                }, {
                    from: null,
                    to: isOptional || arrayMode ? undefined : ""
                } ];
                replace = isArray(config.replace) ? config.replace : [];
                if (isString(squash)) replace.push({
                    from: squash,
                    to: undefined
                });
                configuredKeys = map(replace, function(item) {
                    return item.from;
                });
                return filter(defaultPolicy, function(item) {
                    return indexOf(configuredKeys, item.from) === -1;
                }).concat(replace);
            }
            function $$getDefaultValue() {
                if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
                var defaultValue = injector.invoke(config.$$fn);
                if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
                return defaultValue;
            }
            function $value(value) {
                function hasReplaceVal(val) {
                    return function(obj) {
                        return obj.from === val;
                    };
                }
                function $replace(value) {
                    var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) {
                        return obj.to;
                    });
                    return replacement.length ? replacement[0] : value;
                }
                value = $replace(value);
                return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
            }
            function toString() {
                return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
            }
            extend(this, {
                id: id,
                type: type,
                location: location,
                array: arrayMode,
                squash: squash,
                replace: replace,
                isOptional: isOptional,
                value: $value,
                dynamic: undefined,
                config: config,
                toString: toString
            });
        };
        function ParamSet(params) {
            extend(this, params || {});
        }
        ParamSet.prototype = {
            $$new: function() {
                return inherit(this, extend(new ParamSet(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype);
                while (parent) {
                    chain.push(parent);
                    parent = parent.$$parent;
                }
                chain.reverse();
                forEach(chain, function(paramset) {
                    forEach(objectKeys(paramset), function(key) {
                        if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
                    });
                });
                return keys;
            },
            $$values: function(paramValues) {
                var values = {}, self = this;
                forEach(self.$$keys(), function(key) {
                    values[key] = self[key].value(paramValues && paramValues[key]);
                });
                return values;
            },
            $$equals: function(paramValues1, paramValues2) {
                var equal = true, self = this;
                forEach(self.$$keys(), function(key) {
                    var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
                    if (!self[key].type.equals(left, right)) equal = false;
                });
                return equal;
            },
            $$validates: function $$validate(paramValues) {
                var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
                for (i = 0; i < keys.length; i++) {
                    param = this[keys[i]];
                    rawVal = paramValues[keys[i]];
                    if ((rawVal === undefined || rawVal === null) && param.isOptional) break;
                    normalized = param.type.$normalize(rawVal);
                    if (!param.type.is(normalized)) return false;
                    encoded = param.type.encode(normalized);
                    if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return false;
                }
                return true;
            },
            $$parent: undefined
        };
        this.ParamSet = ParamSet;
    }
    angular.module("ui.router.util").provider("$urlMatcherFactory", $UrlMatcherFactory);
    angular.module("ui.router.util").run([ "$urlMatcherFactory", function($urlMatcherFactory) {} ]);
    $UrlRouterProvider.$inject = [ "$locationProvider", "$urlMatcherFactoryProvider" ];
    function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
        var rules = [], otherwise = null, interceptDeferred = false, listener;
        function regExpPrefix(re) {
            var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
            return prefix != null ? prefix[1].replace(/\\(.)/g, "$1") : "";
        }
        function interpolate(pattern, match) {
            return pattern.replace(/\$(\$|\d{1,2})/, function(m, what) {
                return match[what === "$" ? 0 : Number(what)];
            });
        }
        this.rule = function(rule) {
            if (!isFunction(rule)) throw new Error("'rule' must be a function");
            rules.push(rule);
            return this;
        };
        this.otherwise = function(rule) {
            if (isString(rule)) {
                var redirect = rule;
                rule = function() {
                    return redirect;
                };
            } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
            otherwise = rule;
            return this;
        };
        function handleIfMatch($injector, handler, match) {
            if (!match) return false;
            var result = $injector.invoke(handler, handler, {
                $match: match
            });
            return isDefined(result) ? result : true;
        }
        this.when = function(what, handler) {
            var redirect, handlerIsString = isString(handler);
            if (isString(what)) what = $urlMatcherFactory.compile(what);
            if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");
            var strategies = {
                matcher: function(what, handler) {
                    if (handlerIsString) {
                        redirect = $urlMatcherFactory.compile(handler);
                        handler = [ "$match", function($match) {
                            return redirect.format($match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                    }, {
                        prefix: isString(what.prefix) ? what.prefix : ""
                    });
                },
                regex: function(what, handler) {
                    if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");
                    if (handlerIsString) {
                        redirect = handler;
                        handler = [ "$match", function($match) {
                            return interpolate(redirect, $match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path()));
                    }, {
                        prefix: regExpPrefix(what)
                    });
                }
            };
            var check = {
                matcher: $urlMatcherFactory.isMatcher(what),
                regex: what instanceof RegExp
            };
            for (var n in check) {
                if (check[n]) return this.rule(strategies[n](what, handler));
            }
            throw new Error("invalid 'what' in when()");
        };
        this.deferIntercept = function(defer) {
            if (defer === undefined) defer = true;
            interceptDeferred = defer;
        };
        this.$get = $get;
        $get.$inject = [ "$location", "$rootScope", "$injector", "$browser", "$sniffer" ];
        function $get($location, $rootScope, $injector, $browser, $sniffer) {
            var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;
            function appendBasePath(url, isHtml5, absolute) {
                if (baseHref === "/") return url;
                if (isHtml5) return baseHref.slice(0, -1) + url;
                if (absolute) return baseHref.slice(1) + url;
                return url;
            }
            function update(evt) {
                if (evt && evt.defaultPrevented) return;
                var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
                lastPushedUrl = undefined;
                function check(rule) {
                    var handled = rule($injector, $location);
                    if (!handled) return false;
                    if (isString(handled)) $location.replace().url(handled);
                    return true;
                }
                var n = rules.length, i;
                for (i = 0; i < n; i++) {
                    if (check(rules[i])) return;
                }
                if (otherwise) check(otherwise);
            }
            function listen() {
                listener = listener || $rootScope.$on("$locationChangeSuccess", update);
                return listener;
            }
            if (!interceptDeferred) listen();
            return {
                sync: function() {
                    update();
                },
                listen: function() {
                    return listen();
                },
                update: function(read) {
                    if (read) {
                        location = $location.url();
                        return;
                    }
                    if ($location.url() === location) return;
                    $location.url(location);
                    $location.replace();
                },
                push: function(urlMatcher, params, options) {
                    var url = urlMatcher.format(params || {});
                    if (url !== null && params && params["#"]) {
                        url += "#" + params["#"];
                    }
                    $location.url(url);
                    lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                    if (options && options.replace) $location.replace();
                },
                href: function(urlMatcher, params, options) {
                    if (!urlMatcher.validates(params)) return null;
                    var isHtml5 = $locationProvider.html5Mode();
                    if (angular.isObject(isHtml5)) {
                        isHtml5 = isHtml5.enabled;
                    }
                    isHtml5 = isHtml5 && $sniffer.history;
                    var url = urlMatcher.format(params);
                    options = options || {};
                    if (!isHtml5 && url !== null) {
                        url = "#" + $locationProvider.hashPrefix() + url;
                    }
                    if (url !== null && params && params["#"]) {
                        url += "#" + params["#"];
                    }
                    url = appendBasePath(url, isHtml5, options.absolute);
                    if (!options.absolute || !url) {
                        return url;
                    }
                    var slash = !isHtml5 && url ? "/" : "", port = $location.port();
                    port = port === 80 || port === 443 ? "" : ":" + port;
                    return [ $location.protocol(), "://", $location.host(), port, slash, url ].join("");
                }
            };
        }
    }
    angular.module("ui.router.router").provider("$urlRouter", $UrlRouterProvider);
    $StateProvider.$inject = [ "$urlRouterProvider", "$urlMatcherFactoryProvider" ];
    function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
        var root, states = {}, $state, queue = {}, abstractKey = "abstract";
        var stateBuilder = {
            parent: function(state) {
                if (isDefined(state.parent) && state.parent) return findState(state.parent);
                var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                return compositeName ? findState(compositeName[1]) : root;
            },
            data: function(state) {
                if (state.parent && state.parent.data) {
                    state.data = state.self.data = inherit(state.parent.data, state.data);
                }
                return state.data;
            },
            url: function(state) {
                var url = state.url, config = {
                    params: state.params || {}
                };
                if (isString(url)) {
                    if (url.charAt(0) == "^") return $urlMatcherFactory.compile(url.substring(1), config);
                    return (state.parent.navigable || root).url.concat(url, config);
                }
                if (!url || $urlMatcherFactory.isMatcher(url)) return url;
                throw new Error("Invalid url '" + url + "' in state '" + state + "'");
            },
            navigable: function(state) {
                return state.url ? state : state.parent ? state.parent.navigable : null;
            },
            ownParams: function(state) {
                var params = state.url && state.url.params || new $$UMFP.ParamSet();
                forEach(state.params || {}, function(config, id) {
                    if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
                });
                return params;
            },
            params: function(state) {
                var ownParams = pick(state.ownParams, state.ownParams.$$keys());
                return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
            },
            views: function(state) {
                var views = {};
                forEach(isDefined(state.views) ? state.views : {
                    "": state
                }, function(view, name) {
                    if (name.indexOf("@") < 0) name += "@" + state.parent.name;
                    views[name] = view;
                });
                return views;
            },
            path: function(state) {
                return state.parent ? state.parent.path.concat(state) : [];
            },
            includes: function(state) {
                var includes = state.parent ? extend({}, state.parent.includes) : {};
                includes[state.name] = true;
                return includes;
            },
            $delegates: {}
        };
        function isRelative(stateName) {
            return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
        }
        function findState(stateOrName, base) {
            if (!stateOrName) return undefined;
            var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name, path = isRelative(name);
            if (path) {
                if (!base) throw new Error("No reference point given for path '" + name + "'");
                base = findState(base);
                var rel = name.split("."), i = 0, pathLength = rel.length, current = base;
                for (;i < pathLength; i++) {
                    if (rel[i] === "" && i === 0) {
                        current = base;
                        continue;
                    }
                    if (rel[i] === "^") {
                        if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
                        current = current.parent;
                        continue;
                    }
                    break;
                }
                rel = rel.slice(i).join(".");
                name = current.name + (current.name && rel ? "." : "") + rel;
            }
            var state = states[name];
            if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
                return state;
            }
            return undefined;
        }
        function queueState(parentName, state) {
            if (!queue[parentName]) {
                queue[parentName] = [];
            }
            queue[parentName].push(state);
        }
        function flushQueuedChildren(parentName) {
            var queued = queue[parentName] || [];
            while (queued.length) {
                registerState(queued.shift());
            }
        }
        function registerState(state) {
            state = inherit(state, {
                self: state,
                resolve: state.resolve || {},
                toString: function() {
                    return this.name;
                }
            });
            var name = state.name;
            if (!isString(name) || name.indexOf("@") >= 0) throw new Error("State must have a valid name");
            if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");
            var parentName = name.indexOf(".") !== -1 ? name.substring(0, name.lastIndexOf(".")) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : "";
            if (parentName && !states[parentName]) {
                return queueState(parentName, state.self);
            }
            for (var key in stateBuilder) {
                if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
            }
            states[name] = state;
            if (!state[abstractKey] && state.url) {
                $urlRouterProvider.when(state.url, [ "$match", "$stateParams", function($match, $stateParams) {
                    if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
                        $state.transitionTo(state, $match, {
                            inherit: true,
                            location: false
                        });
                    }
                } ]);
            }
            flushQueuedChildren(name);
            return state;
        }
        function isGlob(text) {
            return text.indexOf("*") > -1;
        }
        function doesStateMatchGlob(glob) {
            var globSegments = glob.split("."), segments = $state.$current.name.split(".");
            for (var i = 0, l = globSegments.length; i < l; i++) {
                if (globSegments[i] === "*") {
                    segments[i] = "*";
                }
            }
            if (globSegments[0] === "**") {
                segments = segments.slice(indexOf(segments, globSegments[1]));
                segments.unshift("**");
            }
            if (globSegments[globSegments.length - 1] === "**") {
                segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                segments.push("**");
            }
            if (globSegments.length != segments.length) {
                return false;
            }
            return segments.join("") === globSegments.join("");
        }
        root = registerState({
            name: "",
            url: "^",
            views: null,
            abstract: true
        });
        root.navigable = null;
        this.decorator = decorator;
        function decorator(name, func) {
            if (isString(name) && !isDefined(func)) {
                return stateBuilder[name];
            }
            if (!isFunction(func) || !isString(name)) {
                return this;
            }
            if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
                stateBuilder.$delegates[name] = stateBuilder[name];
            }
            stateBuilder[name] = func;
            return this;
        }
        this.state = state;
        function state(name, definition) {
            if (isObject(name)) definition = name; else definition.name = name;
            registerState(definition);
            return this;
        }
        this.$get = $get;
        $get.$inject = [ "$rootScope", "$q", "$view", "$injector", "$resolve", "$stateParams", "$urlRouter", "$location", "$urlMatcherFactory" ];
        function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
            var TransitionSuperseded = $q.reject(new Error("transition superseded"));
            var TransitionPrevented = $q.reject(new Error("transition prevented"));
            var TransitionAborted = $q.reject(new Error("transition aborted"));
            var TransitionFailed = $q.reject(new Error("transition failed"));
            function handleRedirect(redirect, state, params, options) {
                var evt = $rootScope.$broadcast("$stateNotFound", redirect, state, params);
                if (evt.defaultPrevented) {
                    $urlRouter.update();
                    return TransitionAborted;
                }
                if (!evt.retry) {
                    return null;
                }
                if (options.$retry) {
                    $urlRouter.update();
                    return TransitionFailed;
                }
                var retryTransition = $state.transition = $q.when(evt.retry);
                retryTransition.then(function() {
                    if (retryTransition !== $state.transition) return TransitionSuperseded;
                    redirect.options.$retry = true;
                    return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                }, function() {
                    return TransitionAborted;
                });
                $urlRouter.update();
                return retryTransition;
            }
            root.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            };
            $state = {
                params: {},
                current: root.self,
                $current: root,
                transition: null
            };
            $state.reload = function reload(state) {
                return $state.transitionTo($state.current, $stateParams, {
                    reload: state || true,
                    inherit: false,
                    notify: true
                });
            };
            $state.go = function go(to, params, options) {
                return $state.transitionTo(to, params, extend({
                    inherit: true,
                    relative: $state.$current
                }, options));
            };
            $state.transitionTo = function transitionTo(to, toParams, options) {
                toParams = toParams || {};
                options = extend({
                    location: true,
                    inherit: false,
                    relative: null,
                    notify: true,
                    reload: false,
                    $retry: false
                }, options || {});
                var from = $state.$current, fromParams = $state.params, fromPath = from.path;
                var evt, toState = findState(to, options.relative);
                var hash = toParams["#"];
                if (!isDefined(toState)) {
                    var redirect = {
                        to: to,
                        toParams: toParams,
                        options: options
                    };
                    var redirectResult = handleRedirect(redirect, from.self, fromParams, options);
                    if (redirectResult) {
                        return redirectResult;
                    }
                    to = redirect.to;
                    toParams = redirect.toParams;
                    options = redirect.options;
                    toState = findState(to, options.relative);
                    if (!isDefined(toState)) {
                        if (!options.relative) throw new Error("No such state '" + to + "'");
                        throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
                    }
                }
                if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
                if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
                if (!toState.params.$$validates(toParams)) return TransitionFailed;
                toParams = toState.params.$$values(toParams);
                to = toState;
                var toPath = to.path;
                var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
                if (!options.reload) {
                    while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
                        locals = toLocals[keep] = state.locals;
                        keep++;
                        state = toPath[keep];
                    }
                } else if (isString(options.reload) || isObject(options.reload)) {
                    if (isObject(options.reload) && !options.reload.name) {
                        throw new Error("Invalid reload state object");
                    }
                    var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
                    if (options.reload && !reloadState) {
                        throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
                    }
                    while (state && state === fromPath[keep] && state !== reloadState) {
                        locals = toLocals[keep] = state.locals;
                        keep++;
                        state = toPath[keep];
                    }
                }
                if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
                    if (hash) toParams["#"] = hash;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
                    if (options.location && to.navigable && to.navigable.url) {
                        $urlRouter.push(to.navigable.url, toParams, {
                            $$avoidResync: true,
                            replace: options.location === "replace"
                        });
                        $urlRouter.update(true);
                    }
                    $state.transition = null;
                    return $q.when($state.current);
                }
                toParams = filterByKeys(to.params.$$keys(), toParams || {});
                if (hash) toParams["#"] = hash;
                if (options.notify) {
                    if ($rootScope.$broadcast("$stateChangeStart", to.self, toParams, from.self, fromParams, options).defaultPrevented) {
                        $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                        if ($state.transition == null) $urlRouter.update();
                        return TransitionPrevented;
                    }
                }
                var resolved = $q.when(locals);
                for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
                    locals = toLocals[l] = inherit(locals);
                    resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                }
                var transition = $state.transition = resolved.then(function() {
                    var l, entering, exiting;
                    if ($state.transition !== transition) return TransitionSuperseded;
                    for (l = fromPath.length - 1; l >= keep; l--) {
                        exiting = fromPath[l];
                        if (exiting.self.onExit) {
                            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                        }
                        exiting.locals = null;
                    }
                    for (l = keep; l < toPath.length; l++) {
                        entering = toPath[l];
                        entering.locals = toLocals[l];
                        if (entering.self.onEnter) {
                            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                        }
                    }
                    if ($state.transition !== transition) return TransitionSuperseded;
                    $state.$current = to;
                    $state.current = to.self;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    $state.transition = null;
                    if (options.location && to.navigable) {
                        $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                            $$avoidResync: true,
                            replace: options.location === "replace"
                        });
                    }
                    if (options.notify) {
                        $rootScope.$broadcast("$stateChangeSuccess", to.self, toParams, from.self, fromParams);
                    }
                    $urlRouter.update(true);
                    return $state.current;
                }, function(error) {
                    if ($state.transition !== transition) return TransitionSuperseded;
                    $state.transition = null;
                    evt = $rootScope.$broadcast("$stateChangeError", to.self, toParams, from.self, fromParams, error);
                    if (!evt.defaultPrevented) {
                        $urlRouter.update();
                    }
                    return $q.reject(error);
                });
                return transition;
            };
            $state.is = function is(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) {
                    return undefined;
                }
                if ($state.$current !== state) {
                    return false;
                }
                return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
            };
            $state.includes = function includes(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                if (isString(stateOrName) && isGlob(stateOrName)) {
                    if (!doesStateMatchGlob(stateOrName)) {
                        return false;
                    }
                    stateOrName = $state.$current.name;
                }
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) {
                    return undefined;
                }
                if (!isDefined($state.$current.includes[state.name])) {
                    return false;
                }
                return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
            };
            $state.href = function href(stateOrName, params, options) {
                options = extend({
                    lossy: true,
                    inherit: true,
                    absolute: false,
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) return null;
                if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
                var nav = state && options.lossy ? state.navigable : state;
                if (!nav || nav.url === undefined || nav.url === null) {
                    return null;
                }
                return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat("#"), params || {}), {
                    absolute: options.absolute
                });
            };
            $state.get = function(stateOrName, context) {
                if (arguments.length === 0) return map(objectKeys(states), function(name) {
                    return states[name].self;
                });
                var state = findState(stateOrName, context || $state.$current);
                return state && state.self ? state.self : null;
            };
            function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
                var locals = {
                    $stateParams: $stateParams
                };
                dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                var promises = [ dst.resolve.then(function(globals) {
                    dst.globals = globals;
                }) ];
                if (inherited) promises.push(inherited);
                function resolveViews() {
                    var viewsPromises = [];
                    forEach(state.views, function(view, name) {
                        var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
                        injectables.$template = [ function() {
                            return $view.load(name, {
                                view: view,
                                locals: dst.globals,
                                params: $stateParams,
                                notify: options.notify
                            }) || "";
                        } ];
                        viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function(result) {
                            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                var injectLocals = angular.extend({}, injectables, dst.globals);
                                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                            } else {
                                result.$$controller = view.controller;
                            }
                            result.$$state = state;
                            result.$$controllerAs = view.controllerAs;
                            dst[name] = result;
                        }));
                    });
                    return $q.all(viewsPromises).then(function() {
                        return dst.globals;
                    });
                }
                return $q.all(promises).then(resolveViews).then(function(values) {
                    return dst;
                });
            }
            return $state;
        }
        function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
            function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
                function notSearchParam(key) {
                    return fromAndToState.params[key].location != "search";
                }
                var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
                var nonQueryParams = pick.apply({}, [ fromAndToState.params ].concat(nonQueryParamKeys));
                var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
                return nonQueryParamSet.$$equals(fromParams, toParams);
            }
            if (!options.reload && to === from && (locals === from.locals || to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams))) {
                return true;
            }
        }
    }
    angular.module("ui.router.state").factory("$stateParams", function() {
        return {};
    }).provider("$state", $StateProvider);
    $ViewProvider.$inject = [];
    function $ViewProvider() {
        this.$get = $get;
        $get.$inject = [ "$rootScope", "$templateFactory" ];
        function $get($rootScope, $templateFactory) {
            return {
                load: function load(name, options) {
                    var result, defaults = {
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: true,
                        async: true,
                        params: {}
                    };
                    options = extend(defaults, options);
                    if (options.view) {
                        result = $templateFactory.fromConfig(options.view, options.params, options.locals);
                    }
                    return result;
                }
            };
        }
    }
    angular.module("ui.router.state").provider("$view", $ViewProvider);
    function $ViewScrollProvider() {
        var useAnchorScroll = false;
        this.useAnchorScroll = function() {
            useAnchorScroll = true;
        };
        this.$get = [ "$anchorScroll", "$timeout", function($anchorScroll, $timeout) {
            if (useAnchorScroll) {
                return $anchorScroll;
            }
            return function($element) {
                return $timeout(function() {
                    $element[0].scrollIntoView();
                }, 0, false);
            };
        } ];
    }
    angular.module("ui.router.state").provider("$uiViewScroll", $ViewScrollProvider);
    var ngMajorVer = angular.version.major;
    var ngMinorVer = angular.version.minor;
    $ViewDirective.$inject = [ "$state", "$injector", "$uiViewScroll", "$interpolate" ];
    function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
        function getService() {
            return $injector.has ? function(service) {
                return $injector.has(service) ? $injector.get(service) : null;
            } : function(service) {
                try {
                    return $injector.get(service);
                } catch (e) {
                    return null;
                }
            };
        }
        var service = getService(), $animator = service("$animator"), $animate = service("$animate");
        function getRenderer(attrs, scope) {
            var statics = {
                enter: function(element, target, cb) {
                    target.after(element);
                    cb();
                },
                leave: function(element, cb) {
                    element.remove();
                    cb();
                }
            };
            if (!!attrs.noanimation) return statics;
            function animEnabled(element) {
                if (ngMajorVer === 1 && ngMinorVer >= 4) return !!$animate.enabled(element);
                if (ngMajorVer === 1 && ngMinorVer >= 2) return !!$animate.enabled();
                return !!$animator;
            }
            if ($animate) {
                return {
                    enter: function(element, target, cb) {
                        if (!animEnabled(element)) {
                            statics.enter(element, target, cb);
                        } else if (angular.version.minor > 2) {
                            $animate.enter(element, null, target).then(cb);
                        } else {
                            $animate.enter(element, null, target, cb);
                        }
                    },
                    leave: function(element, cb) {
                        if (!animEnabled(element)) {
                            statics.leave(element, cb);
                        } else if (angular.version.minor > 2) {
                            $animate.leave(element).then(cb);
                        } else {
                            $animate.leave(element, cb);
                        }
                    }
                };
            }
            if ($animator) {
                var animate = $animator && $animator(scope, attrs);
                return {
                    enter: function(element, target, cb) {
                        animate.enter(element, null, target);
                        cb();
                    },
                    leave: function(element, cb) {
                        animate.leave(element);
                        cb();
                    }
                };
            }
            return statics;
        }
        var directive = {
            restrict: "ECA",
            terminal: true,
            priority: 400,
            transclude: "element",
            compile: function(tElement, tAttrs, $transclude) {
                return function(scope, $element, attrs) {
                    var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || "", autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
                    scope.$on("$stateChangeSuccess", function() {
                        updateView(false);
                    });
                    updateView(true);
                    function cleanupLastView() {
                        var _previousEl = previousEl;
                        var _currentScope = currentScope;
                        if (_currentScope) {
                            _currentScope._willBeDestroyed = true;
                        }
                        function cleanOld() {
                            if (_previousEl) {
                                _previousEl.remove();
                            }
                            if (_currentScope) {
                                _currentScope.$destroy();
                            }
                        }
                        if (currentEl) {
                            renderer.leave(currentEl, function() {
                                cleanOld();
                                previousEl = null;
                            });
                            previousEl = currentEl;
                        } else {
                            cleanOld();
                            previousEl = null;
                        }
                        currentEl = null;
                        currentScope = null;
                    }
                    function updateView(firstTime) {
                        var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
                        if (!firstTime && previousLocals === latestLocals || scope._willBeDestroyed) return;
                        newScope = scope.$new();
                        latestLocals = $state.$current.locals[name];
                        newScope.$emit("$viewContentLoading", name);
                        var clone = $transclude(newScope, function(clone) {
                            renderer.enter(clone, $element, function onUiViewEnter() {
                                if (currentScope) {
                                    currentScope.$emit("$viewContentAnimationEnded");
                                }
                                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                                    $uiViewScroll(clone);
                                }
                            });
                            cleanupLastView();
                        });
                        currentEl = clone;
                        currentScope = newScope;
                        currentScope.$emit("$viewContentLoaded", name);
                        currentScope.$eval(onloadExp);
                    }
                };
            }
        };
        return directive;
    }
    $ViewDirectiveFill.$inject = [ "$compile", "$controller", "$state", "$interpolate" ];
    function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
        return {
            restrict: "ECA",
            priority: -400,
            compile: function(tElement) {
                var initial = tElement.html();
                return function(scope, $element, attrs) {
                    var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
                    if (!locals) {
                        return;
                    }
                    $element.data("$uiView", {
                        name: name,
                        state: locals.$$state
                    });
                    $element.html(locals.$template ? locals.$template : initial);
                    var link = $compile($element.contents());
                    if (locals.$$controller) {
                        locals.$scope = scope;
                        locals.$element = $element;
                        var controller = $controller(locals.$$controller, locals);
                        if (locals.$$controllerAs) {
                            scope[locals.$$controllerAs] = controller;
                        }
                        $element.data("$ngControllerController", controller);
                        $element.children().data("$ngControllerController", controller);
                    }
                    link(scope);
                };
            }
        };
    }
    function getUiViewName(scope, attrs, element, $interpolate) {
        var name = $interpolate(attrs.uiView || attrs.name || "")(scope);
        var inherited = element.inheritedData("$uiView");
        return name.indexOf("@") >= 0 ? name : name + "@" + (inherited ? inherited.state.name : "");
    }
    angular.module("ui.router.state").directive("uiView", $ViewDirective);
    angular.module("ui.router.state").directive("uiView", $ViewDirectiveFill);
    function parseStateRef(ref, current) {
        var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
        if (preparsed) ref = current + "(" + preparsed[1] + ")";
        parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
        if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
        return {
            state: parsed[1],
            paramExpr: parsed[3] || null
        };
    }
    function stateContext(el) {
        var stateData = el.parent().inheritedData("$uiView");
        if (stateData && stateData.state && stateData.state.name) {
            return stateData.state;
        }
    }
    function getTypeInfo(el) {
        var isSvg = Object.prototype.toString.call(el.prop("href")) === "[object SVGAnimatedString]";
        var isForm = el[0].nodeName === "FORM";
        return {
            attr: isForm ? "action" : isSvg ? "xlink:href" : "href",
            isAnchor: el.prop("tagName").toUpperCase() === "A",
            clickable: !isForm
        };
    }
    function clickHook(el, $state, $timeout, type, current) {
        return function(e) {
            var button = e.which || e.button, target = current();
            if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr("target"))) {
                var transition = $timeout(function() {
                    $state.go(target.state, target.params, target.options);
                });
                e.preventDefault();
                var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
                e.preventDefault = function() {
                    if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
                };
            }
        };
    }
    function defaultOpts(el, $state) {
        return {
            relative: stateContext(el) || $state.$current,
            inherit: true
        };
    }
    $StateRefDirective.$inject = [ "$state", "$timeout" ];
    function $StateRefDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var ref = parseStateRef(attrs.uiSref, $state.current.name);
                var def = {
                    state: ref.state,
                    href: null,
                    params: null
                };
                var type = getTypeInfo(element);
                var active = uiSrefActive[1] || uiSrefActive[0];
                def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
                var update = function(val) {
                    if (val) def.params = angular.copy(val);
                    def.href = $state.href(ref.state, def.params, def.options);
                    if (active) active.$$addStateInfo(ref.state, def.params);
                    if (def.href !== null) attrs.$set(type.attr, def.href);
                };
                if (ref.paramExpr) {
                    scope.$watch(ref.paramExpr, function(val) {
                        if (val !== def.params) update(val);
                    }, true);
                    def.params = angular.copy(scope.$eval(ref.paramExpr));
                }
                update();
                if (!type.clickable) return;
                element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    $StateRefDynamicDirective.$inject = [ "$state", "$timeout" ];
    function $StateRefDynamicDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var type = getTypeInfo(element);
                var active = uiSrefActive[1] || uiSrefActive[0];
                var group = [ attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null ];
                var watch = "[" + group.map(function(val) {
                    return val || "null";
                }).join(", ") + "]";
                var def = {
                    state: null,
                    params: null,
                    options: null,
                    href: null
                };
                function runStateRefLink(group) {
                    def.state = group[0];
                    def.params = group[1];
                    def.options = group[2];
                    def.href = $state.href(def.state, def.params, def.options);
                    if (active) active.$$addStateInfo(def.state, def.params);
                    if (def.href) attrs.$set(type.attr, def.href);
                }
                scope.$watch(watch, runStateRefLink, true);
                runStateRefLink(scope.$eval(watch));
                if (!type.clickable) return;
                element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    $StateRefActiveDirective.$inject = [ "$state", "$stateParams", "$interpolate" ];
    function $StateRefActiveDirective($state, $stateParams, $interpolate) {
        return {
            restrict: "A",
            controller: [ "$scope", "$element", "$attrs", "$timeout", function($scope, $element, $attrs, $timeout) {
                var states = [], activeClasses = {}, activeEqClass, uiSrefActive;
                activeEqClass = $interpolate($attrs.uiSrefActiveEq || "", false)($scope);
                try {
                    uiSrefActive = $scope.$eval($attrs.uiSrefActive);
                } catch (e) {}
                uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || "", false)($scope);
                if (isObject(uiSrefActive)) {
                    forEach(uiSrefActive, function(stateOrName, activeClass) {
                        if (isString(stateOrName)) {
                            var ref = parseStateRef(stateOrName, $state.current.name);
                            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
                        }
                    });
                }
                this.$$addStateInfo = function(newState, newParams) {
                    if (isObject(uiSrefActive) && states.length > 0) {
                        return;
                    }
                    addState(newState, newParams, uiSrefActive);
                    update();
                };
                $scope.$on("$stateChangeSuccess", update);
                function addState(stateName, stateParams, activeClass) {
                    var state = $state.get(stateName, stateContext($element));
                    var stateHash = createStateHash(stateName, stateParams);
                    states.push({
                        state: state || {
                            name: stateName
                        },
                        params: stateParams,
                        hash: stateHash
                    });
                    activeClasses[stateHash] = activeClass;
                }
                function createStateHash(state, params) {
                    if (!isString(state)) {
                        throw new Error("state should be a string");
                    }
                    if (isObject(params)) {
                        return state + toJson(params);
                    }
                    params = $scope.$eval(params);
                    if (isObject(params)) {
                        return state + toJson(params);
                    }
                    return state;
                }
                function update() {
                    for (var i = 0; i < states.length; i++) {
                        if (anyMatch(states[i].state, states[i].params)) {
                            addClass($element, activeClasses[states[i].hash]);
                        } else {
                            removeClass($element, activeClasses[states[i].hash]);
                        }
                        if (exactMatch(states[i].state, states[i].params)) {
                            addClass($element, activeEqClass);
                        } else {
                            removeClass($element, activeEqClass);
                        }
                    }
                }
                function addClass(el, className) {
                    $timeout(function() {
                        el.addClass(className);
                    });
                }
                function removeClass(el, className) {
                    el.removeClass(className);
                }
                function anyMatch(state, params) {
                    return $state.includes(state.name, params);
                }
                function exactMatch(state, params) {
                    return $state.is(state.name, params);
                }
                update();
            } ]
        };
    }
    angular.module("ui.router.state").directive("uiSref", $StateRefDirective).directive("uiSrefActive", $StateRefActiveDirective).directive("uiSrefActiveEq", $StateRefActiveDirective).directive("uiState", $StateRefDynamicDirective);
    $IsStateFilter.$inject = [ "$state" ];
    function $IsStateFilter($state) {
        var isFilter = function(state, params) {
            return $state.is(state, params);
        };
        isFilter.$stateful = true;
        return isFilter;
    }
    $IncludedByStateFilter.$inject = [ "$state" ];
    function $IncludedByStateFilter($state) {
        var includesFilter = function(state, params, options) {
            return $state.includes(state, params, options);
        };
        includesFilter.$stateful = true;
        return includesFilter;
    }
    angular.module("ui.router.state").filter("isState", $IsStateFilter).filter("includedByState", $IncludedByStateFilter);
})(window, window.angular);

(function(window, angular) {
    "use strict";
    angular.mock = {};
    angular.mock.$BrowserProvider = function() {
        this.$get = function() {
            return new angular.mock.$Browser();
        };
    };
    angular.mock.$Browser = function() {
        var self = this;
        this.isMock = true;
        self.$$url = "http://server/";
        self.$$lastUrl = self.$$url;
        self.pollFns = [];
        self.$$completeOutstandingRequest = angular.noop;
        self.$$incOutstandingRequestCount = angular.noop;
        self.onUrlChange = function(listener) {
            self.pollFns.push(function() {
                if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {
                    self.$$lastUrl = self.$$url;
                    self.$$lastState = self.$$state;
                    listener(self.$$url, self.$$state);
                }
            });
            return listener;
        };
        self.$$applicationDestroyed = angular.noop;
        self.$$checkUrlChange = angular.noop;
        self.deferredFns = [];
        self.deferredNextId = 0;
        self.defer = function(fn, delay) {
            delay = delay || 0;
            self.deferredFns.push({
                time: self.defer.now + delay,
                fn: fn,
                id: self.deferredNextId
            });
            self.deferredFns.sort(function(a, b) {
                return a.time - b.time;
            });
            return self.deferredNextId++;
        };
        self.defer.now = 0;
        self.defer.cancel = function(deferId) {
            var fnIndex;
            angular.forEach(self.deferredFns, function(fn, index) {
                if (fn.id === deferId) fnIndex = index;
            });
            if (angular.isDefined(fnIndex)) {
                self.deferredFns.splice(fnIndex, 1);
                return true;
            }
            return false;
        };
        self.defer.flush = function(delay) {
            var nextTime;
            if (angular.isDefined(delay)) {
                nextTime = self.defer.now + delay;
            } else {
                if (self.deferredFns.length) {
                    nextTime = self.deferredFns[self.deferredFns.length - 1].time;
                } else {
                    throw new Error("No deferred tasks to be flushed");
                }
            }
            while (self.deferredFns.length && self.deferredFns[0].time <= nextTime) {
                self.defer.now = self.deferredFns[0].time;
                self.deferredFns.shift().fn();
            }
            self.defer.now = nextTime;
        };
        self.$$baseHref = "/";
        self.baseHref = function() {
            return this.$$baseHref;
        };
    };
    angular.mock.$Browser.prototype = {
        poll: function poll() {
            angular.forEach(this.pollFns, function(pollFn) {
                pollFn();
            });
        },
        url: function(url, replace, state) {
            if (angular.isUndefined(state)) {
                state = null;
            }
            if (url) {
                this.$$url = url;
                this.$$state = angular.copy(state);
                return this;
            }
            return this.$$url;
        },
        state: function() {
            return this.$$state;
        },
        notifyWhenNoOutstandingRequests: function(fn) {
            fn();
        }
    };
    angular.mock.$ExceptionHandlerProvider = function() {
        var handler;
        this.mode = function(mode) {
            switch (mode) {
              case "log":
              case "rethrow":
                var errors = [];
                handler = function(e) {
                    if (arguments.length == 1) {
                        errors.push(e);
                    } else {
                        errors.push([].slice.call(arguments, 0));
                    }
                    if (mode === "rethrow") {
                        throw e;
                    }
                };
                handler.errors = errors;
                break;

              default:
                throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
            }
        };
        this.$get = function() {
            return handler;
        };
        this.mode("rethrow");
    };
    angular.mock.$LogProvider = function() {
        var debug = true;
        function concat(array1, array2, index) {
            return array1.concat(Array.prototype.slice.call(array2, index));
        }
        this.debugEnabled = function(flag) {
            if (angular.isDefined(flag)) {
                debug = flag;
                return this;
            } else {
                return debug;
            }
        };
        this.$get = function() {
            var $log = {
                log: function() {
                    $log.log.logs.push(concat([], arguments, 0));
                },
                warn: function() {
                    $log.warn.logs.push(concat([], arguments, 0));
                },
                info: function() {
                    $log.info.logs.push(concat([], arguments, 0));
                },
                error: function() {
                    $log.error.logs.push(concat([], arguments, 0));
                },
                debug: function() {
                    if (debug) {
                        $log.debug.logs.push(concat([], arguments, 0));
                    }
                }
            };
            $log.reset = function() {
                $log.log.logs = [];
                $log.info.logs = [];
                $log.warn.logs = [];
                $log.error.logs = [];
                $log.debug.logs = [];
            };
            $log.assertEmpty = function() {
                var errors = [];
                angular.forEach([ "error", "warn", "info", "log", "debug" ], function(logLevel) {
                    angular.forEach($log[logLevel].logs, function(log) {
                        angular.forEach(log, function(logItem) {
                            errors.push("MOCK $log (" + logLevel + "): " + String(logItem) + "\n" + (logItem.stack || ""));
                        });
                    });
                });
                if (errors.length) {
                    errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or " + "an expected log message was not checked and removed:");
                    errors.push("");
                    throw new Error(errors.join("\n---------\n"));
                }
            };
            $log.reset();
            return $log;
        };
    };
    angular.mock.$IntervalProvider = function() {
        this.$get = [ "$browser", "$rootScope", "$q", "$$q", function($browser, $rootScope, $q, $$q) {
            var repeatFns = [], nextRepeatId = 0, now = 0;
            var $interval = function(fn, delay, count, invokeApply) {
                var hasParams = arguments.length > 4, args = hasParams ? Array.prototype.slice.call(arguments, 4) : [], iteration = 0, skipApply = angular.isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                count = angular.isDefined(count) ? count : 0;
                promise.then(null, null, !hasParams ? fn : function() {
                    fn.apply(null, args);
                });
                promise.$$intervalId = nextRepeatId;
                function tick() {
                    deferred.notify(iteration++);
                    if (count > 0 && iteration >= count) {
                        var fnIndex;
                        deferred.resolve(iteration);
                        angular.forEach(repeatFns, function(fn, index) {
                            if (fn.id === promise.$$intervalId) fnIndex = index;
                        });
                        if (angular.isDefined(fnIndex)) {
                            repeatFns.splice(fnIndex, 1);
                        }
                    }
                    if (skipApply) {
                        $browser.defer.flush();
                    } else {
                        $rootScope.$apply();
                    }
                }
                repeatFns.push({
                    nextTime: now + delay,
                    delay: delay,
                    fn: tick,
                    id: nextRepeatId,
                    deferred: deferred
                });
                repeatFns.sort(function(a, b) {
                    return a.nextTime - b.nextTime;
                });
                nextRepeatId++;
                return promise;
            };
            $interval.cancel = function(promise) {
                if (!promise) return false;
                var fnIndex;
                angular.forEach(repeatFns, function(fn, index) {
                    if (fn.id === promise.$$intervalId) fnIndex = index;
                });
                if (angular.isDefined(fnIndex)) {
                    repeatFns[fnIndex].deferred.reject("canceled");
                    repeatFns.splice(fnIndex, 1);
                    return true;
                }
                return false;
            };
            $interval.flush = function(millis) {
                now += millis;
                while (repeatFns.length && repeatFns[0].nextTime <= now) {
                    var task = repeatFns[0];
                    task.fn();
                    task.nextTime += task.delay;
                    repeatFns.sort(function(a, b) {
                        return a.nextTime - b.nextTime;
                    });
                }
                return millis;
            };
            return $interval;
        } ];
    };
    var R_ISO8061_STR = /^(-?\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;
    function jsonStringToDate(string) {
        var match;
        if (match = string.match(R_ISO8061_STR)) {
            var date = new Date(0), tzHour = 0, tzMin = 0;
            if (match[9]) {
                tzHour = toInt(match[9] + match[10]);
                tzMin = toInt(match[9] + match[11]);
            }
            date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
            date.setUTCHours(toInt(match[4] || 0) - tzHour, toInt(match[5] || 0) - tzMin, toInt(match[6] || 0), toInt(match[7] || 0));
            return date;
        }
        return string;
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    function padNumberInMock(num, digits, trim) {
        var neg = "";
        if (num < 0) {
            neg = "-";
            num = -num;
        }
        num = "" + num;
        while (num.length < digits) num = "0" + num;
        if (trim) {
            num = num.substr(num.length - digits);
        }
        return neg + num;
    }
    angular.mock.TzDate = function(offset, timestamp) {
        var self = new Date(0);
        if (angular.isString(timestamp)) {
            var tsStr = timestamp;
            self.origDate = jsonStringToDate(timestamp);
            timestamp = self.origDate.getTime();
            if (isNaN(timestamp)) {
                throw {
                    name: "Illegal Argument",
                    message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
                };
            }
        } else {
            self.origDate = new Date(timestamp);
        }
        var localOffset = new Date(timestamp).getTimezoneOffset();
        self.offsetDiff = localOffset * 60 * 1e3 - offset * 1e3 * 60 * 60;
        self.date = new Date(timestamp + self.offsetDiff);
        self.getTime = function() {
            return self.date.getTime() - self.offsetDiff;
        };
        self.toLocaleDateString = function() {
            return self.date.toLocaleDateString();
        };
        self.getFullYear = function() {
            return self.date.getFullYear();
        };
        self.getMonth = function() {
            return self.date.getMonth();
        };
        self.getDate = function() {
            return self.date.getDate();
        };
        self.getHours = function() {
            return self.date.getHours();
        };
        self.getMinutes = function() {
            return self.date.getMinutes();
        };
        self.getSeconds = function() {
            return self.date.getSeconds();
        };
        self.getMilliseconds = function() {
            return self.date.getMilliseconds();
        };
        self.getTimezoneOffset = function() {
            return offset * 60;
        };
        self.getUTCFullYear = function() {
            return self.origDate.getUTCFullYear();
        };
        self.getUTCMonth = function() {
            return self.origDate.getUTCMonth();
        };
        self.getUTCDate = function() {
            return self.origDate.getUTCDate();
        };
        self.getUTCHours = function() {
            return self.origDate.getUTCHours();
        };
        self.getUTCMinutes = function() {
            return self.origDate.getUTCMinutes();
        };
        self.getUTCSeconds = function() {
            return self.origDate.getUTCSeconds();
        };
        self.getUTCMilliseconds = function() {
            return self.origDate.getUTCMilliseconds();
        };
        self.getDay = function() {
            return self.date.getDay();
        };
        if (self.toISOString) {
            self.toISOString = function() {
                return padNumberInMock(self.origDate.getUTCFullYear(), 4) + "-" + padNumberInMock(self.origDate.getUTCMonth() + 1, 2) + "-" + padNumberInMock(self.origDate.getUTCDate(), 2) + "T" + padNumberInMock(self.origDate.getUTCHours(), 2) + ":" + padNumberInMock(self.origDate.getUTCMinutes(), 2) + ":" + padNumberInMock(self.origDate.getUTCSeconds(), 2) + "." + padNumberInMock(self.origDate.getUTCMilliseconds(), 3) + "Z";
            };
        }
        var unimplementedMethods = [ "getUTCDay", "getYear", "setDate", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setSeconds", "setTime", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setYear", "toDateString", "toGMTString", "toJSON", "toLocaleFormat", "toLocaleString", "toLocaleTimeString", "toSource", "toString", "toTimeString", "toUTCString", "valueOf" ];
        angular.forEach(unimplementedMethods, function(methodName) {
            self[methodName] = function() {
                throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
            };
        });
        return self;
    };
    angular.mock.TzDate.prototype = Date.prototype;
    angular.mock.animate = angular.module("ngAnimateMock", [ "ng" ]).config([ "$provide", function($provide) {
        $provide.factory("$$forceReflow", function() {
            function reflowFn() {
                reflowFn.totalReflows++;
            }
            reflowFn.totalReflows = 0;
            return reflowFn;
        });
        $provide.factory("$$animateAsyncRun", function() {
            var queue = [];
            var queueFn = function() {
                return function(fn) {
                    queue.push(fn);
                };
            };
            queueFn.flush = function() {
                if (queue.length === 0) return false;
                for (var i = 0; i < queue.length; i++) {
                    queue[i]();
                }
                queue = [];
                return true;
            };
            return queueFn;
        });
        $provide.decorator("$$animateJs", [ "$delegate", function($delegate) {
            var runners = [];
            var animateJsConstructor = function() {
                var animator = $delegate.apply($delegate, arguments);
                if (animator) {
                    runners.push(animator);
                }
                return animator;
            };
            animateJsConstructor.$closeAndFlush = function() {
                runners.forEach(function(runner) {
                    runner.end();
                });
                runners = [];
            };
            return animateJsConstructor;
        } ]);
        $provide.decorator("$animateCss", [ "$delegate", function($delegate) {
            var runners = [];
            var animateCssConstructor = function(element, options) {
                var animator = $delegate(element, options);
                runners.push(animator);
                return animator;
            };
            animateCssConstructor.$closeAndFlush = function() {
                runners.forEach(function(runner) {
                    runner.end();
                });
                runners = [];
            };
            return animateCssConstructor;
        } ]);
        $provide.decorator("$animate", [ "$delegate", "$timeout", "$browser", "$$rAF", "$animateCss", "$$animateJs", "$$forceReflow", "$$animateAsyncRun", "$rootScope", function($delegate, $timeout, $browser, $$rAF, $animateCss, $$animateJs, $$forceReflow, $$animateAsyncRun, $rootScope) {
            var animate = {
                queue: [],
                cancel: $delegate.cancel,
                on: $delegate.on,
                off: $delegate.off,
                pin: $delegate.pin,
                get reflows() {
                    return $$forceReflow.totalReflows;
                },
                enabled: $delegate.enabled,
                closeAndFlush: function() {
                    this.flush(true);
                    $animateCss.$closeAndFlush();
                    $$animateJs.$closeAndFlush();
                    this.flush();
                },
                flush: function(hideErrors) {
                    $rootScope.$digest();
                    var doNextRun, somethingFlushed = false;
                    do {
                        doNextRun = false;
                        if ($$rAF.queue.length) {
                            $$rAF.flush();
                            doNextRun = somethingFlushed = true;
                        }
                        if ($$animateAsyncRun.flush()) {
                            doNextRun = somethingFlushed = true;
                        }
                    } while (doNextRun);
                    if (!somethingFlushed && !hideErrors) {
                        throw new Error("No pending animations ready to be closed or flushed");
                    }
                    $rootScope.$digest();
                }
            };
            angular.forEach([ "animate", "enter", "leave", "move", "addClass", "removeClass", "setClass" ], function(method) {
                animate[method] = function() {
                    animate.queue.push({
                        event: method,
                        element: arguments[0],
                        options: arguments[arguments.length - 1],
                        args: arguments
                    });
                    return $delegate[method].apply($delegate, arguments);
                };
            });
            return animate;
        } ]);
    } ]);
    angular.mock.dump = function(object) {
        return serialize(object);
        function serialize(object) {
            var out;
            if (angular.isElement(object)) {
                object = angular.element(object);
                out = angular.element("<div></div>");
                angular.forEach(object, function(element) {
                    out.append(angular.element(element).clone());
                });
                out = out.html();
            } else if (angular.isArray(object)) {
                out = [];
                angular.forEach(object, function(o) {
                    out.push(serialize(o));
                });
                out = "[ " + out.join(", ") + " ]";
            } else if (angular.isObject(object)) {
                if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
                    out = serializeScope(object);
                } else if (object instanceof Error) {
                    out = object.stack || "" + object.name + ": " + object.message;
                } else {
                    out = angular.toJson(object, true);
                }
            } else {
                out = String(object);
            }
            return out;
        }
        function serializeScope(scope, offset) {
            offset = offset || "  ";
            var log = [ offset + "Scope(" + scope.$id + "): {" ];
            for (var key in scope) {
                if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
                    log.push("  " + key + ": " + angular.toJson(scope[key]));
                }
            }
            var child = scope.$$childHead;
            while (child) {
                log.push(serializeScope(child, offset + "  "));
                child = child.$$nextSibling;
            }
            log.push("}");
            return log.join("\n" + offset);
        }
    };
    angular.mock.$HttpBackendProvider = function() {
        this.$get = [ "$rootScope", "$timeout", createHttpBackendMock ];
    };
    function createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {
        var definitions = [], expectations = [], responses = [], responsesPush = angular.bind(responses, responses.push), copy = angular.copy;
        function createResponse(status, data, headers, statusText) {
            if (angular.isFunction(status)) return status;
            return function() {
                return angular.isNumber(status) ? [ status, data, headers, statusText ] : [ 200, status, data, headers ];
            };
        }
        function $httpBackend(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
            var xhr = new MockXhr(), expectation = expectations[0], wasExpected = false;
            xhr.$$events = eventHandlers;
            xhr.upload.$$events = uploadEventHandlers;
            function prettyPrint(data) {
                return angular.isString(data) || angular.isFunction(data) || data instanceof RegExp ? data : angular.toJson(data);
            }
            function wrapResponse(wrapped) {
                if (!$browser && timeout) {
                    timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);
                }
                return handleResponse;
                function handleResponse() {
                    var response = wrapped.response(method, url, data, headers, wrapped.params(url));
                    xhr.$$respHeaders = response[2];
                    callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(), copy(response[3] || ""));
                }
                function handleTimeout() {
                    for (var i = 0, ii = responses.length; i < ii; i++) {
                        if (responses[i] === handleResponse) {
                            responses.splice(i, 1);
                            callback(-1, undefined, "");
                            break;
                        }
                    }
                }
            }
            if (expectation && expectation.match(method, url)) {
                if (!expectation.matchData(data)) {
                    throw new Error("Expected " + expectation + " with different data\n" + "EXPECTED: " + prettyPrint(expectation.data) + "\nGOT:      " + data);
                }
                if (!expectation.matchHeaders(headers)) {
                    throw new Error("Expected " + expectation + " with different headers\n" + "EXPECTED: " + prettyPrint(expectation.headers) + "\nGOT:      " + prettyPrint(headers));
                }
                expectations.shift();
                if (expectation.response) {
                    responses.push(wrapResponse(expectation));
                    return;
                }
                wasExpected = true;
            }
            var i = -1, definition;
            while (definition = definitions[++i]) {
                if (definition.match(method, url, data, headers || {})) {
                    if (definition.response) {
                        ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
                    } else if (definition.passThrough) {
                        $delegate(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers);
                    } else throw new Error("No response defined !");
                    return;
                }
            }
            throw wasExpected ? new Error("No response defined !") : new Error("Unexpected request: " + method + " " + url + "\n" + (expectation ? "Expected " + expectation : "No more request expected"));
        }
        $httpBackend.when = function(method, url, data, headers, keys) {
            var definition = new MockHttpExpectation(method, url, data, headers, keys), chain = {
                respond: function(status, data, headers, statusText) {
                    definition.passThrough = undefined;
                    definition.response = createResponse(status, data, headers, statusText);
                    return chain;
                }
            };
            if ($browser) {
                chain.passThrough = function() {
                    definition.response = undefined;
                    definition.passThrough = true;
                    return chain;
                };
            }
            definitions.push(definition);
            return chain;
        };
        createShortMethods("when");
        $httpBackend.whenRoute = function(method, url) {
            var pathObj = parseRoute(url);
            return $httpBackend.when(method, pathObj.regexp, undefined, undefined, pathObj.keys);
        };
        function parseRoute(url) {
            var ret = {
                regexp: url
            }, keys = ret.keys = [];
            if (!url || !angular.isString(url)) return ret;
            url = url.replace(/([().])/g, "\\$1").replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
                var optional = option === "?" ? option : null;
                var star = option === "*" ? option : null;
                keys.push({
                    name: key,
                    optional: !!optional
                });
                slash = slash || "";
                return "" + (optional ? "" : slash) + "(?:" + (optional ? slash : "") + (star && "(.+?)" || "([^/]+)") + (optional || "") + ")" + (optional || "");
            }).replace(/([\/$\*])/g, "\\$1");
            ret.regexp = new RegExp("^" + url, "i");
            return ret;
        }
        $httpBackend.expect = function(method, url, data, headers, keys) {
            var expectation = new MockHttpExpectation(method, url, data, headers, keys), chain = {
                respond: function(status, data, headers, statusText) {
                    expectation.response = createResponse(status, data, headers, statusText);
                    return chain;
                }
            };
            expectations.push(expectation);
            return chain;
        };
        createShortMethods("expect");
        $httpBackend.expectRoute = function(method, url) {
            var pathObj = parseRoute(url);
            return $httpBackend.expect(method, pathObj.regexp, undefined, undefined, pathObj.keys);
        };
        $httpBackend.flush = function(count, digest) {
            if (digest !== false) $rootScope.$digest();
            if (!responses.length) throw new Error("No pending request to flush !");
            if (angular.isDefined(count) && count !== null) {
                while (count--) {
                    if (!responses.length) throw new Error("No more pending request to flush !");
                    responses.shift()();
                }
            } else {
                while (responses.length) {
                    responses.shift()();
                }
            }
            $httpBackend.verifyNoOutstandingExpectation(digest);
        };
        $httpBackend.verifyNoOutstandingExpectation = function(digest) {
            if (digest !== false) $rootScope.$digest();
            if (expectations.length) {
                throw new Error("Unsatisfied requests: " + expectations.join(", "));
            }
        };
        $httpBackend.verifyNoOutstandingRequest = function() {
            if (responses.length) {
                throw new Error("Unflushed requests: " + responses.length);
            }
        };
        $httpBackend.resetExpectations = function() {
            expectations.length = 0;
            responses.length = 0;
        };
        return $httpBackend;
        function createShortMethods(prefix) {
            angular.forEach([ "GET", "DELETE", "JSONP", "HEAD" ], function(method) {
                $httpBackend[prefix + method] = function(url, headers, keys) {
                    return $httpBackend[prefix](method, url, undefined, headers, keys);
                };
            });
            angular.forEach([ "PUT", "POST", "PATCH" ], function(method) {
                $httpBackend[prefix + method] = function(url, data, headers, keys) {
                    return $httpBackend[prefix](method, url, data, headers, keys);
                };
            });
        }
    }
    function MockHttpExpectation(method, url, data, headers, keys) {
        function getUrlParams(u) {
            var params = u.slice(u.indexOf("?") + 1).split("&");
            return params.sort();
        }
        function compareUrl(u) {
            return url.slice(0, url.indexOf("?")) == u.slice(0, u.indexOf("?")) && getUrlParams(url).join() == getUrlParams(u).join();
        }
        this.data = data;
        this.headers = headers;
        this.match = function(m, u, d, h) {
            if (method != m) return false;
            if (!this.matchUrl(u)) return false;
            if (angular.isDefined(d) && !this.matchData(d)) return false;
            if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
            return true;
        };
        this.matchUrl = function(u) {
            if (!url) return true;
            if (angular.isFunction(url.test)) return url.test(u);
            if (angular.isFunction(url)) return url(u);
            return url == u || compareUrl(u);
        };
        this.matchHeaders = function(h) {
            if (angular.isUndefined(headers)) return true;
            if (angular.isFunction(headers)) return headers(h);
            return angular.equals(headers, h);
        };
        this.matchData = function(d) {
            if (angular.isUndefined(data)) return true;
            if (data && angular.isFunction(data.test)) return data.test(d);
            if (data && angular.isFunction(data)) return data(d);
            if (data && !angular.isString(data)) {
                return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
            }
            return data == d;
        };
        this.toString = function() {
            return method + " " + url;
        };
        this.params = function(u) {
            return angular.extend(parseQuery(), pathParams());
            function pathParams() {
                var keyObj = {};
                if (!url || !angular.isFunction(url.test) || !keys || keys.length === 0) return keyObj;
                var m = url.exec(u);
                if (!m) return keyObj;
                for (var i = 1, len = m.length; i < len; ++i) {
                    var key = keys[i - 1];
                    var val = m[i];
                    if (key && val) {
                        keyObj[key.name || key] = val;
                    }
                }
                return keyObj;
            }
            function parseQuery() {
                var obj = {}, key_value, key, queryStr = u.indexOf("?") > -1 ? u.substring(u.indexOf("?") + 1) : "";
                angular.forEach(queryStr.split("&"), function(keyValue) {
                    if (keyValue) {
                        key_value = keyValue.replace(/\+/g, "%20").split("=");
                        key = tryDecodeURIComponent(key_value[0]);
                        if (angular.isDefined(key)) {
                            var val = angular.isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
                            if (!hasOwnProperty.call(obj, key)) {
                                obj[key] = val;
                            } else if (angular.isArray(obj[key])) {
                                obj[key].push(val);
                            } else {
                                obj[key] = [ obj[key], val ];
                            }
                        }
                    }
                });
                return obj;
            }
            function tryDecodeURIComponent(value) {
                try {
                    return decodeURIComponent(value);
                } catch (e) {}
            }
        };
    }
    function createMockXhr() {
        return new MockXhr();
    }
    function MockXhr() {
        MockXhr.$$lastInstance = this;
        this.open = function(method, url, async) {
            this.$$method = method;
            this.$$url = url;
            this.$$async = async;
            this.$$reqHeaders = {};
            this.$$respHeaders = {};
        };
        this.send = function(data) {
            this.$$data = data;
        };
        this.setRequestHeader = function(key, value) {
            this.$$reqHeaders[key] = value;
        };
        this.getResponseHeader = function(name) {
            var header = this.$$respHeaders[name];
            if (header) return header;
            name = angular.lowercase(name);
            header = this.$$respHeaders[name];
            if (header) return header;
            header = undefined;
            angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
                if (!header && angular.lowercase(headerName) == name) header = headerVal;
            });
            return header;
        };
        this.getAllResponseHeaders = function() {
            var lines = [];
            angular.forEach(this.$$respHeaders, function(value, key) {
                lines.push(key + ": " + value);
            });
            return lines.join("\n");
        };
        this.abort = angular.noop;
        this.$$events = {};
        this.addEventListener = function(name, listener) {
            if (angular.isUndefined(this.$$events[name])) this.$$events[name] = [];
            this.$$events[name].push(listener);
        };
        this.upload = {
            $$events: {},
            addEventListener: this.addEventListener
        };
    }
    angular.mock.$TimeoutDecorator = [ "$delegate", "$browser", function($delegate, $browser) {
        $delegate.flush = function(delay) {
            $browser.defer.flush(delay);
        };
        $delegate.verifyNoPendingTasks = function() {
            if ($browser.deferredFns.length) {
                throw new Error("Deferred tasks to flush (" + $browser.deferredFns.length + "): " + formatPendingTasksAsString($browser.deferredFns));
            }
        };
        function formatPendingTasksAsString(tasks) {
            var result = [];
            angular.forEach(tasks, function(task) {
                result.push("{id: " + task.id + ", " + "time: " + task.time + "}");
            });
            return result.join(", ");
        }
        return $delegate;
    } ];
    angular.mock.$RAFDecorator = [ "$delegate", function($delegate) {
        var rafFn = function(fn) {
            var index = rafFn.queue.length;
            rafFn.queue.push(fn);
            return function() {
                rafFn.queue.splice(index, 1);
            };
        };
        rafFn.queue = [];
        rafFn.supported = $delegate.supported;
        rafFn.flush = function() {
            if (rafFn.queue.length === 0) {
                throw new Error("No rAF callbacks present");
            }
            var length = rafFn.queue.length;
            for (var i = 0; i < length; i++) {
                rafFn.queue[i]();
            }
            rafFn.queue = rafFn.queue.slice(i);
        };
        return rafFn;
    } ];
    var originalRootElement;
    angular.mock.$RootElementProvider = function() {
        this.$get = [ "$injector", function($injector) {
            originalRootElement = angular.element("<div ng-app></div>").data("$injector", $injector);
            return originalRootElement;
        } ];
    };
    angular.mock.$ControllerDecorator = [ "$delegate", function($delegate) {
        return function(expression, locals, later, ident) {
            if (later && typeof later === "object") {
                var instantiate = $delegate(expression, locals, true, ident);
                angular.extend(instantiate.instance, later);
                var instance = instantiate();
                if (instance !== instantiate.instance) {
                    angular.extend(instance, later);
                }
                return instance;
            }
            return $delegate(expression, locals, later, ident);
        };
    } ];
    angular.mock.$ComponentControllerProvider = [ "$compileProvider", function($compileProvider) {
        this.$get = [ "$controller", "$injector", "$rootScope", function($controller, $injector, $rootScope) {
            return function $componentController(componentName, locals, bindings, ident) {
                var directives = $injector.get(componentName + "Directive");
                var candidateDirectives = directives.filter(function(directiveInfo) {
                    return directiveInfo.controller && directiveInfo.controllerAs && directiveInfo.restrict === "E";
                });
                if (candidateDirectives.length === 0) {
                    throw new Error("No component found");
                }
                if (candidateDirectives.length > 1) {
                    throw new Error("Too many components found");
                }
                var directiveInfo = candidateDirectives[0];
                locals = locals || {};
                locals.$scope = locals.$scope || $rootScope.$new(true);
                return $controller(directiveInfo.controller, locals, bindings, ident || directiveInfo.controllerAs);
            };
        } ];
    } ];
    angular.module("ngMock", [ "ng" ]).provider({
        $browser: angular.mock.$BrowserProvider,
        $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
        $log: angular.mock.$LogProvider,
        $interval: angular.mock.$IntervalProvider,
        $httpBackend: angular.mock.$HttpBackendProvider,
        $rootElement: angular.mock.$RootElementProvider,
        $componentController: angular.mock.$ComponentControllerProvider
    }).config([ "$provide", function($provide) {
        $provide.decorator("$timeout", angular.mock.$TimeoutDecorator);
        $provide.decorator("$$rAF", angular.mock.$RAFDecorator);
        $provide.decorator("$rootScope", angular.mock.$RootScopeDecorator);
        $provide.decorator("$controller", angular.mock.$ControllerDecorator);
    } ]);
    angular.module("ngMockE2E", [ "ng" ]).config([ "$provide", function($provide) {
        $provide.value("$httpBackend", angular.injector([ "ng" ]).get("$httpBackend"));
        $provide.decorator("$httpBackend", angular.mock.e2e.$httpBackendDecorator);
    } ]);
    angular.mock.e2e = {};
    angular.mock.e2e.$httpBackendDecorator = [ "$rootScope", "$timeout", "$delegate", "$browser", createHttpBackendMock ];
    angular.mock.$RootScopeDecorator = [ "$delegate", function($delegate) {
        var $rootScopePrototype = Object.getPrototypeOf($delegate);
        $rootScopePrototype.$countChildScopes = countChildScopes;
        $rootScopePrototype.$countWatchers = countWatchers;
        return $delegate;
        function countChildScopes() {
            var count = 0;
            var pendingChildHeads = [ this.$$childHead ];
            var currentScope;
            while (pendingChildHeads.length) {
                currentScope = pendingChildHeads.shift();
                while (currentScope) {
                    count += 1;
                    pendingChildHeads.push(currentScope.$$childHead);
                    currentScope = currentScope.$$nextSibling;
                }
            }
            return count;
        }
        function countWatchers() {
            var count = this.$$watchers ? this.$$watchers.length : 0;
            var pendingChildHeads = [ this.$$childHead ];
            var currentScope;
            while (pendingChildHeads.length) {
                currentScope = pendingChildHeads.shift();
                while (currentScope) {
                    count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;
                    pendingChildHeads.push(currentScope.$$childHead);
                    currentScope = currentScope.$$nextSibling;
                }
            }
            return count;
        }
    } ];
    !function(jasmineOrMocha) {
        if (!jasmineOrMocha) {
            return;
        }
        var currentSpec = null, injectorState = new InjectorState(), annotatedFunctions = [], wasInjectorCreated = function() {
            return !!currentSpec;
        };
        angular.mock.$$annotate = angular.injector.$$annotate;
        angular.injector.$$annotate = function(fn) {
            if (typeof fn === "function" && !fn.$inject) {
                annotatedFunctions.push(fn);
            }
            return angular.mock.$$annotate.apply(this, arguments);
        };
        var module = window.module = angular.mock.module = function() {
            var moduleFns = Array.prototype.slice.call(arguments, 0);
            return wasInjectorCreated() ? workFn() : workFn;
            function workFn() {
                if (currentSpec.$injector) {
                    throw new Error("Injector already created, can not register a module!");
                } else {
                    var fn, modules = currentSpec.$modules || (currentSpec.$modules = []);
                    angular.forEach(moduleFns, function(module) {
                        if (angular.isObject(module) && !angular.isArray(module)) {
                            fn = [ "$provide", function($provide) {
                                angular.forEach(module, function(value, key) {
                                    $provide.value(key, value);
                                });
                            } ];
                        } else {
                            fn = module;
                        }
                        if (currentSpec.$providerInjector) {
                            currentSpec.$providerInjector.invoke(fn);
                        } else {
                            modules.push(fn);
                        }
                    });
                }
            }
        };
        module.$$beforeAllHook = window.before || window.beforeAll;
        module.$$afterAllHook = window.after || window.afterAll;
        module.$$currentSpec = function(to) {
            if (arguments.length === 0) return to;
            currentSpec = to;
        };
        module.sharedInjector = function() {
            if (!(module.$$beforeAllHook && module.$$afterAllHook)) {
                throw Error("sharedInjector() cannot be used unless your test runner defines beforeAll/afterAll");
            }
            var initialized = false;
            module.$$beforeAllHook(function() {
                if (injectorState.shared) {
                    injectorState.sharedError = Error("sharedInjector() cannot be called inside a context that has already called sharedInjector()");
                    throw injectorState.sharedError;
                }
                initialized = true;
                currentSpec = this;
                injectorState.shared = true;
            });
            module.$$afterAllHook(function() {
                if (initialized) {
                    injectorState = new InjectorState();
                    module.$$cleanup();
                } else {
                    injectorState.sharedError = null;
                }
            });
        };
        module.$$beforeEach = function() {
            if (injectorState.shared && currentSpec && currentSpec != this) {
                var state = currentSpec;
                currentSpec = this;
                angular.forEach([ "$injector", "$modules", "$providerInjector", "$injectorStrict" ], function(k) {
                    currentSpec[k] = state[k];
                    state[k] = null;
                });
            } else {
                currentSpec = this;
                originalRootElement = null;
                annotatedFunctions = [];
            }
        };
        module.$$afterEach = function() {
            if (injectorState.cleanupAfterEach()) {
                module.$$cleanup();
            }
        };
        module.$$cleanup = function() {
            var injector = currentSpec.$injector;
            annotatedFunctions.forEach(function(fn) {
                delete fn.$inject;
            });
            angular.forEach(currentSpec.$modules, function(module) {
                if (module && module.$$hashKey) {
                    module.$$hashKey = undefined;
                }
            });
            currentSpec.$injector = null;
            currentSpec.$modules = null;
            currentSpec.$providerInjector = null;
            currentSpec = null;
            if (injector) {
                var $rootElement = injector.get("$rootElement");
                var rootNode = $rootElement && $rootElement[0];
                var cleanUpNodes = !originalRootElement ? [] : [ originalRootElement[0] ];
                if (rootNode && (!originalRootElement || rootNode !== originalRootElement[0])) {
                    cleanUpNodes.push(rootNode);
                }
                angular.element.cleanData(cleanUpNodes);
                var $rootScope = injector.get("$rootScope");
                if ($rootScope && $rootScope.$destroy) $rootScope.$destroy();
            }
            angular.forEach(angular.element.fragments, function(val, key) {
                delete angular.element.fragments[key];
            });
            MockXhr.$$lastInstance = null;
            angular.forEach(angular.callbacks, function(val, key) {
                delete angular.callbacks[key];
            });
            angular.callbacks.$$counter = 0;
        };
        (window.beforeEach || window.setup)(module.$$beforeEach);
        (window.afterEach || window.teardown)(module.$$afterEach);
        var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
            this.message = e.message;
            this.name = e.name;
            if (e.line) this.line = e.line;
            if (e.sourceId) this.sourceId = e.sourceId;
            if (e.stack && errorForStack) this.stack = e.stack + "\n" + errorForStack.stack;
            if (e.stackArray) this.stackArray = e.stackArray;
        };
        ErrorAddingDeclarationLocationStack.prototype = Error.prototype;
        window.inject = angular.mock.inject = function() {
            var blockFns = Array.prototype.slice.call(arguments, 0);
            var errorForStack = new Error("Declaration Location");
            if (!errorForStack.stack) {
                try {
                    throw errorForStack;
                } catch (e) {}
            }
            return wasInjectorCreated() ? workFn.call(currentSpec) : workFn;
            function workFn() {
                var modules = currentSpec.$modules || [];
                var strictDi = !!currentSpec.$injectorStrict;
                modules.unshift([ "$injector", function($injector) {
                    currentSpec.$providerInjector = $injector;
                } ]);
                modules.unshift("ngMock");
                modules.unshift("ng");
                var injector = currentSpec.$injector;
                if (!injector) {
                    if (strictDi) {
                        angular.forEach(modules, function(moduleFn) {
                            if (typeof moduleFn === "function") {
                                angular.injector.$$annotate(moduleFn);
                            }
                        });
                    }
                    injector = currentSpec.$injector = angular.injector(modules, strictDi);
                    currentSpec.$injectorStrict = strictDi;
                }
                for (var i = 0, ii = blockFns.length; i < ii; i++) {
                    if (currentSpec.$injectorStrict) {
                        injector.annotate(blockFns[i]);
                    }
                    try {
                        injector.invoke(blockFns[i] || angular.noop, this);
                    } catch (e) {
                        if (e.stack && errorForStack) {
                            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
                        }
                        throw e;
                    } finally {
                        errorForStack = null;
                    }
                }
            }
        };
        angular.mock.inject.strictDi = function(value) {
            value = arguments.length ? !!value : true;
            return wasInjectorCreated() ? workFn() : workFn;
            function workFn() {
                if (value !== currentSpec.$injectorStrict) {
                    if (currentSpec.$injector) {
                        throw new Error("Injector already created, can not modify strict annotations");
                    } else {
                        currentSpec.$injectorStrict = value;
                    }
                }
            }
        };
        function InjectorState() {
            this.shared = false;
            this.sharedError = null;
            this.cleanupAfterEach = function() {
                return !this.shared || this.sharedError;
            };
        }
    }(window.jasmine || window.mocha);
})(window, window.angular);

(function(root, factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "angular" ], factory);
    } else if (typeof exports === "object") {
        factory(require("angular"));
        module.exports = "ngStorage";
    } else {
        factory(root.angular);
    }
})(this, function(angular) {
    "use strict";
    angular = angular && angular.module ? angular : window.angular;
    function isStorageSupported($window, storageType) {
        var supported;
        try {
            supported = $window[storageType];
        } catch (err) {
            supported = false;
        }
        if (supported) {
            var key = "__" + Math.round(Math.random() * 1e7);
            try {
                $window[storageType].setItem(key, key);
                $window[storageType].removeItem(key, key);
            } catch (err) {
                supported = false;
            }
        }
        return supported;
    }
    return angular.module("ngStorage", []).provider("$localStorage", _storageProvider("localStorage")).provider("$sessionStorage", _storageProvider("sessionStorage"));
    function _storageProvider(storageType) {
        var providerWebStorage = isStorageSupported(window, storageType);
        return function() {
            var storageKeyPrefix = "ngStorage-";
            this.setKeyPrefix = function(prefix) {
                if (typeof prefix !== "string") {
                    throw new TypeError("[ngStorage] - " + storageType + "Provider.setKeyPrefix() expects a String.");
                }
                storageKeyPrefix = prefix;
            };
            var serializer = angular.toJson;
            var deserializer = angular.fromJson;
            this.setSerializer = function(s) {
                if (typeof s !== "function") {
                    throw new TypeError("[ngStorage] - " + storageType + "Provider.setSerializer expects a function.");
                }
                serializer = s;
            };
            this.setDeserializer = function(d) {
                if (typeof d !== "function") {
                    throw new TypeError("[ngStorage] - " + storageType + "Provider.setDeserializer expects a function.");
                }
                deserializer = d;
            };
            this.supported = function() {
                return !!providerWebStorage;
            };
            this.get = function(key) {
                return providerWebStorage && deserializer(providerWebStorage.getItem(storageKeyPrefix + key));
            };
            this.set = function(key, value) {
                return providerWebStorage && providerWebStorage.setItem(storageKeyPrefix + key, serializer(value));
            };
            this.remove = function(key) {
                providerWebStorage && providerWebStorage.removeItem(storageKeyPrefix + key);
            };
            this.$get = [ "$rootScope", "$window", "$log", "$timeout", "$document", function($rootScope, $window, $log, $timeout, $document) {
                var prefixLength = storageKeyPrefix.length;
                var isSupported = isStorageSupported($window, storageType), webStorage = isSupported || ($log.warn("This browser does not support Web Storage!"), 
                {
                    setItem: angular.noop,
                    getItem: angular.noop,
                    removeItem: angular.noop
                }), $storage = {
                    $default: function(items) {
                        for (var k in items) {
                            angular.isDefined($storage[k]) || ($storage[k] = angular.copy(items[k]));
                        }
                        $storage.$sync();
                        return $storage;
                    },
                    $reset: function(items) {
                        for (var k in $storage) {
                            "$" === k[0] || delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k);
                        }
                        return $storage.$default(items);
                    },
                    $sync: function() {
                        for (var i = 0, l = webStorage.length, k; i < l; i++) {
                            (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
                        }
                    },
                    $apply: function() {
                        var temp$storage;
                        _debounce = null;
                        if (!angular.equals($storage, _last$storage)) {
                            temp$storage = angular.copy(_last$storage);
                            angular.forEach($storage, function(v, k) {
                                if (angular.isDefined(v) && "$" !== k[0]) {
                                    webStorage.setItem(storageKeyPrefix + k, serializer(v));
                                    delete temp$storage[k];
                                }
                            });
                            for (var k in temp$storage) {
                                webStorage.removeItem(storageKeyPrefix + k);
                            }
                            _last$storage = angular.copy($storage);
                        }
                    },
                    $supported: function() {
                        return !!isSupported;
                    }
                }, _last$storage, _debounce;
                $storage.$sync();
                _last$storage = angular.copy($storage);
                $rootScope.$watch(function() {
                    _debounce || (_debounce = $timeout($storage.$apply, 100, false));
                });
                $window.addEventListener && $window.addEventListener("storage", function(event) {
                    if (!event.key) {
                        return;
                    }
                    var doc = $document[0];
                    if ((!doc.hasFocus || !doc.hasFocus()) && storageKeyPrefix === event.key.slice(0, prefixLength)) {
                        event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];
                        _last$storage = angular.copy($storage);
                        $rootScope.$apply();
                    }
                });
                $window.addEventListener && $window.addEventListener("beforeunload", function() {
                    $storage.$apply();
                });
                return $storage;
            } ];
        };
    }
});

(function(window, angular) {
    "use strict";
    var $resourceMinErr = angular.$$minErr("$resource");
    var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    function isValidDottedPath(path) {
        return path != null && path !== "" && path !== "hasOwnProperty" && MEMBER_NAME_REGEX.test("." + path);
    }
    function lookupDottedPath(obj, path) {
        if (!isValidDottedPath(path)) {
            throw $resourceMinErr("badmember", 'Dotted member path "@{0}" is invalid.', path);
        }
        var keys = path.split(".");
        for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
            var key = keys[i];
            obj = obj !== null ? obj[key] : undefined;
        }
        return obj;
    }
    function shallowClearAndCopy(src, dst) {
        dst = dst || {};
        angular.forEach(dst, function(value, key) {
            delete dst[key];
        });
        for (var key in src) {
            if (src.hasOwnProperty(key) && !(key.charAt(0) === "$" && key.charAt(1) === "$")) {
                dst[key] = src[key];
            }
        }
        return dst;
    }
    angular.module("ngResource", [ "ng" ]).info({
        angularVersion: "1.6.4"
    }).provider("$resource", function ResourceProvider() {
        var PROTOCOL_AND_IPV6_REGEX = /^https?:\/\/\[[^\]]*][^\/]*/;
        var provider = this;
        this.defaults = {
            stripTrailingSlashes: true,
            cancellable: false,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: true
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        };
        this.$get = [ "$http", "$log", "$q", "$timeout", function($http, $log, $q, $timeout) {
            var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isArray = angular.isArray, isDefined = angular.isDefined, isFunction = angular.isFunction, isNumber = angular.isNumber, encodeUriQuery = angular.$$encodeUriQuery, encodeUriSegment = angular.$$encodeUriSegment;
            function Route(template, defaults) {
                this.template = template;
                this.defaults = extend({}, provider.defaults, defaults);
                this.urlParams = {};
            }
            Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var self = this, url = actionUrl || self.template, val, encodedVal, protocolAndIpv6 = "";
                    var urlParams = self.urlParams = Object.create(null);
                    forEach(url.split(/\W/), function(param) {
                        if (param === "hasOwnProperty") {
                            throw $resourceMinErr("badname", "hasOwnProperty is not a valid parameter name.");
                        }
                        if (!new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url)) {
                            urlParams[param] = {
                                isQueryParamValue: new RegExp("\\?.*=:" + param + "(?:\\W|$)").test(url)
                            };
                        }
                    });
                    url = url.replace(/\\:/g, ":");
                    url = url.replace(PROTOCOL_AND_IPV6_REGEX, function(match) {
                        protocolAndIpv6 = match;
                        return "";
                    });
                    params = params || {};
                    forEach(self.urlParams, function(paramInfo, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
                        if (isDefined(val) && val !== null) {
                            if (paramInfo.isQueryParamValue) {
                                encodedVal = encodeUriQuery(val, true);
                            } else {
                                encodedVal = encodeUriSegment(val);
                            }
                            url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                                return encodedVal + p1;
                            });
                        } else {
                            url = url.replace(new RegExp("(/?):" + urlParam + "(\\W|$)", "g"), function(match, leadingSlashes, tail) {
                                if (tail.charAt(0) === "/") {
                                    return tail;
                                } else {
                                    return leadingSlashes + tail;
                                }
                            });
                        }
                    });
                    if (self.defaults.stripTrailingSlashes) {
                        url = url.replace(/\/+$/, "") || "/";
                    }
                    url = url.replace(/\/\.(?=\w+($|\?))/, ".");
                    config.url = protocolAndIpv6 + url.replace(/\/(\\|%5C)\./, "/.");
                    forEach(params, function(value, key) {
                        if (!self.urlParams[key]) {
                            config.params = config.params || {};
                            config.params[key] = value;
                        }
                    });
                }
            };
            function resourceFactory(url, paramDefaults, actions, options) {
                var route = new Route(url, options);
                actions = extend({}, provider.defaults.actions, actions);
                function extractParams(data, actionParams) {
                    var ids = {};
                    actionParams = extend({}, paramDefaults, actionParams);
                    forEach(actionParams, function(value, key) {
                        if (isFunction(value)) {
                            value = value(data);
                        }
                        ids[key] = value && value.charAt && value.charAt(0) === "@" ? lookupDottedPath(data, value.substr(1)) : value;
                    });
                    return ids;
                }
                function defaultResponseInterceptor(response) {
                    return response.resource;
                }
                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }
                Resource.prototype.toJSON = function() {
                    var data = extend({}, this);
                    delete data.$promise;
                    delete data.$resolved;
                    delete data.$cancelRequest;
                    return data;
                };
                forEach(actions, function(action, name) {
                    var hasBody = action.hasBody === true || action.hasBody !== false && /^(POST|PUT|PATCH)$/i.test(action.method);
                    var numericTimeout = action.timeout;
                    var cancellable = isDefined(action.cancellable) ? action.cancellable : route.defaults.cancellable;
                    if (numericTimeout && !isNumber(numericTimeout)) {
                        $log.debug("ngResource:\n" + "  Only numeric values are allowed as `timeout`.\n" + "  Promises are not supported in $resource, because the same value would " + "be used for multiple requests. If you are looking for a way to cancel " + "requests, you should use the `cancellable` option.");
                        delete action.timeout;
                        numericTimeout = null;
                    }
                    Resource[name] = function(a1, a2, a3, a4) {
                        var params = {}, data, success, error;
                        switch (arguments.length) {
                          case 4:
                            error = a4;
                            success = a3;

                          case 3:
                          case 2:
                            if (isFunction(a2)) {
                                if (isFunction(a1)) {
                                    success = a1;
                                    error = a2;
                                    break;
                                }
                                success = a2;
                                error = a3;
                            } else {
                                params = a1;
                                data = a2;
                                success = a3;
                                break;
                            }

                          case 1:
                            if (isFunction(a1)) success = a1; else if (hasBody) data = a1; else params = a1;
                            break;

                          case 0:
                            break;

                          default:
                            throw $resourceMinErr("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var isInstanceCall = this instanceof Resource;
                        var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
                        var httpConfig = {};
                        var responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor;
                        var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
                        var hasError = !!error;
                        var hasResponseErrorInterceptor = !!responseErrorInterceptor;
                        var timeoutDeferred;
                        var numericTimeoutPromise;
                        forEach(action, function(value, key) {
                            switch (key) {
                              default:
                                httpConfig[key] = copy(value);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                              case "cancellable":
                                break;
                            }
                        });
                        if (!isInstanceCall && cancellable) {
                            timeoutDeferred = $q.defer();
                            httpConfig.timeout = timeoutDeferred.promise;
                            if (numericTimeout) {
                                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);
                            }
                        }
                        if (hasBody) httpConfig.data = data;
                        route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
                        var promise = $http(httpConfig).then(function(response) {
                            var data = response.data;
                            if (data) {
                                if (isArray(data) !== !!action.isArray) {
                                    throw $resourceMinErr("badcfg", "Error in resource configuration for action `{0}`. Expected response to " + "contain an {1} but got an {2} (Request: {3} {4})", name, action.isArray ? "array" : "object", isArray(data) ? "array" : "object", httpConfig.method, httpConfig.url);
                                }
                                if (action.isArray) {
                                    value.length = 0;
                                    forEach(data, function(item) {
                                        if (typeof item === "object") {
                                            value.push(new Resource(item));
                                        } else {
                                            value.push(item);
                                        }
                                    });
                                } else {
                                    var promise = value.$promise;
                                    shallowClearAndCopy(data, value);
                                    value.$promise = promise;
                                }
                            }
                            response.resource = value;
                            return response;
                        });
                        promise = promise["finally"](function() {
                            value.$resolved = true;
                            if (!isInstanceCall && cancellable) {
                                value.$cancelRequest = noop;
                                $timeout.cancel(numericTimeoutPromise);
                                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
                            }
                        });
                        promise = promise.then(function(response) {
                            var value = responseInterceptor(response);
                            (success || noop)(value, response.headers, response.status, response.statusText);
                            return value;
                        }, hasError || hasResponseErrorInterceptor ? function(response) {
                            if (hasError && !hasResponseErrorInterceptor) {
                                promise.catch(noop);
                            }
                            if (hasError) error(response);
                            return hasResponseErrorInterceptor ? responseErrorInterceptor(response) : $q.reject(response);
                        } : undefined);
                        if (!isInstanceCall) {
                            value.$promise = promise;
                            value.$resolved = false;
                            if (cancellable) value.$cancelRequest = cancelRequest;
                            return value;
                        }
                        return promise;
                        function cancelRequest(value) {
                            promise.catch(noop);
                            timeoutDeferred.resolve(value);
                        }
                    };
                    Resource.prototype["$" + name] = function(params, success, error) {
                        if (isFunction(params)) {
                            error = success;
                            success = params;
                            params = {};
                        }
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                });
                Resource.bind = function(additionalParamDefaults) {
                    var extendedParamDefaults = extend({}, paramDefaults, additionalParamDefaults);
                    return resourceFactory(url, extendedParamDefaults, actions, options);
                };
                return Resource;
            }
            return resourceFactory;
        } ];
    });
})(window, window.angular);

(function() {
    function t(t, n) {
        return t.set(n[0], n[1]), t;
    }
    function n(t, n) {
        return t.add(n), t;
    }
    function r(t, n, r) {
        switch (r.length) {
          case 0:
            return t.call(n);

          case 1:
            return t.call(n, r[0]);

          case 2:
            return t.call(n, r[0], r[1]);

          case 3:
            return t.call(n, r[0], r[1], r[2]);
        }
        return t.apply(n, r);
    }
    function e(t, n, r, e) {
        for (var u = -1, i = t ? t.length : 0; ++u < i; ) {
            var o = t[u];
            n(e, o, r(o), t);
        }
        return e;
    }
    function u(t, n) {
        for (var r = -1, e = t ? t.length : 0; ++r < e && false !== n(t[r], r, t); ) ;
        return t;
    }
    function i(t, n) {
        for (var r = t ? t.length : 0; r-- && false !== n(t[r], r, t); ) ;
        return t;
    }
    function o(t, n) {
        for (var r = -1, e = t ? t.length : 0; ++r < e; ) if (!n(t[r], r, t)) return false;
        return true;
    }
    function f(t, n) {
        for (var r = -1, e = t ? t.length : 0, u = 0, i = []; ++r < e; ) {
            var o = t[r];
            n(o, r, t) && (i[u++] = o);
        }
        return i;
    }
    function c(t, n) {
        return !(!t || !t.length) && -1 < d(t, n, 0);
    }
    function a(t, n, r) {
        for (var e = -1, u = t ? t.length : 0; ++e < u; ) if (r(n, t[e])) return true;
        return false;
    }
    function l(t, n) {
        for (var r = -1, e = t ? t.length : 0, u = Array(e); ++r < e; ) u[r] = n(t[r], r, t);
        return u;
    }
    function s(t, n) {
        for (var r = -1, e = n.length, u = t.length; ++r < e; ) t[u + r] = n[r];
        return t;
    }
    function h(t, n, r, e) {
        var u = -1, i = t ? t.length : 0;
        for (e && i && (r = t[++u]); ++u < i; ) r = n(r, t[u], u, t);
        return r;
    }
    function p(t, n, r, e) {
        var u = t ? t.length : 0;
        for (e && u && (r = t[--u]); u--; ) r = n(r, t[u], u, t);
        return r;
    }
    function _(t, n) {
        for (var r = -1, e = t ? t.length : 0; ++r < e; ) if (n(t[r], r, t)) return true;
        return false;
    }
    function v(t, n, r) {
        var e;
        return r(t, function(t, r, u) {
            if (n(t, r, u)) return e = r, false;
        }), e;
    }
    function g(t, n, r, e) {
        var u = t.length;
        for (r += e ? 1 : -1; e ? r-- : ++r < u; ) if (n(t[r], r, t)) return r;
        return -1;
    }
    function d(t, n, r) {
        if (n === n) t: {
            --r;
            for (var e = t.length; ++r < e; ) if (t[r] === n) {
                t = r;
                break t;
            }
            t = -1;
        } else t = g(t, b, r);
        return t;
    }
    function y(t, n, r, e) {
        --r;
        for (var u = t.length; ++r < u; ) if (e(t[r], n)) return r;
        return -1;
    }
    function b(t) {
        return t !== t;
    }
    function x(t, n) {
        var r = t ? t.length : 0;
        return r ? k(t, n) / r : P;
    }
    function j(t) {
        return function(n) {
            return null == n ? F : n[t];
        };
    }
    function w(t) {
        return function(n) {
            return null == t ? F : t[n];
        };
    }
    function m(t, n, r, e, u) {
        return u(t, function(t, u, i) {
            r = e ? (e = false, t) : n(r, t, u, i);
        }), r;
    }
    function A(t, n) {
        var r = t.length;
        for (t.sort(n); r--; ) t[r] = t[r].c;
        return t;
    }
    function k(t, n) {
        for (var r, e = -1, u = t.length; ++e < u; ) {
            var i = n(t[e]);
            i !== F && (r = r === F ? i : r + i);
        }
        return r;
    }
    function E(t, n) {
        for (var r = -1, e = Array(t); ++r < t; ) e[r] = n(r);
        return e;
    }
    function O(t, n) {
        return l(n, function(n) {
            return [ n, t[n] ];
        });
    }
    function S(t) {
        return function(n) {
            return t(n);
        };
    }
    function I(t, n) {
        return l(n, function(n) {
            return t[n];
        });
    }
    function R(t, n) {
        return t.has(n);
    }
    function z(t, n) {
        for (var r = -1, e = t.length; ++r < e && -1 < d(n, t[r], 0); ) ;
        return r;
    }
    function W(t, n) {
        for (var r = t.length; r-- && -1 < d(n, t[r], 0); ) ;
        return r;
    }
    function B(t) {
        return "\\" + Dt[t];
    }
    function L(t) {
        var n = -1, r = Array(t.size);
        return t.forEach(function(t, e) {
            r[++n] = [ e, t ];
        }), r;
    }
    function C(t, n) {
        return function(r) {
            return t(n(r));
        };
    }
    function U(t, n) {
        for (var r = -1, e = t.length, u = 0, i = []; ++r < e; ) {
            var o = t[r];
            o !== n && "__lodash_placeholder__" !== o || (t[r] = "__lodash_placeholder__", i[u++] = r);
        }
        return i;
    }
    function M(t) {
        var n = -1, r = Array(t.size);
        return t.forEach(function(t) {
            r[++n] = t;
        }), r;
    }
    function D(t) {
        var n = -1, r = Array(t.size);
        return t.forEach(function(t) {
            r[++n] = [ t, t ];
        }), r;
    }
    function T(t) {
        if (Wt.test(t)) {
            for (var n = Rt.lastIndex = 0; Rt.test(t); ) ++n;
            t = n;
        } else t = tn(t);
        return t;
    }
    function $(t) {
        return Wt.test(t) ? t.match(Rt) || [] : t.split("");
    }
    var F, N = 1 / 0, P = NaN, Z = [ [ "ary", 128 ], [ "bind", 1 ], [ "bindKey", 2 ], [ "curry", 8 ], [ "curryRight", 16 ], [ "flip", 512 ], [ "partial", 32 ], [ "partialRight", 64 ], [ "rearg", 256 ] ], q = /\b__p\+='';/g, V = /\b(__p\+=)''\+/g, K = /(__e\(.*?\)|\b__t\))\+'';/g, G = /&(?:amp|lt|gt|quot|#39);/g, J = /[&<>"']/g, Y = RegExp(G.source), H = RegExp(J.source), Q = /<%-([\s\S]+?)%>/g, X = /<%([\s\S]+?)%>/g, tt = /<%=([\s\S]+?)%>/g, nt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, rt = /^\w*$/, et = /^\./, ut = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, it = /[\\^$.*+?()[\]{}|]/g, ot = RegExp(it.source), ft = /^\s+|\s+$/g, ct = /^\s+/, at = /\s+$/, lt = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, st = /\{\n\/\* \[wrapped with (.+)\] \*/, ht = /,? & /, pt = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, _t = /\\(\\)?/g, vt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, gt = /\w*$/, dt = /^[-+]0x[0-9a-f]+$/i, yt = /^0b[01]+$/i, bt = /^\[object .+?Constructor\]$/, xt = /^0o[0-7]+$/i, jt = /^(?:0|[1-9]\d*)$/, wt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, mt = /($^)/, At = /['\n\r\u2028\u2029\\]/g, kt = "[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?)*", Et = "(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])" + kt, Ot = "(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]?|[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])", St = RegExp("['’]", "g"), It = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]", "g"), Rt = RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|" + Ot + kt, "g"), zt = RegExp([ "[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\\d+", Et ].join("|"), "g"), Wt = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"), Bt = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Lt = "Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "), Ct = {};
    Ct["[object Float32Array]"] = Ct["[object Float64Array]"] = Ct["[object Int8Array]"] = Ct["[object Int16Array]"] = Ct["[object Int32Array]"] = Ct["[object Uint8Array]"] = Ct["[object Uint8ClampedArray]"] = Ct["[object Uint16Array]"] = Ct["[object Uint32Array]"] = true, 
    Ct["[object Arguments]"] = Ct["[object Array]"] = Ct["[object ArrayBuffer]"] = Ct["[object Boolean]"] = Ct["[object DataView]"] = Ct["[object Date]"] = Ct["[object Error]"] = Ct["[object Function]"] = Ct["[object Map]"] = Ct["[object Number]"] = Ct["[object Object]"] = Ct["[object RegExp]"] = Ct["[object Set]"] = Ct["[object String]"] = Ct["[object WeakMap]"] = false;
    var Ut = {};
    Ut["[object Arguments]"] = Ut["[object Array]"] = Ut["[object ArrayBuffer]"] = Ut["[object DataView]"] = Ut["[object Boolean]"] = Ut["[object Date]"] = Ut["[object Float32Array]"] = Ut["[object Float64Array]"] = Ut["[object Int8Array]"] = Ut["[object Int16Array]"] = Ut["[object Int32Array]"] = Ut["[object Map]"] = Ut["[object Number]"] = Ut["[object Object]"] = Ut["[object RegExp]"] = Ut["[object Set]"] = Ut["[object String]"] = Ut["[object Symbol]"] = Ut["[object Uint8Array]"] = Ut["[object Uint8ClampedArray]"] = Ut["[object Uint16Array]"] = Ut["[object Uint32Array]"] = true, 
    Ut["[object Error]"] = Ut["[object Function]"] = Ut["[object WeakMap]"] = false;
    var Mt, Dt = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    }, Tt = parseFloat, $t = parseInt, Ft = typeof global == "object" && global && global.Object === Object && global, Nt = typeof self == "object" && self && self.Object === Object && self, Pt = Ft || Nt || Function("return this")(), Zt = typeof exports == "object" && exports && !exports.nodeType && exports, qt = Zt && typeof module == "object" && module && !module.nodeType && module, Vt = qt && qt.exports === Zt, Kt = Vt && Ft.g;
    t: {
        try {
            Mt = Kt && Kt.f("util");
            break t;
        } catch (t) {}
        Mt = void 0;
    }
    var Gt = Mt && Mt.isArrayBuffer, Jt = Mt && Mt.isDate, Yt = Mt && Mt.isMap, Ht = Mt && Mt.isRegExp, Qt = Mt && Mt.isSet, Xt = Mt && Mt.isTypedArray, tn = j("length"), nn = w({
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
    }), rn = w({
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
    }), en = w({
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
    }), un = function w(kt) {
        function Et(t) {
            return ni.call(t);
        }
        function Ot(t) {
            if (au(t) && !Ko(t) && !(t instanceof Dt)) {
                if (t instanceof Mt) return t;
                if (Qu.call(t, "__wrapped__")) return ze(t);
            }
            return new Mt(t);
        }
        function Rt() {}
        function Mt(t, n) {
            this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!n, this.__index__ = 0, 
            this.__values__ = F;
        }
        function Dt(t) {
            this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, 
            this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [];
        }
        function Ft(t) {
            var n = -1, r = t ? t.length : 0;
            for (this.clear(); ++n < r; ) {
                var e = t[n];
                this.set(e[0], e[1]);
            }
        }
        function Nt(t) {
            var n = -1, r = t ? t.length : 0;
            for (this.clear(); ++n < r; ) {
                var e = t[n];
                this.set(e[0], e[1]);
            }
        }
        function Zt(t) {
            var n = -1, r = t ? t.length : 0;
            for (this.clear(); ++n < r; ) {
                var e = t[n];
                this.set(e[0], e[1]);
            }
        }
        function qt(t) {
            var n = -1, r = t ? t.length : 0;
            for (this.__data__ = new Zt(); ++n < r; ) this.add(t[n]);
        }
        function Kt(t) {
            this.size = (this.__data__ = new Nt(t)).size;
        }
        function tn(t, n) {
            var r, e = Ko(t) || nu(t) ? E(t.length, qu) : [], u = e.length, i = !!u;
            for (r in t) !n && !Qu.call(t, r) || i && ("length" == r || ge(r, u)) || e.push(r);
            return e;
        }
        function on(t, n, r, e) {
            return t === F || tu(t, Gu[r]) && !Qu.call(e, r) ? n : t;
        }
        function fn(t, n, r) {
            (r === F || tu(t[n], r)) && (typeof n != "number" || r !== F || n in t) || hn(t, n, r);
        }
        function cn(t, n, r) {
            var e = t[n];
            Qu.call(t, n) && tu(e, r) && (r !== F || n in t) || hn(t, n, r);
        }
        function an(t, n) {
            for (var r = t.length; r--; ) if (tu(t[r][0], n)) return r;
            return -1;
        }
        function ln(t, n, r, e) {
            return Ki(t, function(t, u, i) {
                n(e, t, r(t), i);
            }), e;
        }
        function sn(t, n) {
            return t && zr(n, mu(n), t);
        }
        function hn(t, n, r) {
            "__proto__" == n && fi ? fi(t, n, {
                configurable: true,
                enumerable: true,
                value: r,
                writable: true
            }) : t[n] = r;
        }
        function pn(t, n) {
            for (var r = -1, e = null == t, u = n.length, i = Du(u); ++r < u; ) i[r] = e ? F : ju(t, n[r]);
            return i;
        }
        function _n(t, n, r) {
            return t === t && (r !== F && (t = t <= r ? t : r), n !== F && (t = t >= n ? t : n)), 
            t;
        }
        function vn(t, n, r, e, i, o, f) {
            var c;
            if (e && (c = o ? e(t, i, o, f) : e(t)), c !== F) return c;
            if (!cu(t)) return t;
            if (i = Ko(t)) {
                if (c = he(t), !n) return Rr(t, c);
            } else {
                var a = Et(t), l = "[object Function]" == a || "[object GeneratorFunction]" == a;
                if (Jo(t)) return kr(t, n);
                if ("[object Object]" == a || "[object Arguments]" == a || l && !o) {
                    if (c = pe(l ? {} : t), !n) return Wr(t, sn(c, t));
                } else {
                    if (!Ut[a]) return o ? t : {};
                    c = _e(t, a, vn, n);
                }
            }
            if (f || (f = new Kt()), o = f.get(t)) return o;
            if (f.set(t, c), !i) var s = r ? In(t, mu, ro) : mu(t);
            return u(s || t, function(u, i) {
                s && (i = u, u = t[i]), cn(c, i, vn(u, n, r, e, i, t, f));
            }), c;
        }
        function gn(t) {
            var n = mu(t);
            return function(r) {
                return dn(r, t, n);
            };
        }
        function dn(t, n, r) {
            var e = r.length;
            if (null == t) return !e;
            for (t = Pu(t); e--; ) {
                var u = r[e], i = n[u], o = t[u];
                if (o === F && !(u in t) || !i(o)) return false;
            }
            return true;
        }
        function yn(t) {
            return cu(t) ? li(t) : {};
        }
        function bn(t, n, r) {
            if (typeof t != "function") throw new Vu("Expected a function");
            return oo(function() {
                t.apply(F, r);
            }, n);
        }
        function xn(t, n, r, e) {
            var u = -1, i = c, o = true, f = t.length, s = [], h = n.length;
            if (!f) return s;
            r && (n = l(n, S(r))), e ? (i = a, o = false) : 200 <= n.length && (i = R, o = false, 
            n = new qt(n));
            t: for (;++u < f; ) {
                var p = t[u], _ = r ? r(p) : p, p = e || 0 !== p ? p : 0;
                if (o && _ === _) {
                    for (var v = h; v--; ) if (n[v] === _) continue t;
                    s.push(p);
                } else i(n, _, e) || s.push(p);
            }
            return s;
        }
        function jn(t, n) {
            var r = true;
            return Ki(t, function(t, e, u) {
                return r = !!n(t, e, u);
            }), r;
        }
        function wn(t, n, r) {
            for (var e = -1, u = t.length; ++e < u; ) {
                var i = t[e], o = n(i);
                if (null != o && (f === F ? o === o && !pu(o) : r(o, f))) var f = o, c = i;
            }
            return c;
        }
        function mn(t, n) {
            var r = [];
            return Ki(t, function(t, e, u) {
                n(t, e, u) && r.push(t);
            }), r;
        }
        function An(t, n, r, e, u) {
            var i = -1, o = t.length;
            for (r || (r = ve), u || (u = []); ++i < o; ) {
                var f = t[i];
                0 < n && r(f) ? 1 < n ? An(f, n - 1, r, e, u) : s(u, f) : e || (u[u.length] = f);
            }
            return u;
        }
        function kn(t, n) {
            return t && Ji(t, n, mu);
        }
        function En(t, n) {
            return t && Yi(t, n, mu);
        }
        function On(t, n) {
            return f(n, function(n) {
                return iu(t[n]);
            });
        }
        function Sn(t, n) {
            n = ye(n, t) ? [ n ] : mr(n);
            for (var r = 0, e = n.length; null != t && r < e; ) t = t[Se(n[r++])];
            return r && r == e ? t : F;
        }
        function In(t, n, r) {
            return n = n(t), Ko(t) ? n : s(n, r(t));
        }
        function Rn(t, n) {
            return t > n;
        }
        function zn(t, n) {
            return null != t && Qu.call(t, n);
        }
        function Wn(t, n) {
            return null != t && n in Pu(t);
        }
        function Bn(t, n, r) {
            for (var e = r ? a : c, u = t[0].length, i = t.length, o = i, f = Du(i), s = 1 / 0, h = []; o--; ) {
                var p = t[o];
                o && n && (p = l(p, S(n))), s = ki(p.length, s), f[o] = !r && (n || 120 <= u && 120 <= p.length) ? new qt(o && p) : F;
            }
            var p = t[0], _ = -1, v = f[0];
            t: for (;++_ < u && h.length < s; ) {
                var g = p[_], d = n ? n(g) : g, g = r || 0 !== g ? g : 0;
                if (v ? !R(v, d) : !e(h, d, r)) {
                    for (o = i; --o; ) {
                        var y = f[o];
                        if (y ? !R(y, d) : !e(t[o], d, r)) continue t;
                    }
                    v && v.push(d), h.push(g);
                }
            }
            return h;
        }
        function Ln(t, n, r) {
            var e = {};
            return kn(t, function(t, u, i) {
                n(e, r(t), u, i);
            }), e;
        }
        function Cn(t, n, e) {
            return ye(n, t) || (n = mr(n), t = Ae(t, n), n = Ue(n)), n = null == t ? t : t[Se(n)], 
            null == n ? F : r(n, t, e);
        }
        function Un(t) {
            return au(t) && "[object ArrayBuffer]" == ni.call(t);
        }
        function Mn(t) {
            return au(t) && "[object Date]" == ni.call(t);
        }
        function Dn(t, n, r, e, u) {
            if (t === n) n = true; else if (null == t || null == n || !cu(t) && !au(n)) n = t !== t && n !== n; else t: {
                var i = Ko(t), o = Ko(n), f = "[object Array]", c = "[object Array]";
                i || (f = Et(t), f = "[object Arguments]" == f ? "[object Object]" : f), o || (c = Et(n), 
                c = "[object Arguments]" == c ? "[object Object]" : c);
                var a = "[object Object]" == f, o = "[object Object]" == c;
                if ((c = f == c) && !a) u || (u = new Kt()), n = i || tf(t) ? re(t, n, Dn, r, e, u) : ee(t, n, f, Dn, r, e, u); else {
                    if (!(2 & e) && (i = a && Qu.call(t, "__wrapped__"), f = o && Qu.call(n, "__wrapped__"), 
                    i || f)) {
                        t = i ? t.value() : t, n = f ? n.value() : n, u || (u = new Kt()), n = Dn(t, n, r, e, u);
                        break t;
                    }
                    if (c) n: if (u || (u = new Kt()), i = 2 & e, f = mu(t), o = f.length, c = mu(n).length, 
                    o == c || i) {
                        for (a = o; a--; ) {
                            var l = f[a];
                            if (!(i ? l in n : Qu.call(n, l))) {
                                n = false;
                                break n;
                            }
                        }
                        if ((c = u.get(t)) && u.get(n)) n = c == n; else {
                            c = true, u.set(t, n), u.set(n, t);
                            for (var s = i; ++a < o; ) {
                                var l = f[a], h = t[l], p = n[l];
                                if (r) var _ = i ? r(p, h, l, n, t, u) : r(h, p, l, t, n, u);
                                if (_ === F ? h !== p && !Dn(h, p, r, e, u) : !_) {
                                    c = false;
                                    break;
                                }
                                s || (s = "constructor" == l);
                            }
                            c && !s && (r = t.constructor, e = n.constructor, r != e && "constructor" in t && "constructor" in n && !(typeof r == "function" && r instanceof r && typeof e == "function" && e instanceof e) && (c = false)), 
                            u.delete(t), u.delete(n), n = c;
                        }
                    } else n = false; else n = false;
                }
            }
            return n;
        }
        function Tn(t) {
            return au(t) && "[object Map]" == Et(t);
        }
        function $n(t, n, r, e) {
            var u = r.length, i = u, o = !e;
            if (null == t) return !i;
            for (t = Pu(t); u--; ) {
                var f = r[u];
                if (o && f[2] ? f[1] !== t[f[0]] : !(f[0] in t)) return false;
            }
            for (;++u < i; ) {
                var f = r[u], c = f[0], a = t[c], l = f[1];
                if (o && f[2]) {
                    if (a === F && !(c in t)) return false;
                } else {
                    if (f = new Kt(), e) var s = e(a, l, c, t, n, f);
                    if (s === F ? !Dn(l, a, e, 3, f) : !s) return false;
                }
            }
            return true;
        }
        function Fn(t) {
            return !(!cu(t) || Yu && Yu in t) && (iu(t) ? ei : bt).test(Ie(t));
        }
        function Nn(t) {
            return cu(t) && "[object RegExp]" == ni.call(t);
        }
        function Pn(t) {
            return au(t) && "[object Set]" == Et(t);
        }
        function Zn(t) {
            return au(t) && fu(t.length) && !!Ct[ni.call(t)];
        }
        function qn(t) {
            return typeof t == "function" ? t : null == t ? zu : typeof t == "object" ? Ko(t) ? Hn(t[0], t[1]) : Yn(t) : Cu(t);
        }
        function Vn(t) {
            if (!xe(t)) return mi(t);
            var n, r = [];
            for (n in Pu(t)) Qu.call(t, n) && "constructor" != n && r.push(n);
            return r;
        }
        function Kn(t) {
            if (!cu(t)) {
                var n = [];
                if (null != t) for (var r in Pu(t)) n.push(r);
                return n;
            }
            r = xe(t);
            var e = [];
            for (n in t) ("constructor" != n || !r && Qu.call(t, n)) && e.push(n);
            return e;
        }
        function Gn(t, n) {
            return t < n;
        }
        function Jn(t, n) {
            var r = -1, e = ru(t) ? Du(t.length) : [];
            return Ki(t, function(t, u, i) {
                e[++r] = n(t, u, i);
            }), e;
        }
        function Yn(t) {
            var n = ae(t);
            return 1 == n.length && n[0][2] ? je(n[0][0], n[0][1]) : function(r) {
                return r === t || $n(r, t, n);
            };
        }
        function Hn(t, n) {
            return ye(t) && n === n && !cu(n) ? je(Se(t), n) : function(r) {
                var e = ju(r, t);
                return e === F && e === n ? wu(r, t) : Dn(n, e, F, 3);
            };
        }
        function Qn(t, n, r, e, i) {
            if (t !== n) {
                if (!Ko(n) && !tf(n)) var o = Kn(n);
                u(o || n, function(u, f) {
                    if (o && (f = u, u = n[f]), cu(u)) {
                        i || (i = new Kt());
                        var c = f, a = i, l = t[c], s = n[c], h = a.get(s);
                        if (h) fn(t, c, h); else {
                            var h = e ? e(l, s, c + "", t, n, a) : F, p = h === F;
                            p && (h = s, Ko(s) || tf(s) ? Ko(l) ? h = l : eu(l) ? h = Rr(l) : (p = false, h = vn(s, true)) : su(s) || nu(s) ? nu(l) ? h = bu(l) : !cu(l) || r && iu(l) ? (p = false, 
                            h = vn(s, true)) : h = l : p = false), p && (a.set(s, h), Qn(h, s, r, e, a), a.delete(s)), 
                            fn(t, c, h);
                        }
                    } else c = e ? e(t[f], u, f + "", t, n, i) : F, c === F && (c = u), fn(t, f, c);
                });
            }
        }
        function Xn(t, n) {
            var r = t.length;
            if (r) return n += 0 > n ? r : 0, ge(n, r) ? t[n] : F;
        }
        function tr(t, n, r) {
            var e = -1;
            return n = l(n.length ? n : [ zu ], S(fe())), t = Jn(t, function(t) {
                return {
                    a: l(n, function(n) {
                        return n(t);
                    }),
                    b: ++e,
                    c: t
                };
            }), A(t, function(t, n) {
                var e;
                t: {
                    e = -1;
                    for (var u = t.a, i = n.a, o = u.length, f = r.length; ++e < o; ) {
                        var c = Or(u[e], i[e]);
                        if (c) {
                            e = e >= f ? c : c * ("desc" == r[e] ? -1 : 1);
                            break t;
                        }
                    }
                    e = t.b - n.b;
                }
                return e;
            });
        }
        function nr(t, n) {
            return t = Pu(t), rr(t, n, function(n, r) {
                return r in t;
            });
        }
        function rr(t, n, r) {
            for (var e = -1, u = n.length, i = {}; ++e < u; ) {
                var o = n[e], f = t[o];
                r(f, o) && hn(i, o, f);
            }
            return i;
        }
        function er(t) {
            return function(n) {
                return Sn(n, t);
            };
        }
        function ur(t, n, r, e) {
            var u = e ? y : d, i = -1, o = n.length, f = t;
            for (t === n && (n = Rr(n)), r && (f = l(t, S(r))); ++i < o; ) for (var c = 0, a = n[i], a = r ? r(a) : a; -1 < (c = u(f, a, c, e)); ) f !== t && hi.call(f, c, 1), 
            hi.call(t, c, 1);
            return t;
        }
        function ir(t, n) {
            for (var r = t ? n.length : 0, e = r - 1; r--; ) {
                var u = n[r];
                if (r == e || u !== i) {
                    var i = u;
                    if (ge(u)) hi.call(t, u, 1); else if (ye(u, t)) delete t[Se(u)]; else {
                        var u = mr(u), o = Ae(t, u);
                        null != o && delete o[Se(Ue(u))];
                    }
                }
            }
        }
        function or(t, n) {
            return t + yi(Si() * (n - t + 1));
        }
        function fr(t, n) {
            var r = "";
            if (!t || 1 > n || 9007199254740991 < n) return r;
            do {
                n % 2 && (r += t), (n = yi(n / 2)) && (t += t);
            } while (n);
            return r;
        }
        function cr(t, n) {
            return fo(me(t, n, zu), t + "");
        }
        function ar(t, n, r, e) {
            if (!cu(t)) return t;
            n = ye(n, t) ? [ n ] : mr(n);
            for (var u = -1, i = n.length, o = i - 1, f = t; null != f && ++u < i; ) {
                var c = Se(n[u]), a = r;
                if (u != o) {
                    var l = f[c], a = e ? e(l, c, f) : F;
                    a === F && (a = cu(l) ? l : ge(n[u + 1]) ? [] : {});
                }
                cn(f, c, a), f = f[c];
            }
            return t;
        }
        function lr(t, n, r) {
            var e = -1, u = t.length;
            for (0 > n && (n = -n > u ? 0 : u + n), r = r > u ? u : r, 0 > r && (r += u), u = n > r ? 0 : r - n >>> 0, 
            n >>>= 0, r = Du(u); ++e < u; ) r[e] = t[e + n];
            return r;
        }
        function sr(t, n) {
            var r;
            return Ki(t, function(t, e, u) {
                return r = n(t, e, u), !r;
            }), !!r;
        }
        function hr(t, n, r) {
            var e = 0, u = t ? t.length : e;
            if (typeof n == "number" && n === n && 2147483647 >= u) {
                for (;e < u; ) {
                    var i = e + u >>> 1, o = t[i];
                    null !== o && !pu(o) && (r ? o <= n : o < n) ? e = i + 1 : u = i;
                }
                return u;
            }
            return pr(t, n, zu, r);
        }
        function pr(t, n, r, e) {
            n = r(n);
            for (var u = 0, i = t ? t.length : 0, o = n !== n, f = null === n, c = pu(n), a = n === F; u < i; ) {
                var l = yi((u + i) / 2), s = r(t[l]), h = s !== F, p = null === s, _ = s === s, v = pu(s);
                (o ? e || _ : a ? _ && (e || h) : f ? _ && h && (e || !p) : c ? _ && h && !p && (e || !v) : p || v ? 0 : e ? s <= n : s < n) ? u = l + 1 : i = l;
            }
            return ki(i, 4294967294);
        }
        function _r(t, n) {
            for (var r = -1, e = t.length, u = 0, i = []; ++r < e; ) {
                var o = t[r], f = n ? n(o) : o;
                if (!r || !tu(f, c)) {
                    var c = f;
                    i[u++] = 0 === o ? 0 : o;
                }
            }
            return i;
        }
        function vr(t) {
            return typeof t == "number" ? t : pu(t) ? P : +t;
        }
        function gr(t) {
            if (typeof t == "string") return t;
            if (pu(t)) return Vi ? Vi.call(t) : "";
            var n = t + "";
            return "0" == n && 1 / t == -N ? "-0" : n;
        }
        function dr(t, n, r) {
            var e = -1, u = c, i = t.length, o = true, f = [], l = f;
            if (r) o = false, u = a; else if (200 <= i) {
                if (u = n ? null : to(t)) return M(u);
                o = false, u = R, l = new qt();
            } else l = n ? [] : f;
            t: for (;++e < i; ) {
                var s = t[e], h = n ? n(s) : s, s = r || 0 !== s ? s : 0;
                if (o && h === h) {
                    for (var p = l.length; p--; ) if (l[p] === h) continue t;
                    n && l.push(h), f.push(s);
                } else u(l, h, r) || (l !== f && l.push(h), f.push(s));
            }
            return f;
        }
        function yr(t, n, r, e) {
            for (var u = t.length, i = e ? u : -1; (e ? i-- : ++i < u) && n(t[i], i, t); ) ;
            return r ? lr(t, e ? 0 : i, e ? i + 1 : u) : lr(t, e ? i + 1 : 0, e ? u : i);
        }
        function br(t, n) {
            var r = t;
            return r instanceof Dt && (r = r.value()), h(n, function(t, n) {
                return n.func.apply(n.thisArg, s([ t ], n.args));
            }, r);
        }
        function xr(t, n, r) {
            for (var e = -1, u = t.length; ++e < u; ) var i = i ? s(xn(i, t[e], n, r), xn(t[e], i, n, r)) : t[e];
            return i && i.length ? dr(i, n, r) : [];
        }
        function jr(t, n, r) {
            for (var e = -1, u = t.length, i = n.length, o = {}; ++e < u; ) r(o, t[e], e < i ? n[e] : F);
            return o;
        }
        function wr(t) {
            return eu(t) ? t : [];
        }
        function mr(t) {
            return Ko(t) ? t : co(t);
        }
        function Ar(t, n, r) {
            var e = t.length;
            return r = r === F ? e : r, !n && r >= e ? t : lr(t, n, r);
        }
        function kr(t, n) {
            if (n) return t.slice();
            var r = new t.constructor(t.length);
            return t.copy(r), r;
        }
        function Er(t) {
            var n = new t.constructor(t.byteLength);
            return new oi(n).set(new oi(t)), n;
        }
        function Or(t, n) {
            if (t !== n) {
                var r = t !== F, e = null === t, u = t === t, i = pu(t), o = n !== F, f = null === n, c = n === n, a = pu(n);
                if (!f && !a && !i && t > n || i && o && c && !f && !a || e && o && c || !r && c || !u) return 1;
                if (!e && !i && !a && t < n || a && r && u && !e && !i || f && r && u || !o && u || !c) return -1;
            }
            return 0;
        }
        function Sr(t, n, r, e) {
            var u = -1, i = t.length, o = r.length, f = -1, c = n.length, a = Ai(i - o, 0), l = Du(c + a);
            for (e = !e; ++f < c; ) l[f] = n[f];
            for (;++u < o; ) (e || u < i) && (l[r[u]] = t[u]);
            for (;a--; ) l[f++] = t[u++];
            return l;
        }
        function Ir(t, n, r, e) {
            var u = -1, i = t.length, o = -1, f = r.length, c = -1, a = n.length, l = Ai(i - f, 0), s = Du(l + a);
            for (e = !e; ++u < l; ) s[u] = t[u];
            for (l = u; ++c < a; ) s[l + c] = n[c];
            for (;++o < f; ) (e || u < i) && (s[l + r[o]] = t[u++]);
            return s;
        }
        function Rr(t, n) {
            var r = -1, e = t.length;
            for (n || (n = Du(e)); ++r < e; ) n[r] = t[r];
            return n;
        }
        function zr(t, n, r, e) {
            var u = !r;
            r || (r = {});
            for (var i = -1, o = n.length; ++i < o; ) {
                var f = n[i], c = e ? e(r[f], t[f], f, r, t) : F;
                c === F && (c = t[f]), u ? hn(r, f, c) : cn(r, f, c);
            }
            return r;
        }
        function Wr(t, n) {
            return zr(t, ro(t), n);
        }
        function Br(t, n) {
            return function(r, u) {
                var i = Ko(r) ? e : ln, o = n ? n() : {};
                return i(r, t, fe(u, 2), o);
            };
        }
        function Lr(t) {
            return cr(function(n, r) {
                var e = -1, u = r.length, i = 1 < u ? r[u - 1] : F, o = 2 < u ? r[2] : F, i = 3 < t.length && typeof i == "function" ? (u--, 
                i) : F;
                for (o && de(r[0], r[1], o) && (i = 3 > u ? F : i, u = 1), n = Pu(n); ++e < u; ) (o = r[e]) && t(n, o, e, i);
                return n;
            });
        }
        function Cr(t, n) {
            return function(r, e) {
                if (null == r) return r;
                if (!ru(r)) return t(r, e);
                for (var u = r.length, i = n ? u : -1, o = Pu(r); (n ? i-- : ++i < u) && false !== e(o[i], i, o); ) ;
                return r;
            };
        }
        function Ur(t) {
            return function(n, r, e) {
                var u = -1, i = Pu(n);
                e = e(n);
                for (var o = e.length; o--; ) {
                    var f = e[t ? o : ++u];
                    if (false === r(i[f], f, i)) break;
                }
                return n;
            };
        }
        function Mr(t, n, r) {
            function e() {
                return (this && this !== Pt && this instanceof e ? i : t).apply(u ? r : this, arguments);
            }
            var u = 1 & n, i = $r(t);
            return e;
        }
        function Dr(t) {
            return function(n) {
                n = xu(n);
                var r = Wt.test(n) ? $(n) : F, e = r ? r[0] : n.charAt(0);
                return n = r ? Ar(r, 1).join("") : n.slice(1), e[t]() + n;
            };
        }
        function Tr(t) {
            return function(n) {
                return h(Iu(Su(n).replace(St, "")), t, "");
            };
        }
        function $r(t) {
            return function() {
                var n = arguments;
                switch (n.length) {
                  case 0:
                    return new t();

                  case 1:
                    return new t(n[0]);

                  case 2:
                    return new t(n[0], n[1]);

                  case 3:
                    return new t(n[0], n[1], n[2]);

                  case 4:
                    return new t(n[0], n[1], n[2], n[3]);

                  case 5:
                    return new t(n[0], n[1], n[2], n[3], n[4]);

                  case 6:
                    return new t(n[0], n[1], n[2], n[3], n[4], n[5]);

                  case 7:
                    return new t(n[0], n[1], n[2], n[3], n[4], n[5], n[6]);
                }
                var r = yn(t.prototype), n = t.apply(r, n);
                return cu(n) ? n : r;
            };
        }
        function Fr(t, n, e) {
            function u() {
                for (var o = arguments.length, f = Du(o), c = o, a = oe(u); c--; ) f[c] = arguments[c];
                return c = 3 > o && f[0] !== a && f[o - 1] !== a ? [] : U(f, a), o -= c.length, 
                o < e ? Qr(t, n, Zr, u.placeholder, F, f, c, F, F, e - o) : r(this && this !== Pt && this instanceof u ? i : t, this, f);
            }
            var i = $r(t);
            return u;
        }
        function Nr(t) {
            return function(n, r, e) {
                var u = Pu(n);
                if (!ru(n)) {
                    var i = fe(r, 3);
                    n = mu(n), r = function(t) {
                        return i(u[t], t, u);
                    };
                }
                return r = t(n, r, e), -1 < r ? u[i ? n[r] : r] : F;
            };
        }
        function Pr(t) {
            return ue(function(n) {
                var r = n.length, e = r, u = Mt.prototype.thru;
                for (t && n.reverse(); e--; ) {
                    var i = n[e];
                    if (typeof i != "function") throw new Vu("Expected a function");
                    if (u && !o && "wrapper" == ie(i)) var o = new Mt([], true);
                }
                for (e = o ? e : r; ++e < r; ) var i = n[e], u = ie(i), f = "wrapper" == u ? no(i) : F, o = f && be(f[0]) && 424 == f[1] && !f[4].length && 1 == f[9] ? o[ie(f[0])].apply(o, f[3]) : 1 == i.length && be(i) ? o[u]() : o.thru(i);
                return function() {
                    var t = arguments, e = t[0];
                    if (o && 1 == t.length && Ko(e) && 200 <= e.length) return o.plant(e).value();
                    for (var u = 0, t = r ? n[u].apply(this, t) : e; ++u < r; ) t = n[u].call(this, t);
                    return t;
                };
            });
        }
        function Zr(t, n, r, e, u, i, o, f, c, a) {
            function l() {
                for (var d = arguments.length, y = Du(d), b = d; b--; ) y[b] = arguments[b];
                if (_) {
                    var x, j = oe(l), b = y.length;
                    for (x = 0; b--; ) y[b] === j && ++x;
                }
                if (e && (y = Sr(y, e, u, _)), i && (y = Ir(y, i, o, _)), d -= x, _ && d < a) return j = U(y, j), 
                Qr(t, n, Zr, l.placeholder, r, y, j, f, c, a - d);
                if (j = h ? r : this, b = p ? j[t] : t, d = y.length, f) {
                    x = y.length;
                    for (var w = ki(f.length, x), m = Rr(y); w--; ) {
                        var A = f[w];
                        y[w] = ge(A, x) ? m[A] : F;
                    }
                } else v && 1 < d && y.reverse();
                return s && c < d && (y.length = c), this && this !== Pt && this instanceof l && (b = g || $r(b)), 
                b.apply(j, y);
            }
            var s = 128 & n, h = 1 & n, p = 2 & n, _ = 24 & n, v = 512 & n, g = p ? F : $r(t);
            return l;
        }
        function qr(t, n) {
            return function(r, e) {
                return Ln(r, t, n(e));
            };
        }
        function Vr(t, n) {
            return function(r, e) {
                var u;
                if (r === F && e === F) return n;
                if (r !== F && (u = r), e !== F) {
                    if (u === F) return e;
                    typeof r == "string" || typeof e == "string" ? (r = gr(r), e = gr(e)) : (r = vr(r), 
                    e = vr(e)), u = t(r, e);
                }
                return u;
            };
        }
        function Kr(t) {
            return ue(function(n) {
                return n = l(n, S(fe())), cr(function(e) {
                    var u = this;
                    return t(n, function(t) {
                        return r(t, u, e);
                    });
                });
            });
        }
        function Gr(t, n) {
            n = n === F ? " " : gr(n);
            var r = n.length;
            return 2 > r ? r ? fr(n, t) : n : (r = fr(n, di(t / T(n))), Wt.test(n) ? Ar($(r), 0, t).join("") : r.slice(0, t));
        }
        function Jr(t, n, e, u) {
            function i() {
                for (var n = -1, c = arguments.length, a = -1, l = u.length, s = Du(l + c), h = this && this !== Pt && this instanceof i ? f : t; ++a < l; ) s[a] = u[a];
                for (;c--; ) s[a++] = arguments[++n];
                return r(h, o ? e : this, s);
            }
            var o = 1 & n, f = $r(t);
            return i;
        }
        function Yr(t) {
            return function(n, r, e) {
                e && typeof e != "number" && de(n, r, e) && (r = e = F), n = vu(n), r === F ? (r = n, 
                n = 0) : r = vu(r), e = e === F ? n < r ? 1 : -1 : vu(e);
                var u = -1;
                r = Ai(di((r - n) / (e || 1)), 0);
                for (var i = Du(r); r--; ) i[t ? r : ++u] = n, n += e;
                return i;
            };
        }
        function Hr(t) {
            return function(n, r) {
                return typeof n == "string" && typeof r == "string" || (n = yu(n), r = yu(r)), t(n, r);
            };
        }
        function Qr(t, n, r, e, u, i, o, f, c, a) {
            var l = 8 & n, s = l ? o : F;
            o = l ? F : o;
            var h = l ? i : F;
            return i = l ? F : i, n = (n | (l ? 32 : 64)) & ~(l ? 64 : 32), 4 & n || (n &= -4), 
            u = [ t, n, u, h, s, i, o, f, c, a ], r = r.apply(F, u), be(t) && io(r, u), r.placeholder = e, 
            ke(r, t, n);
        }
        function Xr(t) {
            var n = Nu[t];
            return function(t, r) {
                if (t = yu(t), r = ki(gu(r), 292)) {
                    var e = (xu(t) + "e").split("e"), e = n(e[0] + "e" + (+e[1] + r)), e = (xu(e) + "e").split("e");
                    return +(e[0] + "e" + (+e[1] - r));
                }
                return n(t);
            };
        }
        function te(t) {
            return function(n) {
                var r = Et(n);
                return "[object Map]" == r ? L(n) : "[object Set]" == r ? D(n) : O(n, t(n));
            };
        }
        function ne(t, n, r, e, u, i, o, f) {
            var c = 2 & n;
            if (!c && typeof t != "function") throw new Vu("Expected a function");
            var a = e ? e.length : 0;
            if (a || (n &= -97, e = u = F), o = o === F ? o : Ai(gu(o), 0), f = f === F ? f : gu(f), 
            a -= u ? u.length : 0, 64 & n) {
                var l = e, s = u;
                e = u = F;
            }
            var h = c ? F : no(t);
            return i = [ t, n, r, e, u, l, s, i, o, f ], h && (r = i[1], t = h[1], n = r | t, 
            e = 128 == t && 8 == r || 128 == t && 256 == r && i[7].length <= h[8] || 384 == t && h[7].length <= h[8] && 8 == r, 
            131 > n || e) && (1 & t && (i[2] = h[2], n |= 1 & r ? 0 : 4), (r = h[3]) && (e = i[3], 
            i[3] = e ? Sr(e, r, h[4]) : r, i[4] = e ? U(i[3], "__lodash_placeholder__") : h[4]), 
            (r = h[5]) && (e = i[5], i[5] = e ? Ir(e, r, h[6]) : r, i[6] = e ? U(i[5], "__lodash_placeholder__") : h[6]), 
            (r = h[7]) && (i[7] = r), 128 & t && (i[8] = null == i[8] ? h[8] : ki(i[8], h[8])), 
            null == i[9] && (i[9] = h[9]), i[0] = h[0], i[1] = n), t = i[0], n = i[1], r = i[2], 
            e = i[3], u = i[4], f = i[9] = null == i[9] ? c ? 0 : t.length : Ai(i[9] - a, 0), 
            !f && 24 & n && (n &= -25), ke((h ? Hi : io)(n && 1 != n ? 8 == n || 16 == n ? Fr(t, n, f) : 32 != n && 33 != n || u.length ? Zr.apply(F, i) : Jr(t, n, r, e) : Mr(t, n, r), i), t, n);
        }
        function re(t, n, r, e, u, i) {
            var o = 2 & u, f = t.length, c = n.length;
            if (f != c && !(o && c > f)) return false;
            if ((c = i.get(t)) && i.get(n)) return c == n;
            var c = -1, a = true, l = 1 & u ? new qt() : F;
            for (i.set(t, n), i.set(n, t); ++c < f; ) {
                var s = t[c], h = n[c];
                if (e) var p = o ? e(h, s, c, n, t, i) : e(s, h, c, t, n, i);
                if (p !== F) {
                    if (p) continue;
                    a = false;
                    break;
                }
                if (l) {
                    if (!_(n, function(t, n) {
                        if (!R(l, n) && (s === t || r(s, t, e, u, i))) return l.push(n);
                    })) {
                        a = false;
                        break;
                    }
                } else if (s !== h && !r(s, h, e, u, i)) {
                    a = false;
                    break;
                }
            }
            return i.delete(t), i.delete(n), a;
        }
        function ee(t, n, r, e, u, i, o) {
            switch (r) {
              case "[object DataView]":
                if (t.byteLength != n.byteLength || t.byteOffset != n.byteOffset) break;
                t = t.buffer, n = n.buffer;

              case "[object ArrayBuffer]":
                if (t.byteLength != n.byteLength || !e(new oi(t), new oi(n))) break;
                return true;

              case "[object Boolean]":
              case "[object Date]":
              case "[object Number]":
                return tu(+t, +n);

              case "[object Error]":
                return t.name == n.name && t.message == n.message;

              case "[object RegExp]":
              case "[object String]":
                return t == n + "";

              case "[object Map]":
                var f = L;

              case "[object Set]":
                if (f || (f = M), t.size != n.size && !(2 & i)) break;
                return (r = o.get(t)) ? r == n : (i |= 1, o.set(t, n), n = re(f(t), f(n), e, u, i, o), 
                o.delete(t), n);

              case "[object Symbol]":
                if (qi) return qi.call(t) == qi.call(n);
            }
            return false;
        }
        function ue(t) {
            return fo(me(t, F, Le), t + "");
        }
        function ie(t) {
            for (var n = t.name + "", r = Di[n], e = Qu.call(Di, n) ? r.length : 0; e--; ) {
                var u = r[e], i = u.func;
                if (null == i || i == t) return u.name;
            }
            return n;
        }
        function oe(t) {
            return (Qu.call(Ot, "placeholder") ? Ot : t).placeholder;
        }
        function fe() {
            var t = Ot.iteratee || Wu, t = t === Wu ? qn : t;
            return arguments.length ? t(arguments[0], arguments[1]) : t;
        }
        function ce(t, n) {
            var r = t.__data__, e = typeof n;
            return ("string" == e || "number" == e || "symbol" == e || "boolean" == e ? "__proto__" !== n : null === n) ? r[typeof n == "string" ? "string" : "hash"] : r.map;
        }
        function ae(t) {
            for (var n = mu(t), r = n.length; r--; ) {
                var e = n[r], u = t[e];
                n[r] = [ e, u, u === u && !cu(u) ];
            }
            return n;
        }
        function le(t, n) {
            var r = null == t ? F : t[n];
            return Fn(r) ? r : F;
        }
        function se(t, n, r) {
            n = ye(n, t) ? [ n ] : mr(n);
            for (var e = -1, u = n.length, i = false; ++e < u; ) {
                var o = Se(n[e]);
                if (!(i = null != t && r(t, o))) break;
                t = t[o];
            }
            return i || ++e != u ? i : (u = t ? t.length : 0, !!u && fu(u) && ge(o, u) && (Ko(t) || nu(t)));
        }
        function he(t) {
            var n = t.length, r = t.constructor(n);
            return n && "string" == typeof t[0] && Qu.call(t, "index") && (r.index = t.index, 
            r.input = t.input), r;
        }
        function pe(t) {
            return typeof t.constructor != "function" || xe(t) ? {} : yn(ci(t));
        }
        function _e(r, e, u, i) {
            var o = r.constructor;
            switch (e) {
              case "[object ArrayBuffer]":
                return Er(r);

              case "[object Boolean]":
              case "[object Date]":
                return new o(+r);

              case "[object DataView]":
                return e = i ? Er(r.buffer) : r.buffer, new r.constructor(e, r.byteOffset, r.byteLength);

              case "[object Float32Array]":
              case "[object Float64Array]":
              case "[object Int8Array]":
              case "[object Int16Array]":
              case "[object Int32Array]":
              case "[object Uint8Array]":
              case "[object Uint8ClampedArray]":
              case "[object Uint16Array]":
              case "[object Uint32Array]":
                return e = i ? Er(r.buffer) : r.buffer, new r.constructor(e, r.byteOffset, r.length);

              case "[object Map]":
                return e = i ? u(L(r), true) : L(r), h(e, t, new r.constructor());

              case "[object Number]":
              case "[object String]":
                return new o(r);

              case "[object RegExp]":
                return e = new r.constructor(r.source, gt.exec(r)), e.lastIndex = r.lastIndex, e;

              case "[object Set]":
                return e = i ? u(M(r), true) : M(r), h(e, n, new r.constructor());

              case "[object Symbol]":
                return qi ? Pu(qi.call(r)) : {};
            }
        }
        function ve(t) {
            return Ko(t) || nu(t) || !!(pi && t && t[pi]);
        }
        function ge(t, n) {
            return n = null == n ? 9007199254740991 : n, !!n && (typeof t == "number" || jt.test(t)) && -1 < t && 0 == t % 1 && t < n;
        }
        function de(t, n, r) {
            if (!cu(r)) return false;
            var e = typeof n;
            return !!("number" == e ? ru(r) && ge(n, r.length) : "string" == e && n in r) && tu(r[n], t);
        }
        function ye(t, n) {
            if (Ko(t)) return false;
            var r = typeof t;
            return !("number" != r && "symbol" != r && "boolean" != r && null != t && !pu(t)) || (rt.test(t) || !nt.test(t) || null != n && t in Pu(n));
        }
        function be(t) {
            var n = ie(t), r = Ot[n];
            return typeof r == "function" && n in Dt.prototype && (t === r || (n = no(r), !!n && t === n[0]));
        }
        function xe(t) {
            var n = t && t.constructor;
            return t === (typeof n == "function" && n.prototype || Gu);
        }
        function je(t, n) {
            return function(r) {
                return null != r && (r[t] === n && (n !== F || t in Pu(r)));
            };
        }
        function we(t, n, r, e, u, i) {
            return cu(t) && cu(n) && (i.set(n, t), Qn(t, n, F, we, i), i.delete(n)), t;
        }
        function me(t, n, e) {
            return n = Ai(n === F ? t.length - 1 : n, 0), function() {
                for (var u = arguments, i = -1, o = Ai(u.length - n, 0), f = Du(o); ++i < o; ) f[i] = u[n + i];
                for (i = -1, o = Du(n + 1); ++i < n; ) o[i] = u[i];
                return o[n] = e(f), r(t, this, o);
            };
        }
        function Ae(t, n) {
            return 1 == n.length ? t : Sn(t, lr(n, 0, -1));
        }
        function ke(t, n, r) {
            var e = n + "";
            n = fo;
            var u, i = Re;
            return u = (u = e.match(st)) ? u[1].split(ht) : [], r = i(u, r), (i = r.length) && (u = i - 1, 
            r[u] = (1 < i ? "& " : "") + r[u], r = r.join(2 < i ? ", " : " "), e = e.replace(lt, "{\n/* [wrapped with " + r + "] */\n")), 
            n(t, e);
        }
        function Ee(t) {
            var n = 0, r = 0;
            return function() {
                var e = Ei(), u = 16 - (e - r);
                if (r = e, 0 < u) {
                    if (500 <= ++n) return arguments[0];
                } else n = 0;
                return t.apply(F, arguments);
            };
        }
        function Oe(t) {
            for (var n = -1, r = t.length, e = r - 1; ++n < r; ) {
                var u = or(n, e), i = t[u];
                t[u] = t[n], t[n] = i;
            }
            return t;
        }
        function Se(t) {
            if (typeof t == "string" || pu(t)) return t;
            var n = t + "";
            return "0" == n && 1 / t == -N ? "-0" : n;
        }
        function Ie(t) {
            if (null != t) {
                try {
                    return Hu.call(t);
                } catch (t) {}
                return t + "";
            }
            return "";
        }
        function Re(t, n) {
            return u(Z, function(r) {
                var e = "_." + r[0];
                n & r[1] && !c(t, e) && t.push(e);
            }), t.sort();
        }
        function ze(t) {
            if (t instanceof Dt) return t.clone();
            var n = new Mt(t.__wrapped__, t.__chain__);
            return n.__actions__ = Rr(t.__actions__), n.__index__ = t.__index__, n.__values__ = t.__values__, 
            n;
        }
        function We(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (r = null == r ? 0 : gu(r), 0 > r && (r = Ai(e + r, 0)), g(t, fe(n, 3), r)) : -1;
        }
        function Be(t, n, r) {
            var e = t ? t.length : 0;
            if (!e) return -1;
            var u = e - 1;
            return r !== F && (u = gu(r), u = 0 > r ? Ai(e + u, 0) : ki(u, e - 1)), g(t, fe(n, 3), u, true);
        }
        function Le(t) {
            return t && t.length ? An(t, 1) : [];
        }
        function Ce(t) {
            return t && t.length ? t[0] : F;
        }
        function Ue(t) {
            var n = t ? t.length : 0;
            return n ? t[n - 1] : F;
        }
        function Me(t, n) {
            return t && t.length && n && n.length ? ur(t, n) : t;
        }
        function De(t) {
            return t ? Ii.call(t) : t;
        }
        function Te(t) {
            if (!t || !t.length) return [];
            var n = 0;
            return t = f(t, function(t) {
                if (eu(t)) return n = Ai(t.length, n), true;
            }), E(n, function(n) {
                return l(t, j(n));
            });
        }
        function $e(t, n) {
            if (!t || !t.length) return [];
            var e = Te(t);
            return null == n ? e : l(e, function(t) {
                return r(n, F, t);
            });
        }
        function Fe(t) {
            return t = Ot(t), t.__chain__ = true, t;
        }
        function Ne(t, n) {
            return n(t);
        }
        function Pe() {
            return this;
        }
        function Ze(t, n) {
            return (Ko(t) ? u : Ki)(t, fe(n, 3));
        }
        function qe(t, n) {
            return (Ko(t) ? i : Gi)(t, fe(n, 3));
        }
        function Ve(t, n) {
            return (Ko(t) ? l : Jn)(t, fe(n, 3));
        }
        function Ke(t, n, r) {
            return n = r ? F : n, n = t && null == n ? t.length : n, ne(t, 128, F, F, F, F, n);
        }
        function Ge(t, n) {
            var r;
            if (typeof n != "function") throw new Vu("Expected a function");
            return t = gu(t), function() {
                return 0 < --t && (r = n.apply(this, arguments)), 1 >= t && (n = F), r;
            };
        }
        function Je(t, n, r) {
            return n = r ? F : n, t = ne(t, 8, F, F, F, F, F, n), t.placeholder = Je.placeholder, 
            t;
        }
        function Ye(t, n, r) {
            return n = r ? F : n, t = ne(t, 16, F, F, F, F, F, n), t.placeholder = Ye.placeholder, 
            t;
        }
        function He(t, n, r) {
            function e(n) {
                var r = c, e = a;
                return c = a = F, _ = n, s = t.apply(e, r);
            }
            function u(t) {
                var r = t - p;
                return t -= _, p === F || r >= n || 0 > r || g && t >= l;
            }
            function i() {
                var t = Uo();
                if (u(t)) return o(t);
                var r, e = oo;
                r = t - _, t = n - (t - p), r = g ? ki(t, l - r) : t, h = e(i, r);
            }
            function o(t) {
                return h = F, d && c ? e(t) : (c = a = F, s);
            }
            function f() {
                var t = Uo(), r = u(t);
                if (c = arguments, a = this, p = t, r) {
                    if (h === F) return _ = t = p, h = oo(i, n), v ? e(t) : s;
                    if (g) return h = oo(i, n), e(p);
                }
                return h === F && (h = oo(i, n)), s;
            }
            var c, a, l, s, h, p, _ = 0, v = false, g = false, d = true;
            if (typeof t != "function") throw new Vu("Expected a function");
            return n = yu(n) || 0, cu(r) && (v = !!r.leading, l = (g = "maxWait" in r) ? Ai(yu(r.maxWait) || 0, n) : l, 
            d = "trailing" in r ? !!r.trailing : d), f.cancel = function() {
                h !== F && Xi(h), _ = 0, c = p = a = h = F;
            }, f.flush = function() {
                return h === F ? s : o(Uo());
            }, f;
        }
        function Qe(t, n) {
            function r() {
                var e = arguments, u = n ? n.apply(this, e) : e[0], i = r.cache;
                return i.has(u) ? i.get(u) : (e = t.apply(this, e), r.cache = i.set(u, e) || i, 
                e);
            }
            if (typeof t != "function" || n && typeof n != "function") throw new Vu("Expected a function");
            return r.cache = new (Qe.Cache || Zt)(), r;
        }
        function Xe(t) {
            if (typeof t != "function") throw new Vu("Expected a function");
            return function() {
                var n = arguments;
                switch (n.length) {
                  case 0:
                    return !t.call(this);

                  case 1:
                    return !t.call(this, n[0]);

                  case 2:
                    return !t.call(this, n[0], n[1]);

                  case 3:
                    return !t.call(this, n[0], n[1], n[2]);
                }
                return !t.apply(this, n);
            };
        }
        function tu(t, n) {
            return t === n || t !== t && n !== n;
        }
        function nu(t) {
            return eu(t) && Qu.call(t, "callee") && (!si.call(t, "callee") || "[object Arguments]" == ni.call(t));
        }
        function ru(t) {
            return null != t && fu(t.length) && !iu(t);
        }
        function eu(t) {
            return au(t) && ru(t);
        }
        function uu(t) {
            return !!au(t) && ("[object Error]" == ni.call(t) || typeof t.message == "string" && typeof t.name == "string");
        }
        function iu(t) {
            return t = cu(t) ? ni.call(t) : "", "[object Function]" == t || "[object GeneratorFunction]" == t;
        }
        function ou(t) {
            return typeof t == "number" && t == gu(t);
        }
        function fu(t) {
            return typeof t == "number" && -1 < t && 0 == t % 1 && 9007199254740991 >= t;
        }
        function cu(t) {
            var n = typeof t;
            return null != t && ("object" == n || "function" == n);
        }
        function au(t) {
            return null != t && typeof t == "object";
        }
        function lu(t) {
            return typeof t == "number" || au(t) && "[object Number]" == ni.call(t);
        }
        function su(t) {
            return !(!au(t) || "[object Object]" != ni.call(t)) && (t = ci(t), null === t || (t = Qu.call(t, "constructor") && t.constructor, 
            typeof t == "function" && t instanceof t && Hu.call(t) == ti));
        }
        function hu(t) {
            return typeof t == "string" || !Ko(t) && au(t) && "[object String]" == ni.call(t);
        }
        function pu(t) {
            return typeof t == "symbol" || au(t) && "[object Symbol]" == ni.call(t);
        }
        function _u(t) {
            if (!t) return [];
            if (ru(t)) return hu(t) ? $(t) : Rr(t);
            if (ai && t[ai]) {
                t = t[ai]();
                for (var n, r = []; !(n = t.next()).done; ) r.push(n.value);
                return r;
            }
            return n = Et(t), ("[object Map]" == n ? L : "[object Set]" == n ? M : Eu)(t);
        }
        function vu(t) {
            return t ? (t = yu(t), t === N || t === -N ? 1.7976931348623157e308 * (0 > t ? -1 : 1) : t === t ? t : 0) : 0 === t ? t : 0;
        }
        function gu(t) {
            t = vu(t);
            var n = t % 1;
            return t === t ? n ? t - n : t : 0;
        }
        function du(t) {
            return t ? _n(gu(t), 0, 4294967295) : 0;
        }
        function yu(t) {
            if (typeof t == "number") return t;
            if (pu(t)) return P;
            if (cu(t) && (t = typeof t.valueOf == "function" ? t.valueOf() : t, t = cu(t) ? t + "" : t), 
            typeof t != "string") return 0 === t ? t : +t;
            t = t.replace(ft, "");
            var n = yt.test(t);
            return n || xt.test(t) ? $t(t.slice(2), n ? 2 : 8) : dt.test(t) ? P : +t;
        }
        function bu(t) {
            return zr(t, Au(t));
        }
        function xu(t) {
            return null == t ? "" : gr(t);
        }
        function ju(t, n, r) {
            return t = null == t ? F : Sn(t, n), t === F ? r : t;
        }
        function wu(t, n) {
            return null != t && se(t, n, Wn);
        }
        function mu(t) {
            return ru(t) ? tn(t) : Vn(t);
        }
        function Au(t) {
            return ru(t) ? tn(t, true) : Kn(t);
        }
        function ku(t, n) {
            return null == t ? {} : rr(t, In(t, Au, eo), fe(n));
        }
        function Eu(t) {
            return t ? I(t, mu(t)) : [];
        }
        function Ou(t) {
            return Of(xu(t).toLowerCase());
        }
        function Su(t) {
            return (t = xu(t)) && t.replace(wt, nn).replace(It, "");
        }
        function Iu(t, n, r) {
            return t = xu(t), n = r ? F : n, n === F ? Bt.test(t) ? t.match(zt) || [] : t.match(pt) || [] : t.match(n) || [];
        }
        function Ru(t) {
            return function() {
                return t;
            };
        }
        function zu(t) {
            return t;
        }
        function Wu(t) {
            return qn(typeof t == "function" ? t : vn(t, true));
        }
        function Bu(t, n, r) {
            var e = mu(n), i = On(n, e);
            null != r || cu(n) && (i.length || !e.length) || (r = n, n = t, t = this, i = On(n, mu(n)));
            var o = !(cu(r) && "chain" in r && !r.chain), f = iu(t);
            return u(i, function(r) {
                var e = n[r];
                t[r] = e, f && (t.prototype[r] = function() {
                    var n = this.__chain__;
                    if (o || n) {
                        var r = t(this.__wrapped__);
                        return (r.__actions__ = Rr(this.__actions__)).push({
                            func: e,
                            args: arguments,
                            thisArg: t
                        }), r.__chain__ = n, r;
                    }
                    return e.apply(t, s([ this.value() ], arguments));
                });
            }), t;
        }
        function Lu() {}
        function Cu(t) {
            return ye(t) ? j(Se(t)) : er(t);
        }
        function Uu() {
            return [];
        }
        function Mu() {
            return false;
        }
        kt = kt ? un.defaults(Pt.Object(), kt, un.pick(Pt, Lt)) : Pt;
        var Du = kt.Array, Tu = kt.Date, $u = kt.Error, Fu = kt.Function, Nu = kt.Math, Pu = kt.Object, Zu = kt.RegExp, qu = kt.String, Vu = kt.TypeError, Ku = Du.prototype, Gu = Pu.prototype, Ju = kt["__core-js_shared__"], Yu = function() {
            var t = /[^.]+$/.exec(Ju && Ju.keys && Ju.keys.IE_PROTO || "");
            return t ? "Symbol(src)_1." + t : "";
        }(), Hu = Fu.prototype.toString, Qu = Gu.hasOwnProperty, Xu = 0, ti = Hu.call(Pu), ni = Gu.toString, ri = Pt._, ei = Zu("^" + Hu.call(Qu).replace(it, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), ui = Vt ? kt.Buffer : F, ii = kt.Symbol, oi = kt.Uint8Array, fi = Pu.defineProperty, ci = C(Pu.getPrototypeOf, Pu), ai = ii ? ii.iterator : F, li = Pu.create, si = Gu.propertyIsEnumerable, hi = Ku.splice, pi = ii ? ii.isConcatSpreadable : F, _i = kt.clearTimeout !== Pt.clearTimeout && kt.clearTimeout, vi = Tu && Tu.now !== Pt.Date.now && Tu.now, gi = kt.setTimeout !== Pt.setTimeout && kt.setTimeout, di = Nu.ceil, yi = Nu.floor, bi = Pu.getOwnPropertySymbols, xi = ui ? ui.isBuffer : F, ji = kt.isFinite, wi = Ku.join, mi = C(Pu.keys, Pu), Ai = Nu.max, ki = Nu.min, Ei = Tu.now, Oi = kt.parseInt, Si = Nu.random, Ii = Ku.reverse, Ri = le(kt, "DataView"), zi = le(kt, "Map"), Wi = le(kt, "Promise"), Bi = le(kt, "Set"), Li = le(kt, "WeakMap"), Ci = le(Pu, "create"), Ui = le(Pu, "defineProperty"), Mi = Li && new Li(), Di = {}, Ti = Ie(Ri), $i = Ie(zi), Fi = Ie(Wi), Ni = Ie(Bi), Pi = Ie(Li), Zi = ii ? ii.prototype : F, qi = Zi ? Zi.valueOf : F, Vi = Zi ? Zi.toString : F;
        Ot.templateSettings = {
            escape: Q,
            evaluate: X,
            interpolate: tt,
            variable: "",
            imports: {
                _: Ot
            }
        }, Ot.prototype = Rt.prototype, Ot.prototype.constructor = Ot, Mt.prototype = yn(Rt.prototype), 
        Mt.prototype.constructor = Mt, Dt.prototype = yn(Rt.prototype), Dt.prototype.constructor = Dt, 
        Ft.prototype.clear = function() {
            this.__data__ = Ci ? Ci(null) : {}, this.size = 0;
        }, Ft.prototype.delete = function(t) {
            return t = this.has(t) && delete this.__data__[t], this.size -= t ? 1 : 0, t;
        }, Ft.prototype.get = function(t) {
            var n = this.__data__;
            return Ci ? (t = n[t], "__lodash_hash_undefined__" === t ? F : t) : Qu.call(n, t) ? n[t] : F;
        }, Ft.prototype.has = function(t) {
            var n = this.__data__;
            return Ci ? n[t] !== F : Qu.call(n, t);
        }, Ft.prototype.set = function(t, n) {
            var r = this.__data__;
            return this.size += this.has(t) ? 0 : 1, r[t] = Ci && n === F ? "__lodash_hash_undefined__" : n, 
            this;
        }, Nt.prototype.clear = function() {
            this.__data__ = [], this.size = 0;
        }, Nt.prototype.delete = function(t) {
            var n = this.__data__;
            return t = an(n, t), !(0 > t) && (t == n.length - 1 ? n.pop() : hi.call(n, t, 1), 
            --this.size, true);
        }, Nt.prototype.get = function(t) {
            var n = this.__data__;
            return t = an(n, t), 0 > t ? F : n[t][1];
        }, Nt.prototype.has = function(t) {
            return -1 < an(this.__data__, t);
        }, Nt.prototype.set = function(t, n) {
            var r = this.__data__, e = an(r, t);
            return 0 > e ? (++this.size, r.push([ t, n ])) : r[e][1] = n, this;
        }, Zt.prototype.clear = function() {
            this.size = 0, this.__data__ = {
                hash: new Ft(),
                map: new (zi || Nt)(),
                string: new Ft()
            };
        }, Zt.prototype.delete = function(t) {
            return t = ce(this, t).delete(t), this.size -= t ? 1 : 0, t;
        }, Zt.prototype.get = function(t) {
            return ce(this, t).get(t);
        }, Zt.prototype.has = function(t) {
            return ce(this, t).has(t);
        }, Zt.prototype.set = function(t, n) {
            var r = ce(this, t), e = r.size;
            return r.set(t, n), this.size += r.size == e ? 0 : 1, this;
        }, qt.prototype.add = qt.prototype.push = function(t) {
            return this.__data__.set(t, "__lodash_hash_undefined__"), this;
        }, qt.prototype.has = function(t) {
            return this.__data__.has(t);
        }, Kt.prototype.clear = function() {
            this.__data__ = new Nt(), this.size = 0;
        }, Kt.prototype.delete = function(t) {
            var n = this.__data__;
            return t = n.delete(t), this.size = n.size, t;
        }, Kt.prototype.get = function(t) {
            return this.__data__.get(t);
        }, Kt.prototype.has = function(t) {
            return this.__data__.has(t);
        }, Kt.prototype.set = function(t, n) {
            var r = this.__data__;
            if (r instanceof Nt) {
                var e = r.__data__;
                if (!zi || 199 > e.length) return e.push([ t, n ]), this.size = ++r.size, this;
                r = this.__data__ = new Zt(e);
            }
            return r.set(t, n), this.size = r.size, this;
        };
        var Ki = Cr(kn), Gi = Cr(En, true), Ji = Ur(), Yi = Ur(true), Hi = Mi ? function(t, n) {
            return Mi.set(t, n), t;
        } : zu, Qi = Ui ? function(t, n) {
            return Ui(t, "toString", {
                configurable: true,
                enumerable: false,
                value: Ru(n),
                writable: true
            });
        } : zu, Xi = _i || function(t) {
            return Pt.clearTimeout(t);
        }, to = Bi && 1 / M(new Bi([ , -0 ]))[1] == N ? function(t) {
            return new Bi(t);
        } : Lu, no = Mi ? function(t) {
            return Mi.get(t);
        } : Lu, ro = bi ? C(bi, Pu) : Uu, eo = bi ? function(t) {
            for (var n = []; t; ) s(n, ro(t)), t = ci(t);
            return n;
        } : Uu;
        (Ri && "[object DataView]" != Et(new Ri(new ArrayBuffer(1))) || zi && "[object Map]" != Et(new zi()) || Wi && "[object Promise]" != Et(Wi.resolve()) || Bi && "[object Set]" != Et(new Bi()) || Li && "[object WeakMap]" != Et(new Li())) && (Et = function(t) {
            var n = ni.call(t);
            if (t = (t = "[object Object]" == n ? t.constructor : F) ? Ie(t) : F) switch (t) {
              case Ti:
                return "[object DataView]";

              case $i:
                return "[object Map]";

              case Fi:
                return "[object Promise]";

              case Ni:
                return "[object Set]";

              case Pi:
                return "[object WeakMap]";
            }
            return n;
        });
        var uo = Ju ? iu : Mu, io = Ee(Hi), oo = gi || function(t, n) {
            return Pt.setTimeout(t, n);
        }, fo = Ee(Qi), co = function(t) {
            t = Qe(t, function(t) {
                return 500 === n.size && n.clear(), t;
            });
            var n = t.cache;
            return t;
        }(function(t) {
            t = xu(t);
            var n = [];
            return et.test(t) && n.push(""), t.replace(ut, function(t, r, e, u) {
                n.push(e ? u.replace(_t, "$1") : r || t);
            }), n;
        }), ao = cr(function(t, n) {
            return eu(t) ? xn(t, An(n, 1, eu, true)) : [];
        }), lo = cr(function(t, n) {
            var r = Ue(n);
            return eu(r) && (r = F), eu(t) ? xn(t, An(n, 1, eu, true), fe(r, 2)) : [];
        }), so = cr(function(t, n) {
            var r = Ue(n);
            return eu(r) && (r = F), eu(t) ? xn(t, An(n, 1, eu, true), F, r) : [];
        }), ho = cr(function(t) {
            var n = l(t, wr);
            return n.length && n[0] === t[0] ? Bn(n) : [];
        }), po = cr(function(t) {
            var n = Ue(t), r = l(t, wr);
            return n === Ue(r) ? n = F : r.pop(), r.length && r[0] === t[0] ? Bn(r, fe(n, 2)) : [];
        }), _o = cr(function(t) {
            var n = Ue(t), r = l(t, wr);
            return n === Ue(r) ? n = F : r.pop(), r.length && r[0] === t[0] ? Bn(r, F, n) : [];
        }), vo = cr(Me), go = ue(function(t, n) {
            var r = t ? t.length : 0, e = pn(t, n);
            return ir(t, l(n, function(t) {
                return ge(t, r) ? +t : t;
            }).sort(Or)), e;
        }), yo = cr(function(t) {
            return dr(An(t, 1, eu, true));
        }), bo = cr(function(t) {
            var n = Ue(t);
            return eu(n) && (n = F), dr(An(t, 1, eu, true), fe(n, 2));
        }), xo = cr(function(t) {
            var n = Ue(t);
            return eu(n) && (n = F), dr(An(t, 1, eu, true), F, n);
        }), jo = cr(function(t, n) {
            return eu(t) ? xn(t, n) : [];
        }), wo = cr(function(t) {
            return xr(f(t, eu));
        }), mo = cr(function(t) {
            var n = Ue(t);
            return eu(n) && (n = F), xr(f(t, eu), fe(n, 2));
        }), Ao = cr(function(t) {
            var n = Ue(t);
            return eu(n) && (n = F), xr(f(t, eu), F, n);
        }), ko = cr(Te), Eo = cr(function(t) {
            var n = t.length, n = 1 < n ? t[n - 1] : F, n = typeof n == "function" ? (t.pop(), 
            n) : F;
            return $e(t, n);
        }), Oo = ue(function(t) {
            function n(n) {
                return pn(n, t);
            }
            var r = t.length, e = r ? t[0] : 0, u = this.__wrapped__;
            return !(1 < r || this.__actions__.length) && u instanceof Dt && ge(e) ? (u = u.slice(e, +e + (r ? 1 : 0)), 
            u.__actions__.push({
                func: Ne,
                args: [ n ],
                thisArg: F
            }), new Mt(u, this.__chain__).thru(function(t) {
                return r && !t.length && t.push(F), t;
            })) : this.thru(n);
        }), So = Br(function(t, n, r) {
            Qu.call(t, r) ? ++t[r] : hn(t, r, 1);
        }), Io = Nr(We), Ro = Nr(Be), zo = Br(function(t, n, r) {
            Qu.call(t, r) ? t[r].push(n) : hn(t, r, [ n ]);
        }), Wo = cr(function(t, n, e) {
            var u = -1, i = typeof n == "function", o = ye(n), f = ru(t) ? Du(t.length) : [];
            return Ki(t, function(t) {
                var c = i ? n : o && null != t ? t[n] : F;
                f[++u] = c ? r(c, t, e) : Cn(t, n, e);
            }), f;
        }), Bo = Br(function(t, n, r) {
            hn(t, r, n);
        }), Lo = Br(function(t, n, r) {
            t[r ? 0 : 1].push(n);
        }, function() {
            return [ [], [] ];
        }), Co = cr(function(t, n) {
            if (null == t) return [];
            var r = n.length;
            return 1 < r && de(t, n[0], n[1]) ? n = [] : 2 < r && de(n[0], n[1], n[2]) && (n = [ n[0] ]), 
            tr(t, An(n, 1), []);
        }), Uo = vi || function() {
            return Pt.Date.now();
        }, Mo = cr(function(t, n, r) {
            var e = 1;
            if (r.length) var u = U(r, oe(Mo)), e = 32 | e;
            return ne(t, e, n, r, u);
        }), Do = cr(function(t, n, r) {
            var e = 3;
            if (r.length) var u = U(r, oe(Do)), e = 32 | e;
            return ne(n, e, t, r, u);
        }), To = cr(function(t, n) {
            return bn(t, 1, n);
        }), $o = cr(function(t, n, r) {
            return bn(t, yu(n) || 0, r);
        });
        Qe.Cache = Zt;
        var Fo = cr(function(t, n) {
            n = 1 == n.length && Ko(n[0]) ? l(n[0], S(fe())) : l(An(n, 1), S(fe()));
            var e = n.length;
            return cr(function(u) {
                for (var i = -1, o = ki(u.length, e); ++i < o; ) u[i] = n[i].call(this, u[i]);
                return r(t, this, u);
            });
        }), No = cr(function(t, n) {
            return ne(t, 32, F, n, U(n, oe(No)));
        }), Po = cr(function(t, n) {
            return ne(t, 64, F, n, U(n, oe(Po)));
        }), Zo = ue(function(t, n) {
            return ne(t, 256, F, F, F, n);
        }), qo = Hr(Rn), Vo = Hr(function(t, n) {
            return t >= n;
        }), Ko = Du.isArray, Go = Gt ? S(Gt) : Un, Jo = xi || Mu, Yo = Jt ? S(Jt) : Mn, Ho = Yt ? S(Yt) : Tn, Qo = Ht ? S(Ht) : Nn, Xo = Qt ? S(Qt) : Pn, tf = Xt ? S(Xt) : Zn, nf = Hr(Gn), rf = Hr(function(t, n) {
            return t <= n;
        }), ef = Lr(function(t, n) {
            if (xe(n) || ru(n)) zr(n, mu(n), t); else for (var r in n) Qu.call(n, r) && cn(t, r, n[r]);
        }), uf = Lr(function(t, n) {
            zr(n, Au(n), t);
        }), of = Lr(function(t, n, r, e) {
            zr(n, Au(n), t, e);
        }), ff = Lr(function(t, n, r, e) {
            zr(n, mu(n), t, e);
        }), cf = ue(pn), af = cr(function(t) {
            return t.push(F, on), r(of, F, t);
        }), lf = cr(function(t) {
            return t.push(F, we), r(vf, F, t);
        }), sf = qr(function(t, n, r) {
            t[n] = r;
        }, Ru(zu)), hf = qr(function(t, n, r) {
            Qu.call(t, n) ? t[n].push(r) : t[n] = [ r ];
        }, fe), pf = cr(Cn), _f = Lr(function(t, n, r) {
            Qn(t, n, r);
        }), vf = Lr(function(t, n, r, e) {
            Qn(t, n, r, e);
        }), gf = ue(function(t, n) {
            return null == t ? {} : (n = l(n, Se), nr(t, xn(In(t, Au, eo), n)));
        }), df = ue(function(t, n) {
            return null == t ? {} : nr(t, l(n, Se));
        }), yf = te(mu), bf = te(Au), xf = Tr(function(t, n, r) {
            return n = n.toLowerCase(), t + (r ? Ou(n) : n);
        }), jf = Tr(function(t, n, r) {
            return t + (r ? "-" : "") + n.toLowerCase();
        }), wf = Tr(function(t, n, r) {
            return t + (r ? " " : "") + n.toLowerCase();
        }), mf = Dr("toLowerCase"), Af = Tr(function(t, n, r) {
            return t + (r ? "_" : "") + n.toLowerCase();
        }), kf = Tr(function(t, n, r) {
            return t + (r ? " " : "") + Of(n);
        }), Ef = Tr(function(t, n, r) {
            return t + (r ? " " : "") + n.toUpperCase();
        }), Of = Dr("toUpperCase"), Sf = cr(function(t, n) {
            try {
                return r(t, F, n);
            } catch (t) {
                return uu(t) ? t : new $u(t);
            }
        }), If = ue(function(t, n) {
            return u(n, function(n) {
                n = Se(n), hn(t, n, Mo(t[n], t));
            }), t;
        }), Rf = Pr(), zf = Pr(true), Wf = cr(function(t, n) {
            return function(r) {
                return Cn(r, t, n);
            };
        }), Bf = cr(function(t, n) {
            return function(r) {
                return Cn(t, r, n);
            };
        }), Lf = Kr(l), Cf = Kr(o), Uf = Kr(_), Mf = Yr(), Df = Yr(true), Tf = Vr(function(t, n) {
            return t + n;
        }, 0), $f = Xr("ceil"), Ff = Vr(function(t, n) {
            return t / n;
        }, 1), Nf = Xr("floor"), Pf = Vr(function(t, n) {
            return t * n;
        }, 1), Zf = Xr("round"), qf = Vr(function(t, n) {
            return t - n;
        }, 0);
        return Ot.after = function(t, n) {
            if (typeof n != "function") throw new Vu("Expected a function");
            return t = gu(t), function() {
                if (1 > --t) return n.apply(this, arguments);
            };
        }, Ot.ary = Ke, Ot.assign = ef, Ot.assignIn = uf, Ot.assignInWith = of, Ot.assignWith = ff, 
        Ot.at = cf, Ot.before = Ge, Ot.bind = Mo, Ot.bindAll = If, Ot.bindKey = Do, Ot.castArray = function() {
            if (!arguments.length) return [];
            var t = arguments[0];
            return Ko(t) ? t : [ t ];
        }, Ot.chain = Fe, Ot.chunk = function(t, n, r) {
            if (n = (r ? de(t, n, r) : n === F) ? 1 : Ai(gu(n), 0), r = t ? t.length : 0, !r || 1 > n) return [];
            for (var e = 0, u = 0, i = Du(di(r / n)); e < r; ) i[u++] = lr(t, e, e += n);
            return i;
        }, Ot.compact = function(t) {
            for (var n = -1, r = t ? t.length : 0, e = 0, u = []; ++n < r; ) {
                var i = t[n];
                i && (u[e++] = i);
            }
            return u;
        }, Ot.concat = function() {
            var t = arguments.length;
            if (!t) return [];
            for (var n = Du(t - 1), r = arguments[0]; t--; ) n[t - 1] = arguments[t];
            return s(Ko(r) ? Rr(r) : [ r ], An(n, 1));
        }, Ot.cond = function(t) {
            var n = t ? t.length : 0, e = fe();
            return t = n ? l(t, function(t) {
                if ("function" != typeof t[1]) throw new Vu("Expected a function");
                return [ e(t[0]), t[1] ];
            }) : [], cr(function(e) {
                for (var u = -1; ++u < n; ) {
                    var i = t[u];
                    if (r(i[0], this, e)) return r(i[1], this, e);
                }
            });
        }, Ot.conforms = function(t) {
            return gn(vn(t, true));
        }, Ot.constant = Ru, Ot.countBy = So, Ot.create = function(t, n) {
            var r = yn(t);
            return n ? sn(r, n) : r;
        }, Ot.curry = Je, Ot.curryRight = Ye, Ot.debounce = He, Ot.defaults = af, Ot.defaultsDeep = lf, 
        Ot.defer = To, Ot.delay = $o, Ot.difference = ao, Ot.differenceBy = lo, Ot.differenceWith = so, 
        Ot.drop = function(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (n = r || n === F ? 1 : gu(n), lr(t, 0 > n ? 0 : n, e)) : [];
        }, Ot.dropRight = function(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (n = r || n === F ? 1 : gu(n), n = e - n, lr(t, 0, 0 > n ? 0 : n)) : [];
        }, Ot.dropRightWhile = function(t, n) {
            return t && t.length ? yr(t, fe(n, 3), true, true) : [];
        }, Ot.dropWhile = function(t, n) {
            return t && t.length ? yr(t, fe(n, 3), true) : [];
        }, Ot.fill = function(t, n, r, e) {
            var u = t ? t.length : 0;
            if (!u) return [];
            for (r && typeof r != "number" && de(t, n, r) && (r = 0, e = u), u = t.length, r = gu(r), 
            0 > r && (r = -r > u ? 0 : u + r), e = e === F || e > u ? u : gu(e), 0 > e && (e += u), 
            e = r > e ? 0 : du(e); r < e; ) t[r++] = n;
            return t;
        }, Ot.filter = function(t, n) {
            return (Ko(t) ? f : mn)(t, fe(n, 3));
        }, Ot.flatMap = function(t, n) {
            return An(Ve(t, n), 1);
        }, Ot.flatMapDeep = function(t, n) {
            return An(Ve(t, n), N);
        }, Ot.flatMapDepth = function(t, n, r) {
            return r = r === F ? 1 : gu(r), An(Ve(t, n), r);
        }, Ot.flatten = Le, Ot.flattenDeep = function(t) {
            return t && t.length ? An(t, N) : [];
        }, Ot.flattenDepth = function(t, n) {
            return t && t.length ? (n = n === F ? 1 : gu(n), An(t, n)) : [];
        }, Ot.flip = function(t) {
            return ne(t, 512);
        }, Ot.flow = Rf, Ot.flowRight = zf, Ot.fromPairs = function(t) {
            for (var n = -1, r = t ? t.length : 0, e = {}; ++n < r; ) {
                var u = t[n];
                e[u[0]] = u[1];
            }
            return e;
        }, Ot.functions = function(t) {
            return null == t ? [] : On(t, mu(t));
        }, Ot.functionsIn = function(t) {
            return null == t ? [] : On(t, Au(t));
        }, Ot.groupBy = zo, Ot.initial = function(t) {
            return t && t.length ? lr(t, 0, -1) : [];
        }, Ot.intersection = ho, Ot.intersectionBy = po, Ot.intersectionWith = _o, Ot.invert = sf, 
        Ot.invertBy = hf, Ot.invokeMap = Wo, Ot.iteratee = Wu, Ot.keyBy = Bo, Ot.keys = mu, 
        Ot.keysIn = Au, Ot.map = Ve, Ot.mapKeys = function(t, n) {
            var r = {};
            return n = fe(n, 3), kn(t, function(t, e, u) {
                hn(r, n(t, e, u), t);
            }), r;
        }, Ot.mapValues = function(t, n) {
            var r = {};
            return n = fe(n, 3), kn(t, function(t, e, u) {
                hn(r, e, n(t, e, u));
            }), r;
        }, Ot.matches = function(t) {
            return Yn(vn(t, true));
        }, Ot.matchesProperty = function(t, n) {
            return Hn(t, vn(n, true));
        }, Ot.memoize = Qe, Ot.merge = _f, Ot.mergeWith = vf, Ot.method = Wf, Ot.methodOf = Bf, 
        Ot.mixin = Bu, Ot.negate = Xe, Ot.nthArg = function(t) {
            return t = gu(t), cr(function(n) {
                return Xn(n, t);
            });
        }, Ot.omit = gf, Ot.omitBy = function(t, n) {
            return ku(t, Xe(fe(n)));
        }, Ot.once = function(t) {
            return Ge(2, t);
        }, Ot.orderBy = function(t, n, r, e) {
            return null == t ? [] : (Ko(n) || (n = null == n ? [] : [ n ]), r = e ? F : r, Ko(r) || (r = null == r ? [] : [ r ]), 
            tr(t, n, r));
        }, Ot.over = Lf, Ot.overArgs = Fo, Ot.overEvery = Cf, Ot.overSome = Uf, Ot.partial = No, 
        Ot.partialRight = Po, Ot.partition = Lo, Ot.pick = df, Ot.pickBy = ku, Ot.property = Cu, 
        Ot.propertyOf = function(t) {
            return function(n) {
                return null == t ? F : Sn(t, n);
            };
        }, Ot.pull = vo, Ot.pullAll = Me, Ot.pullAllBy = function(t, n, r) {
            return t && t.length && n && n.length ? ur(t, n, fe(r, 2)) : t;
        }, Ot.pullAllWith = function(t, n, r) {
            return t && t.length && n && n.length ? ur(t, n, F, r) : t;
        }, Ot.pullAt = go, Ot.range = Mf, Ot.rangeRight = Df, Ot.rearg = Zo, Ot.reject = function(t, n) {
            return (Ko(t) ? f : mn)(t, Xe(fe(n, 3)));
        }, Ot.remove = function(t, n) {
            var r = [];
            if (!t || !t.length) return r;
            var e = -1, u = [], i = t.length;
            for (n = fe(n, 3); ++e < i; ) {
                var o = t[e];
                n(o, e, t) && (r.push(o), u.push(e));
            }
            return ir(t, u), r;
        }, Ot.rest = function(t, n) {
            if (typeof t != "function") throw new Vu("Expected a function");
            return n = n === F ? n : gu(n), cr(t, n);
        }, Ot.reverse = De, Ot.sampleSize = function(t, n, r) {
            return n = (r ? de(t, n, r) : n === F) ? 1 : gu(n), t = ru(t) ? t : Eu(t), t = Oe(Rr(t)), 
            t.length = _n(n, 0, t.length), t;
        }, Ot.set = function(t, n, r) {
            return null == t ? t : ar(t, n, r);
        }, Ot.setWith = function(t, n, r, e) {
            return e = typeof e == "function" ? e : F, null == t ? t : ar(t, n, r, e);
        }, Ot.shuffle = function(t) {
            return Oe(ru(t) ? Rr(t) : Eu(t));
        }, Ot.slice = function(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (r && typeof r != "number" && de(t, n, r) ? (n = 0, r = e) : (n = null == n ? 0 : gu(n), 
            r = r === F ? e : gu(r)), lr(t, n, r)) : [];
        }, Ot.sortBy = Co, Ot.sortedUniq = function(t) {
            return t && t.length ? _r(t) : [];
        }, Ot.sortedUniqBy = function(t, n) {
            return t && t.length ? _r(t, fe(n, 2)) : [];
        }, Ot.split = function(t, n, r) {
            return r && typeof r != "number" && de(t, n, r) && (n = r = F), r = r === F ? 4294967295 : r >>> 0, 
            r ? (t = xu(t)) && (typeof n == "string" || null != n && !Qo(n)) && (n = gr(n), 
            !n && Wt.test(t)) ? Ar($(t), 0, r) : t.split(n, r) : [];
        }, Ot.spread = function(t, n) {
            if (typeof t != "function") throw new Vu("Expected a function");
            return n = n === F ? 0 : Ai(gu(n), 0), cr(function(e) {
                var u = e[n];
                return e = Ar(e, 0, n), u && s(e, u), r(t, this, e);
            });
        }, Ot.tail = function(t) {
            var n = t ? t.length : 0;
            return n ? lr(t, 1, n) : [];
        }, Ot.take = function(t, n, r) {
            return t && t.length ? (n = r || n === F ? 1 : gu(n), lr(t, 0, 0 > n ? 0 : n)) : [];
        }, Ot.takeRight = function(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (n = r || n === F ? 1 : gu(n), n = e - n, lr(t, 0 > n ? 0 : n, e)) : [];
        }, Ot.takeRightWhile = function(t, n) {
            return t && t.length ? yr(t, fe(n, 3), false, true) : [];
        }, Ot.takeWhile = function(t, n) {
            return t && t.length ? yr(t, fe(n, 3)) : [];
        }, Ot.tap = function(t, n) {
            return n(t), t;
        }, Ot.throttle = function(t, n, r) {
            var e = true, u = true;
            if (typeof t != "function") throw new Vu("Expected a function");
            return cu(r) && (e = "leading" in r ? !!r.leading : e, u = "trailing" in r ? !!r.trailing : u), 
            He(t, n, {
                leading: e,
                maxWait: n,
                trailing: u
            });
        }, Ot.thru = Ne, Ot.toArray = _u, Ot.toPairs = yf, Ot.toPairsIn = bf, Ot.toPath = function(t) {
            return Ko(t) ? l(t, Se) : pu(t) ? [ t ] : Rr(co(t));
        }, Ot.toPlainObject = bu, Ot.transform = function(t, n, r) {
            var e = Ko(t) || tf(t);
            if (n = fe(n, 4), null == r) if (e || cu(t)) {
                var i = t.constructor;
                r = e ? Ko(t) ? new i() : [] : iu(i) ? yn(ci(t)) : {};
            } else r = {};
            return (e ? u : kn)(t, function(t, e, u) {
                return n(r, t, e, u);
            }), r;
        }, Ot.unary = function(t) {
            return Ke(t, 1);
        }, Ot.union = yo, Ot.unionBy = bo, Ot.unionWith = xo, Ot.uniq = function(t) {
            return t && t.length ? dr(t) : [];
        }, Ot.uniqBy = function(t, n) {
            return t && t.length ? dr(t, fe(n, 2)) : [];
        }, Ot.uniqWith = function(t, n) {
            return t && t.length ? dr(t, F, n) : [];
        }, Ot.unset = function(t, n) {
            var r;
            if (null == t) r = true; else {
                r = t;
                var e = n, e = ye(e, r) ? [ e ] : mr(e);
                r = Ae(r, e), e = Se(Ue(e)), r = !(null != r && Qu.call(r, e)) || delete r[e];
            }
            return r;
        }, Ot.unzip = Te, Ot.unzipWith = $e, Ot.update = function(t, n, r) {
            return null == t ? t : ar(t, n, (typeof r == "function" ? r : zu)(Sn(t, n)), void 0);
        }, Ot.updateWith = function(t, n, r, e) {
            return e = typeof e == "function" ? e : F, null != t && (t = ar(t, n, (typeof r == "function" ? r : zu)(Sn(t, n)), e)), 
            t;
        }, Ot.values = Eu, Ot.valuesIn = function(t) {
            return null == t ? [] : I(t, Au(t));
        }, Ot.without = jo, Ot.words = Iu, Ot.wrap = function(t, n) {
            return n = null == n ? zu : n, No(n, t);
        }, Ot.xor = wo, Ot.xorBy = mo, Ot.xorWith = Ao, Ot.zip = ko, Ot.zipObject = function(t, n) {
            return jr(t || [], n || [], cn);
        }, Ot.zipObjectDeep = function(t, n) {
            return jr(t || [], n || [], ar);
        }, Ot.zipWith = Eo, Ot.entries = yf, Ot.entriesIn = bf, Ot.extend = uf, Ot.extendWith = of, 
        Bu(Ot, Ot), Ot.add = Tf, Ot.attempt = Sf, Ot.camelCase = xf, Ot.capitalize = Ou, 
        Ot.ceil = $f, Ot.clamp = function(t, n, r) {
            return r === F && (r = n, n = F), r !== F && (r = yu(r), r = r === r ? r : 0), n !== F && (n = yu(n), 
            n = n === n ? n : 0), _n(yu(t), n, r);
        }, Ot.clone = function(t) {
            return vn(t, false, true);
        }, Ot.cloneDeep = function(t) {
            return vn(t, true, true);
        }, Ot.cloneDeepWith = function(t, n) {
            return vn(t, true, true, n);
        }, Ot.cloneWith = function(t, n) {
            return vn(t, false, true, n);
        }, Ot.conformsTo = function(t, n) {
            return null == n || dn(t, n, mu(n));
        }, Ot.deburr = Su, Ot.defaultTo = function(t, n) {
            return null == t || t !== t ? n : t;
        }, Ot.divide = Ff, Ot.endsWith = function(t, n, r) {
            t = xu(t), n = gr(n);
            var e = t.length, e = r = r === F ? e : _n(gu(r), 0, e);
            return r -= n.length, 0 <= r && t.slice(r, e) == n;
        }, Ot.eq = tu, Ot.escape = function(t) {
            return (t = xu(t)) && H.test(t) ? t.replace(J, rn) : t;
        }, Ot.escapeRegExp = function(t) {
            return (t = xu(t)) && ot.test(t) ? t.replace(it, "\\$&") : t;
        }, Ot.every = function(t, n, r) {
            var e = Ko(t) ? o : jn;
            return r && de(t, n, r) && (n = F), e(t, fe(n, 3));
        }, Ot.find = Io, Ot.findIndex = We, Ot.findKey = function(t, n) {
            return v(t, fe(n, 3), kn);
        }, Ot.findLast = Ro, Ot.findLastIndex = Be, Ot.findLastKey = function(t, n) {
            return v(t, fe(n, 3), En);
        }, Ot.floor = Nf, Ot.forEach = Ze, Ot.forEachRight = qe, Ot.forIn = function(t, n) {
            return null == t ? t : Ji(t, fe(n, 3), Au);
        }, Ot.forInRight = function(t, n) {
            return null == t ? t : Yi(t, fe(n, 3), Au);
        }, Ot.forOwn = function(t, n) {
            return t && kn(t, fe(n, 3));
        }, Ot.forOwnRight = function(t, n) {
            return t && En(t, fe(n, 3));
        }, Ot.get = ju, Ot.gt = qo, Ot.gte = Vo, Ot.has = function(t, n) {
            return null != t && se(t, n, zn);
        }, Ot.hasIn = wu, Ot.head = Ce, Ot.identity = zu, Ot.includes = function(t, n, r, e) {
            return t = ru(t) ? t : Eu(t), r = r && !e ? gu(r) : 0, e = t.length, 0 > r && (r = Ai(e + r, 0)), 
            hu(t) ? r <= e && -1 < t.indexOf(n, r) : !!e && -1 < d(t, n, r);
        }, Ot.indexOf = function(t, n, r) {
            var e = t ? t.length : 0;
            return e ? (r = null == r ? 0 : gu(r), 0 > r && (r = Ai(e + r, 0)), d(t, n, r)) : -1;
        }, Ot.inRange = function(t, n, r) {
            return n = vu(n), r === F ? (r = n, n = 0) : r = vu(r), t = yu(t), t >= ki(n, r) && t < Ai(n, r);
        }, Ot.invoke = pf, Ot.isArguments = nu, Ot.isArray = Ko, Ot.isArrayBuffer = Go, 
        Ot.isArrayLike = ru, Ot.isArrayLikeObject = eu, Ot.isBoolean = function(t) {
            return true === t || false === t || au(t) && "[object Boolean]" == ni.call(t);
        }, Ot.isBuffer = Jo, Ot.isDate = Yo, Ot.isElement = function(t) {
            return null != t && 1 === t.nodeType && au(t) && !su(t);
        }, Ot.isEmpty = function(t) {
            if (ru(t) && (Ko(t) || typeof t == "string" || typeof t.splice == "function" || Jo(t) || nu(t))) return !t.length;
            var n = Et(t);
            if ("[object Map]" == n || "[object Set]" == n) return !t.size;
            if (xe(t)) return !mi(t).length;
            for (var r in t) if (Qu.call(t, r)) return false;
            return true;
        }, Ot.isEqual = function(t, n) {
            return Dn(t, n);
        }, Ot.isEqualWith = function(t, n, r) {
            var e = (r = typeof r == "function" ? r : F) ? r(t, n) : F;
            return e === F ? Dn(t, n, r) : !!e;
        }, Ot.isError = uu, Ot.isFinite = function(t) {
            return typeof t == "number" && ji(t);
        }, Ot.isFunction = iu, Ot.isInteger = ou, Ot.isLength = fu, Ot.isMap = Ho, Ot.isMatch = function(t, n) {
            return t === n || $n(t, n, ae(n));
        }, Ot.isMatchWith = function(t, n, r) {
            return r = typeof r == "function" ? r : F, $n(t, n, ae(n), r);
        }, Ot.isNaN = function(t) {
            return lu(t) && t != +t;
        }, Ot.isNative = function(t) {
            if (uo(t)) throw new $u("This method is not supported with core-js. Try https://github.com/es-shims.");
            return Fn(t);
        }, Ot.isNil = function(t) {
            return null == t;
        }, Ot.isNull = function(t) {
            return null === t;
        }, Ot.isNumber = lu, Ot.isObject = cu, Ot.isObjectLike = au, Ot.isPlainObject = su, 
        Ot.isRegExp = Qo, Ot.isSafeInteger = function(t) {
            return ou(t) && -9007199254740991 <= t && 9007199254740991 >= t;
        }, Ot.isSet = Xo, Ot.isString = hu, Ot.isSymbol = pu, Ot.isTypedArray = tf, Ot.isUndefined = function(t) {
            return t === F;
        }, Ot.isWeakMap = function(t) {
            return au(t) && "[object WeakMap]" == Et(t);
        }, Ot.isWeakSet = function(t) {
            return au(t) && "[object WeakSet]" == ni.call(t);
        }, Ot.join = function(t, n) {
            return t ? wi.call(t, n) : "";
        }, Ot.kebabCase = jf, Ot.last = Ue, Ot.lastIndexOf = function(t, n, r) {
            var e = t ? t.length : 0;
            if (!e) return -1;
            var u = e;
            if (r !== F && (u = gu(r), u = 0 > u ? Ai(e + u, 0) : ki(u, e - 1)), n === n) {
                for (r = u + 1; r-- && t[r] !== n; ) ;
                t = r;
            } else t = g(t, b, u, true);
            return t;
        }, Ot.lowerCase = wf, Ot.lowerFirst = mf, Ot.lt = nf, Ot.lte = rf, Ot.max = function(t) {
            return t && t.length ? wn(t, zu, Rn) : F;
        }, Ot.maxBy = function(t, n) {
            return t && t.length ? wn(t, fe(n, 2), Rn) : F;
        }, Ot.mean = function(t) {
            return x(t, zu);
        }, Ot.meanBy = function(t, n) {
            return x(t, fe(n, 2));
        }, Ot.min = function(t) {
            return t && t.length ? wn(t, zu, Gn) : F;
        }, Ot.minBy = function(t, n) {
            return t && t.length ? wn(t, fe(n, 2), Gn) : F;
        }, Ot.stubArray = Uu, Ot.stubFalse = Mu, Ot.stubObject = function() {
            return {};
        }, Ot.stubString = function() {
            return "";
        }, Ot.stubTrue = function() {
            return true;
        }, Ot.multiply = Pf, Ot.nth = function(t, n) {
            return t && t.length ? Xn(t, gu(n)) : F;
        }, Ot.noConflict = function() {
            return Pt._ === this && (Pt._ = ri), this;
        }, Ot.noop = Lu, Ot.now = Uo, Ot.pad = function(t, n, r) {
            t = xu(t);
            var e = (n = gu(n)) ? T(t) : 0;
            return !n || e >= n ? t : (n = (n - e) / 2, Gr(yi(n), r) + t + Gr(di(n), r));
        }, Ot.padEnd = function(t, n, r) {
            t = xu(t);
            var e = (n = gu(n)) ? T(t) : 0;
            return n && e < n ? t + Gr(n - e, r) : t;
        }, Ot.padStart = function(t, n, r) {
            t = xu(t);
            var e = (n = gu(n)) ? T(t) : 0;
            return n && e < n ? Gr(n - e, r) + t : t;
        }, Ot.parseInt = function(t, n, r) {
            return r || null == n ? n = 0 : n && (n = +n), Oi(xu(t), n || 0);
        }, Ot.random = function(t, n, r) {
            if (r && typeof r != "boolean" && de(t, n, r) && (n = r = F), r === F && (typeof n == "boolean" ? (r = n, 
            n = F) : typeof t == "boolean" && (r = t, t = F)), t === F && n === F ? (t = 0, 
            n = 1) : (t = vu(t), n === F ? (n = t, t = 0) : n = vu(n)), t > n) {
                var e = t;
                t = n, n = e;
            }
            return r || t % 1 || n % 1 ? (r = Si(), ki(t + r * (n - t + Tt("1e-" + ((r + "").length - 1))), n)) : or(t, n);
        }, Ot.reduce = function(t, n, r) {
            var e = Ko(t) ? h : m, u = 3 > arguments.length;
            return e(t, fe(n, 4), r, u, Ki);
        }, Ot.reduceRight = function(t, n, r) {
            var e = Ko(t) ? p : m, u = 3 > arguments.length;
            return e(t, fe(n, 4), r, u, Gi);
        }, Ot.repeat = function(t, n, r) {
            return n = (r ? de(t, n, r) : n === F) ? 1 : gu(n), fr(xu(t), n);
        }, Ot.replace = function() {
            var t = arguments, n = xu(t[0]);
            return 3 > t.length ? n : n.replace(t[1], t[2]);
        }, Ot.result = function(t, n, r) {
            n = ye(n, t) ? [ n ] : mr(n);
            var e = -1, u = n.length;
            for (u || (t = F, u = 1); ++e < u; ) {
                var i = null == t ? F : t[Se(n[e])];
                i === F && (e = u, i = r), t = iu(i) ? i.call(t) : i;
            }
            return t;
        }, Ot.round = Zf, Ot.runInContext = w, Ot.sample = function(t) {
            t = ru(t) ? t : Eu(t);
            var n = t.length;
            return n ? t[or(0, n - 1)] : F;
        }, Ot.size = function(t) {
            if (null == t) return 0;
            if (ru(t)) return hu(t) ? T(t) : t.length;
            var n = Et(t);
            return "[object Map]" == n || "[object Set]" == n ? t.size : Vn(t).length;
        }, Ot.snakeCase = Af, Ot.some = function(t, n, r) {
            var e = Ko(t) ? _ : sr;
            return r && de(t, n, r) && (n = F), e(t, fe(n, 3));
        }, Ot.sortedIndex = function(t, n) {
            return hr(t, n);
        }, Ot.sortedIndexBy = function(t, n, r) {
            return pr(t, n, fe(r, 2));
        }, Ot.sortedIndexOf = function(t, n) {
            var r = t ? t.length : 0;
            if (r) {
                var e = hr(t, n);
                if (e < r && tu(t[e], n)) return e;
            }
            return -1;
        }, Ot.sortedLastIndex = function(t, n) {
            return hr(t, n, true);
        }, Ot.sortedLastIndexBy = function(t, n, r) {
            return pr(t, n, fe(r, 2), true);
        }, Ot.sortedLastIndexOf = function(t, n) {
            if (t && t.length) {
                var r = hr(t, n, true) - 1;
                if (tu(t[r], n)) return r;
            }
            return -1;
        }, Ot.startCase = kf, Ot.startsWith = function(t, n, r) {
            return t = xu(t), r = _n(gu(r), 0, t.length), n = gr(n), t.slice(r, r + n.length) == n;
        }, Ot.subtract = qf, Ot.sum = function(t) {
            return t && t.length ? k(t, zu) : 0;
        }, Ot.sumBy = function(t, n) {
            return t && t.length ? k(t, fe(n, 2)) : 0;
        }, Ot.template = function(t, n, r) {
            var e = Ot.templateSettings;
            r && de(t, n, r) && (n = F), t = xu(t), n = of({}, n, e, on), r = of({}, n.imports, e.imports, on);
            var u, i, o = mu(r), f = I(r, o), c = 0;
            r = n.interpolate || mt;
            var a = "__p+='";
            r = Zu((n.escape || mt).source + "|" + r.source + "|" + (r === tt ? vt : mt).source + "|" + (n.evaluate || mt).source + "|$", "g");
            var l = "sourceURL" in n ? "//# sourceURL=" + n.sourceURL + "\n" : "";
            if (t.replace(r, function(n, r, e, o, f, l) {
                return e || (e = o), a += t.slice(c, l).replace(At, B), r && (u = true, a += "'+__e(" + r + ")+'"), 
                f && (i = true, a += "';" + f + ";\n__p+='"), e && (a += "'+((__t=(" + e + "))==null?'':__t)+'"), 
                c = l + n.length, n;
            }), a += "';", (n = n.variable) || (a = "with(obj){" + a + "}"), a = (i ? a.replace(q, "") : a).replace(V, "$1").replace(K, "$1;"), 
            a = "function(" + (n || "obj") + "){" + (n ? "" : "obj||(obj={});") + "var __t,__p=''" + (u ? ",__e=_.escape" : "") + (i ? ",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}" : ";") + a + "return __p}", 
            n = Sf(function() {
                return Fu(o, l + "return " + a).apply(F, f);
            }), n.source = a, uu(n)) throw n;
            return n;
        }, Ot.times = function(t, n) {
            if (t = gu(t), 1 > t || 9007199254740991 < t) return [];
            var r = 4294967295, e = ki(t, 4294967295);
            for (n = fe(n), t -= 4294967295, e = E(e, n); ++r < t; ) n(r);
            return e;
        }, Ot.toFinite = vu, Ot.toInteger = gu, Ot.toLength = du, Ot.toLower = function(t) {
            return xu(t).toLowerCase();
        }, Ot.toNumber = yu, Ot.toSafeInteger = function(t) {
            return _n(gu(t), -9007199254740991, 9007199254740991);
        }, Ot.toString = xu, Ot.toUpper = function(t) {
            return xu(t).toUpperCase();
        }, Ot.trim = function(t, n, r) {
            return (t = xu(t)) && (r || n === F) ? t.replace(ft, "") : t && (n = gr(n)) ? (t = $(t), 
            r = $(n), n = z(t, r), r = W(t, r) + 1, Ar(t, n, r).join("")) : t;
        }, Ot.trimEnd = function(t, n, r) {
            return (t = xu(t)) && (r || n === F) ? t.replace(at, "") : t && (n = gr(n)) ? (t = $(t), 
            n = W(t, $(n)) + 1, Ar(t, 0, n).join("")) : t;
        }, Ot.trimStart = function(t, n, r) {
            return (t = xu(t)) && (r || n === F) ? t.replace(ct, "") : t && (n = gr(n)) ? (t = $(t), 
            n = z(t, $(n)), Ar(t, n).join("")) : t;
        }, Ot.truncate = function(t, n) {
            var r = 30, e = "...";
            if (cu(n)) var u = "separator" in n ? n.separator : u, r = "length" in n ? gu(n.length) : r, e = "omission" in n ? gr(n.omission) : e;
            t = xu(t);
            var i = t.length;
            if (Wt.test(t)) var o = $(t), i = o.length;
            if (r >= i) return t;
            if (i = r - T(e), 1 > i) return e;
            if (r = o ? Ar(o, 0, i).join("") : t.slice(0, i), u === F) return r + e;
            if (o && (i += r.length - i), Qo(u)) {
                if (t.slice(i).search(u)) {
                    var f = r;
                    for (u.global || (u = Zu(u.source, xu(gt.exec(u)) + "g")), u.lastIndex = 0; o = u.exec(f); ) var c = o.index;
                    r = r.slice(0, c === F ? i : c);
                }
            } else t.indexOf(gr(u), i) != i && (u = r.lastIndexOf(u), -1 < u && (r = r.slice(0, u)));
            return r + e;
        }, Ot.unescape = function(t) {
            return (t = xu(t)) && Y.test(t) ? t.replace(G, en) : t;
        }, Ot.uniqueId = function(t) {
            var n = ++Xu;
            return xu(t) + n;
        }, Ot.upperCase = Ef, Ot.upperFirst = Of, Ot.each = Ze, Ot.eachRight = qe, Ot.first = Ce, 
        Bu(Ot, function() {
            var t = {};
            return kn(Ot, function(n, r) {
                Qu.call(Ot.prototype, r) || (t[r] = n);
            }), t;
        }(), {
            chain: false
        }), Ot.VERSION = "4.16.1", u("bind bindKey curry curryRight partial partialRight".split(" "), function(t) {
            Ot[t].placeholder = Ot;
        }), u([ "drop", "take" ], function(t, n) {
            Dt.prototype[t] = function(r) {
                var e = this.__filtered__;
                if (e && !n) return new Dt(this);
                r = r === F ? 1 : Ai(gu(r), 0);
                var u = this.clone();
                return e ? u.__takeCount__ = ki(r, u.__takeCount__) : u.__views__.push({
                    size: ki(r, 4294967295),
                    type: t + (0 > u.__dir__ ? "Right" : "")
                }), u;
            }, Dt.prototype[t + "Right"] = function(n) {
                return this.reverse()[t](n).reverse();
            };
        }), u([ "filter", "map", "takeWhile" ], function(t, n) {
            var r = n + 1, e = 1 == r || 3 == r;
            Dt.prototype[t] = function(t) {
                var n = this.clone();
                return n.__iteratees__.push({
                    iteratee: fe(t, 3),
                    type: r
                }), n.__filtered__ = n.__filtered__ || e, n;
            };
        }), u([ "head", "last" ], function(t, n) {
            var r = "take" + (n ? "Right" : "");
            Dt.prototype[t] = function() {
                return this[r](1).value()[0];
            };
        }), u([ "initial", "tail" ], function(t, n) {
            var r = "drop" + (n ? "" : "Right");
            Dt.prototype[t] = function() {
                return this.__filtered__ ? new Dt(this) : this[r](1);
            };
        }), Dt.prototype.compact = function() {
            return this.filter(zu);
        }, Dt.prototype.find = function(t) {
            return this.filter(t).head();
        }, Dt.prototype.findLast = function(t) {
            return this.reverse().find(t);
        }, Dt.prototype.invokeMap = cr(function(t, n) {
            return typeof t == "function" ? new Dt(this) : this.map(function(r) {
                return Cn(r, t, n);
            });
        }), Dt.prototype.reject = function(t) {
            return this.filter(Xe(fe(t)));
        }, Dt.prototype.slice = function(t, n) {
            t = gu(t);
            var r = this;
            return r.__filtered__ && (0 < t || 0 > n) ? new Dt(r) : (0 > t ? r = r.takeRight(-t) : t && (r = r.drop(t)), 
            n !== F && (n = gu(n), r = 0 > n ? r.dropRight(-n) : r.take(n - t)), r);
        }, Dt.prototype.takeRightWhile = function(t) {
            return this.reverse().takeWhile(t).reverse();
        }, Dt.prototype.toArray = function() {
            return this.take(4294967295);
        }, kn(Dt.prototype, function(t, n) {
            var r = /^(?:filter|find|map|reject)|While$/.test(n), e = /^(?:head|last)$/.test(n), u = Ot[e ? "take" + ("last" == n ? "Right" : "") : n], i = e || /^find/.test(n);
            u && (Ot.prototype[n] = function() {
                function n(t) {
                    return t = u.apply(Ot, s([ t ], f)), e && h ? t[0] : t;
                }
                var o = this.__wrapped__, f = e ? [ 1 ] : arguments, c = o instanceof Dt, a = f[0], l = c || Ko(o);
                l && r && typeof a == "function" && 1 != a.length && (c = l = false);
                var h = this.__chain__, p = !!this.__actions__.length, a = i && !h, c = c && !p;
                return !i && l ? (o = c ? o : new Dt(this), o = t.apply(o, f), o.__actions__.push({
                    func: Ne,
                    args: [ n ],
                    thisArg: F
                }), new Mt(o, h)) : a && c ? t.apply(this, f) : (o = this.thru(n), a ? e ? o.value()[0] : o.value() : o);
            });
        }), u("pop push shift sort splice unshift".split(" "), function(t) {
            var n = Ku[t], r = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru", e = /^(?:pop|shift)$/.test(t);
            Ot.prototype[t] = function() {
                var t = arguments;
                if (e && !this.__chain__) {
                    var u = this.value();
                    return n.apply(Ko(u) ? u : [], t);
                }
                return this[r](function(r) {
                    return n.apply(Ko(r) ? r : [], t);
                });
            };
        }), kn(Dt.prototype, function(t, n) {
            var r = Ot[n];
            if (r) {
                var e = r.name + "";
                (Di[e] || (Di[e] = [])).push({
                    name: n,
                    func: r
                });
            }
        }), Di[Zr(F, 2).name] = [ {
            name: "wrapper",
            func: F
        } ], Dt.prototype.clone = function() {
            var t = new Dt(this.__wrapped__);
            return t.__actions__ = Rr(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, 
            t.__iteratees__ = Rr(this.__iteratees__), t.__takeCount__ = this.__takeCount__, 
            t.__views__ = Rr(this.__views__), t;
        }, Dt.prototype.reverse = function() {
            if (this.__filtered__) {
                var t = new Dt(this);
                t.__dir__ = -1, t.__filtered__ = true;
            } else t = this.clone(), t.__dir__ *= -1;
            return t;
        }, Dt.prototype.value = function() {
            var t, n = this.__wrapped__.value(), r = this.__dir__, e = Ko(n), u = 0 > r, i = e ? n.length : 0;
            t = i;
            for (var o = this.__views__, f = 0, c = -1, a = o.length; ++c < a; ) {
                var l = o[c], s = l.size;
                switch (l.type) {
                  case "drop":
                    f += s;
                    break;

                  case "dropRight":
                    t -= s;
                    break;

                  case "take":
                    t = ki(t, f + s);
                    break;

                  case "takeRight":
                    f = Ai(f, t - s);
                }
            }
            if (t = {
                start: f,
                end: t
            }, o = t.start, f = t.end, t = f - o, u = u ? f : o - 1, o = this.__iteratees__, 
            f = o.length, c = 0, a = ki(t, this.__takeCount__), !e || 200 > i || i == t && a == t) return br(n, this.__actions__);
            e = [];
            t: for (;t-- && c < a; ) {
                for (u += r, i = -1, l = n[u]; ++i < f; ) {
                    var h = o[i], s = h.type, h = (0, h.iteratee)(l);
                    if (2 == s) l = h; else if (!h) {
                        if (1 == s) continue t;
                        break t;
                    }
                }
                e[c++] = l;
            }
            return e;
        }, Ot.prototype.at = Oo, Ot.prototype.chain = function() {
            return Fe(this);
        }, Ot.prototype.commit = function() {
            return new Mt(this.value(), this.__chain__);
        }, Ot.prototype.next = function() {
            this.__values__ === F && (this.__values__ = _u(this.value()));
            var t = this.__index__ >= this.__values__.length;
            return {
                done: t,
                value: t ? F : this.__values__[this.__index__++]
            };
        }, Ot.prototype.plant = function(t) {
            for (var n, r = this; r instanceof Rt; ) {
                var e = ze(r);
                e.__index__ = 0, e.__values__ = F, n ? u.__wrapped__ = e : n = e;
                var u = e, r = r.__wrapped__;
            }
            return u.__wrapped__ = t, n;
        }, Ot.prototype.reverse = function() {
            var t = this.__wrapped__;
            return t instanceof Dt ? (this.__actions__.length && (t = new Dt(this)), t = t.reverse(), 
            t.__actions__.push({
                func: Ne,
                args: [ De ],
                thisArg: F
            }), new Mt(t, this.__chain__)) : this.thru(De);
        }, Ot.prototype.toJSON = Ot.prototype.valueOf = Ot.prototype.value = function() {
            return br(this.__wrapped__, this.__actions__);
        }, Ot.prototype.first = Ot.prototype.head, ai && (Ot.prototype[ai] = Pe), Ot;
    }();
    typeof define == "function" && typeof define.amd == "object" && define.amd ? (Pt._ = un, 
    define(function() {
        return un;
    })) : qt ? ((qt.exports = un)._ = un, Zt._ = un) : Pt._ = un;
}).call(this);

(function(y, l) {
    "use strict";
    function w() {
        return [ "$animate", function(t) {
            return {
                restrict: "AE",
                transclude: "element",
                priority: 1,
                terminal: !0,
                require: "^^ngMessages",
                link: function(u, n, a, c, f) {
                    var e = n[0], d, r = a.ngMessage || a.when;
                    a = a.ngMessageExp || a.whenExp;
                    var k = function(a) {
                        d = a ? p(a) ? a : a.split(/[\s,]+/) : null;
                        c.reRender();
                    };
                    a ? (k(u.$eval(a)), u.$watchCollection(a, k)) : k(r);
                    var g, s;
                    c.register(e, s = {
                        test: function(a) {
                            var m = d;
                            a = m ? p(m) ? 0 <= m.indexOf(a) : m.hasOwnProperty(a) : void 0;
                            return a;
                        },
                        attach: function() {
                            g || f(function(a, m) {
                                t.enter(a, null, n);
                                g = a;
                                var d = g.$$attachId = c.getAttachId();
                                g.on("$destroy", function() {
                                    g && g.$$attachId === d && (c.deregister(e), s.detach());
                                    m.$destroy();
                                });
                            });
                        },
                        detach: function() {
                            if (g) {
                                var a = g;
                                g = null;
                                t.leave(a);
                            }
                        }
                    });
                }
            };
        } ];
    }
    var v, p, q, x;
    l.module("ngMessages", [], function() {
        v = l.forEach;
        p = l.isArray;
        q = l.isString;
        x = l.element;
    }).info({
        angularVersion: "1.6.4"
    }).directive("ngMessages", [ "$animate", function(t) {
        function u(a, c) {
            return q(c) && 0 === c.length || n(a.$eval(c));
        }
        function n(a) {
            return q(a) ? a.length : !!a;
        }
        return {
            require: "ngMessages",
            restrict: "AE",
            controller: [ "$element", "$scope", "$attrs", function(a, c, f) {
                function e(a, c) {
                    for (var b = c, d = []; b && b !== a; ) {
                        var h = b.$$ngMessageNode;
                        if (h && h.length) return g[h];
                        b.childNodes.length && -1 === d.indexOf(b) ? (d.push(b), b = b.childNodes[b.childNodes.length - 1]) : b.previousSibling ? b = b.previousSibling : (b = b.parentNode, 
                        d.push(b));
                    }
                }
                var d = this, r = 0, k = 0;
                this.getAttachId = function() {
                    return k++;
                };
                var g = this.messages = {}, s, l;
                this.render = function(m) {
                    m = m || {};
                    s = !1;
                    l = m;
                    for (var g = u(c, f.ngMessagesMultiple) || u(c, f.multiple), b = [], e = {}, h = d.head, r = !1, k = 0; null != h; ) {
                        k++;
                        var q = h.message, p = !1;
                        r || v(m, function(a, b) {
                            !p && n(a) && q.test(b) && !e[b] && (p = e[b] = !0, q.attach());
                        });
                        p ? r = !g : b.push(q);
                        h = h.next;
                    }
                    v(b, function(a) {
                        a.detach();
                    });
                    b.length !== k ? t.setClass(a, "ng-active", "ng-inactive") : t.setClass(a, "ng-inactive", "ng-active");
                };
                c.$watchCollection(f.ngMessages || f["for"], d.render);
                a.on("$destroy", function() {
                    v(g, function(a) {
                        a.message.detach();
                    });
                });
                this.reRender = function() {
                    s || (s = !0, c.$evalAsync(function() {
                        s && l && d.render(l);
                    }));
                };
                this.register = function(c, f) {
                    var b = r.toString();
                    g[b] = {
                        message: f
                    };
                    var k = a[0], h = g[b];
                    d.head ? (k = e(k, c)) ? (h.next = k.next, k.next = h) : (h.next = d.head, d.head = h) : d.head = h;
                    c.$$ngMessageNode = b;
                    r++;
                    d.reRender();
                };
                this.deregister = function(c) {
                    var f = c.$$ngMessageNode;
                    delete c.$$ngMessageNode;
                    var b = g[f];
                    (c = e(a[0], c)) ? c.next = b.next : d.head = b.next;
                    delete g[f];
                    d.reRender();
                };
            } ]
        };
    } ]).directive("ngMessagesInclude", [ "$templateRequest", "$document", "$compile", function(l, p, n) {
        function a(a, f) {
            var e = n.$$createComment ? n.$$createComment("ngMessagesInclude", f) : p[0].createComment(" ngMessagesInclude: " + f + " "), e = x(e);
            a.after(e);
            a.remove();
        }
        return {
            restrict: "AE",
            require: "^^ngMessages",
            link: function(c, f, e) {
                var d = e.ngMessagesInclude || e.src;
                l(d).then(function(e) {
                    c.$$destroyed || (q(e) && !e.trim() ? a(f, d) : n(e)(c, function(c) {
                        f.after(c);
                        a(f, d);
                    }));
                });
            }
        };
    } ]).directive("ngMessage", w()).directive("ngMessageExp", w());
})(window, window.angular);

angular.module("cgNotify", []).factory("notify", [ "$timeout", "$http", "$compile", "$templateCache", "$rootScope", function(a, b, c, d, e) {
    var f = 10, g = 15, h = 1e4, i = "angular-notify.html", j = "center", k = document.body, l = 0, m = [], n = [], o = function(o) {
        "object" != typeof o && (o = {
            message: o
        }), o.duration = o.duration ? o.duration : h, o.templateUrl = o.templateUrl ? o.templateUrl : i, 
        o.container = o.container ? o.container : k, o.classes = o.classes ? o.classes : "";
        var p = o.scope ? o.scope.$new() : e.$new();
        if (p.$position = o.position ? o.position : j, p.$message = o.message, p.$classes = o.classes, 
        p.$messageTemplate = o.messageTemplate, l > 0) for (var q = n.length + 1 - l, r = 0; q > r; r++) n[r].$close();
        b.get(o.templateUrl, {
            cache: d
        }).success(function(b) {
            var d = c(b)(p);
            if (d.bind("webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd", function(a) {
                ("opacity" === a.propertyName || 0 === a.currentTarget.style.opacity || a.originalEvent && "opacity" === a.originalEvent.propertyName) && (d.remove(), 
                m.splice(m.indexOf(d), 1), n.splice(n.indexOf(p), 1), i());
            }), o.messageTemplate) {
                for (var e, h = 0; h < d.children().length; h++) if (angular.element(d.children()[h]).hasClass("cg-notify-message-template")) {
                    e = angular.element(d.children()[h]);
                    break;
                }
                if (!e) throw new Error("cgNotify could not find the .cg-notify-message-template element in " + o.templateUrl + ".");
                e.append(c(o.messageTemplate)(p));
            }
            angular.element(o.container).append(d), m.push(d), "center" === p.$position && a(function() {
                p.$centerMargin = "-" + d[0].offsetWidth / 2 + "px";
            }), p.$close = function() {
                d.css("opacity", 0).attr("data-closing", "true"), i();
            };
            var i = function() {
                for (var a = 0, b = f, c = m.length - 1; c >= 0; c--) {
                    var d = 10, e = m[c], h = e[0].offsetHeight, i = b + h + d;
                    e.attr("data-closing") ? i += 20 : b += h + g, e.css("top", i + "px").css("margin-top", "-" + (h + d) + "px").css("visibility", "visible"), 
                    a++;
                }
            };
            a(function() {
                i();
            }), o.duration > 0 && a(function() {
                p.$close();
            }, o.duration);
        }).error(function(a) {
            throw new Error("Template specified for cgNotify (" + o.templateUrl + ") could not be loaded. " + a);
        });
        var s = {};
        return s.close = function() {
            p.$close && p.$close();
        }, Object.defineProperty(s, "message", {
            get: function() {
                return p.$message;
            },
            set: function(a) {
                p.$message = a;
            }
        }), n.push(p), s;
    };
    return o.config = function(a) {
        f = angular.isUndefined(a.startTop) ? f : a.startTop, g = angular.isUndefined(a.verticalSpacing) ? g : a.verticalSpacing, 
        h = angular.isUndefined(a.duration) ? h : a.duration, i = a.templateUrl ? a.templateUrl : i, 
        j = angular.isUndefined(a.position) ? j : a.position, k = a.container ? a.container : k, 
        l = a.maximumOpen ? a.maximumOpen : l;
    }, o.closeAll = function() {
        for (var a = m.length - 1; a >= 0; a--) {
            var b = m[a];
            b.css("opacity", 0);
        }
    }, o;
} ]), angular.module("cgNotify").run([ "$templateCache", function(a) {
    "use strict";
    a.put("angular-notify.html", "<div class=\"cg-notify-message\" ng-class=\"[$classes, \n    $position === 'center' ? 'cg-notify-message-center' : '',\n    $position === 'left' ? 'cg-notify-message-left' : '',\n    $position === 'right' ? 'cg-notify-message-right' : '']\"\n    ng-style=\"{'margin-left': $centerMargin}\">\n\n    <div ng-show=\"!$messageTemplate\">\n        {{$message}}\n    </div>\n\n" + '    <div ng-show="$messageTemplate" class="cg-notify-message-template">\n        \n    </div>\n\n    <button type="button" class="cg-notify-close" ng-click="$close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="cg-notify-sr-only">Close</span>\n    </button>\n\n</div>');
} ]);

(function(ng, undefined) {
    "use strict";
    ng.module("smart-table", []).run([ "$templateCache", function($templateCache) {
        $templateCache.put("template/smart-table/pagination.html", '<nav ng-if="numPages && pages.length >= 2"><ul class="pagination">' + '<li ng-repeat="page in pages" ng-class="{active: page==currentPage}"><a href="javascript: void(0);" ng-click="selectPage(page)">{{page}}</a></li>' + "</ul></nav>");
    } ]);
    ng.module("smart-table").constant("stConfig", {
        pagination: {
            template: "template/smart-table/pagination.html",
            itemsByPage: 10,
            displayedPages: 5
        },
        search: {
            delay: 400,
            inputEvent: "input"
        },
        select: {
            mode: "single",
            selectedClass: "st-selected"
        },
        sort: {
            ascentClass: "st-sort-ascent",
            descentClass: "st-sort-descent",
            descendingFirst: false,
            skipNatural: false,
            delay: 300
        },
        pipe: {
            delay: 100
        }
    });
    ng.module("smart-table").controller("stTableController", [ "$scope", "$parse", "$filter", "$attrs", function StTableController($scope, $parse, $filter, $attrs) {
        var propertyName = $attrs.stTable;
        var displayGetter = $parse(propertyName);
        var displaySetter = displayGetter.assign;
        var safeGetter;
        var orderBy = $filter("orderBy");
        var filter = $filter("filter");
        var safeCopy = copyRefs(displayGetter($scope));
        var tableState = {
            sort: {},
            search: {},
            pagination: {
                start: 0,
                totalItemCount: 0
            }
        };
        var filtered;
        var pipeAfterSafeCopy = true;
        var ctrl = this;
        var lastSelected;
        function copyRefs(src) {
            return src ? [].concat(src) : [];
        }
        function updateSafeCopy() {
            safeCopy = copyRefs(safeGetter($scope));
            if (pipeAfterSafeCopy === true) {
                ctrl.pipe();
            }
        }
        function deepDelete(object, path) {
            if (path.indexOf(".") != -1) {
                var partials = path.split(".");
                var key = partials.pop();
                var parentPath = partials.join(".");
                var parentObject = $parse(parentPath)(object);
                delete parentObject[key];
                if (Object.keys(parentObject).length == 0) {
                    deepDelete(object, parentPath);
                }
            } else {
                delete object[path];
            }
        }
        if ($attrs.stSafeSrc) {
            safeGetter = $parse($attrs.stSafeSrc);
            $scope.$watch(function() {
                var safeSrc = safeGetter($scope);
                return safeSrc && safeSrc.length ? safeSrc[0] : undefined;
            }, function(newValue, oldValue) {
                if (newValue !== oldValue) {
                    updateSafeCopy();
                }
            });
            $scope.$watch(function() {
                var safeSrc = safeGetter($scope);
                return safeSrc ? safeSrc.length : 0;
            }, function(newValue, oldValue) {
                if (newValue !== safeCopy.length) {
                    updateSafeCopy();
                }
            });
            $scope.$watch(function() {
                return safeGetter($scope);
            }, function(newValue, oldValue) {
                if (newValue !== oldValue) {
                    tableState.pagination.start = 0;
                    updateSafeCopy();
                }
            });
        }
        this.sortBy = function sortBy(predicate, reverse) {
            tableState.sort.predicate = predicate;
            tableState.sort.reverse = reverse === true;
            if (ng.isFunction(predicate)) {
                tableState.sort.functionName = predicate.name;
            } else {
                delete tableState.sort.functionName;
            }
            tableState.pagination.start = 0;
            return this.pipe();
        };
        this.search = function search(input, predicate) {
            var predicateObject = tableState.search.predicateObject || {};
            var prop = predicate ? predicate : "$";
            input = ng.isString(input) ? input.trim() : input;
            $parse(prop).assign(predicateObject, input);
            if (!input) {
                deepDelete(predicateObject, prop);
            }
            tableState.search.predicateObject = predicateObject;
            tableState.pagination.start = 0;
            return this.pipe();
        };
        this.pipe = function pipe() {
            var pagination = tableState.pagination;
            var output;
            filtered = tableState.search.predicateObject ? filter(safeCopy, tableState.search.predicateObject) : safeCopy;
            if (tableState.sort.predicate) {
                filtered = orderBy(filtered, tableState.sort.predicate, tableState.sort.reverse);
            }
            pagination.totalItemCount = filtered.length;
            if (pagination.number !== undefined) {
                pagination.numberOfPages = filtered.length > 0 ? Math.ceil(filtered.length / pagination.number) : 1;
                pagination.start = pagination.start >= filtered.length ? (pagination.numberOfPages - 1) * pagination.number : pagination.start;
                output = filtered.slice(pagination.start, pagination.start + parseInt(pagination.number));
            }
            displaySetter($scope, output || filtered);
        };
        this.select = function select(row, mode) {
            var rows = copyRefs(displayGetter($scope));
            var index = rows.indexOf(row);
            if (index !== -1) {
                if (mode === "single") {
                    row.isSelected = row.isSelected !== true;
                    if (lastSelected) {
                        lastSelected.isSelected = false;
                    }
                    lastSelected = row.isSelected === true ? row : undefined;
                } else {
                    rows[index].isSelected = !rows[index].isSelected;
                }
            }
        };
        this.slice = function splice(start, number) {
            tableState.pagination.start = start;
            tableState.pagination.number = number;
            return this.pipe();
        };
        this.tableState = function getTableState() {
            return tableState;
        };
        this.getFilteredCollection = function getFilteredCollection() {
            return filtered || safeCopy;
        };
        this.setFilterFunction = function setFilterFunction(filterName) {
            filter = $filter(filterName);
        };
        this.setSortFunction = function setSortFunction(sortFunctionName) {
            orderBy = $filter(sortFunctionName);
        };
        this.preventPipeOnWatch = function preventPipe() {
            pipeAfterSafeCopy = false;
        };
    } ]).directive("stTable", function() {
        return {
            restrict: "A",
            controller: "stTableController",
            link: function(scope, element, attr, ctrl) {
                if (attr.stSetFilter) {
                    ctrl.setFilterFunction(attr.stSetFilter);
                }
                if (attr.stSetSort) {
                    ctrl.setSortFunction(attr.stSetSort);
                }
            }
        };
    });
    ng.module("smart-table").directive("stSearch", [ "stConfig", "$timeout", "$parse", function(stConfig, $timeout, $parse) {
        return {
            require: "^stTable",
            link: function(scope, element, attr, ctrl) {
                var tableCtrl = ctrl;
                var promise = null;
                var throttle = attr.stDelay || stConfig.search.delay;
                var event = attr.stInputEvent || stConfig.search.inputEvent;
                attr.$observe("stSearch", function(newValue, oldValue) {
                    var input = element[0].value;
                    if (newValue !== oldValue && input) {
                        ctrl.tableState().search = {};
                        tableCtrl.search(input, newValue);
                    }
                });
                scope.$watch(function() {
                    return ctrl.tableState().search;
                }, function(newValue, oldValue) {
                    var predicateExpression = attr.stSearch || "$";
                    if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {
                        element[0].value = $parse(predicateExpression)(newValue.predicateObject) || "";
                    }
                }, true);
                element.bind(event, function(evt) {
                    evt = evt.originalEvent || evt;
                    if (promise !== null) {
                        $timeout.cancel(promise);
                    }
                    promise = $timeout(function() {
                        tableCtrl.search(evt.target.value, attr.stSearch || "");
                        promise = null;
                    }, throttle);
                });
            }
        };
    } ]);
    ng.module("smart-table").directive("stSelectRow", [ "stConfig", function(stConfig) {
        return {
            restrict: "A",
            require: "^stTable",
            scope: {
                row: "=stSelectRow"
            },
            link: function(scope, element, attr, ctrl) {
                var mode = attr.stSelectMode || stConfig.select.mode;
                element.bind("click", function() {
                    scope.$apply(function() {
                        ctrl.select(scope.row, mode);
                    });
                });
                scope.$watch("row.isSelected", function(newValue) {
                    if (newValue === true) {
                        element.addClass(stConfig.select.selectedClass);
                    } else {
                        element.removeClass(stConfig.select.selectedClass);
                    }
                });
            }
        };
    } ]);
    ng.module("smart-table").directive("stSort", [ "stConfig", "$parse", "$timeout", function(stConfig, $parse, $timeout) {
        return {
            restrict: "A",
            require: "^stTable",
            link: function(scope, element, attr, ctrl) {
                var predicate = attr.stSort;
                var getter = $parse(predicate);
                var index = 0;
                var classAscent = attr.stClassAscent || stConfig.sort.ascentClass;
                var classDescent = attr.stClassDescent || stConfig.sort.descentClass;
                var stateClasses = [ classAscent, classDescent ];
                var sortDefault;
                var skipNatural = attr.stSkipNatural !== undefined ? attr.stSkipNatural : stConfig.sort.skipNatural;
                var descendingFirst = attr.stDescendingFirst !== undefined ? attr.stDescendingFirst : stConfig.sort.descendingFirst;
                var promise = null;
                var throttle = attr.stDelay || stConfig.sort.delay;
                if (attr.stSortDefault) {
                    sortDefault = scope.$eval(attr.stSortDefault) !== undefined ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;
                }
                function sort() {
                    if (descendingFirst) {
                        index = index === 0 ? 2 : index - 1;
                    } else {
                        index++;
                    }
                    var func;
                    predicate = ng.isFunction(getter(scope)) || ng.isArray(getter(scope)) ? getter(scope) : attr.stSort;
                    if (index % 3 === 0 && !!skipNatural !== true) {
                        index = 0;
                        ctrl.tableState().sort = {};
                        ctrl.tableState().pagination.start = 0;
                        func = ctrl.pipe.bind(ctrl);
                    } else {
                        func = ctrl.sortBy.bind(ctrl, predicate, index % 2 === 0);
                    }
                    if (promise !== null) {
                        $timeout.cancel(promise);
                    }
                    if (throttle < 0) {
                        func();
                    } else {
                        promise = $timeout(func, throttle);
                    }
                }
                element.bind("click", function sortClick() {
                    if (predicate) {
                        scope.$apply(sort);
                    }
                });
                if (sortDefault) {
                    index = sortDefault === "reverse" ? 1 : 0;
                    sort();
                }
                scope.$watch(function() {
                    return ctrl.tableState().sort;
                }, function(newValue) {
                    if (newValue.predicate !== predicate) {
                        index = 0;
                        element.removeClass(classAscent).removeClass(classDescent);
                    } else {
                        index = newValue.reverse === true ? 2 : 1;
                        element.removeClass(stateClasses[index % 2]).addClass(stateClasses[index - 1]);
                    }
                }, true);
            }
        };
    } ]);
    ng.module("smart-table").directive("stPagination", [ "stConfig", function(stConfig) {
        return {
            restrict: "EA",
            require: "^stTable",
            scope: {
                stItemsByPage: "=?",
                stDisplayedPages: "=?",
                stPageChange: "&"
            },
            templateUrl: function(element, attrs) {
                if (attrs.stTemplate) {
                    return attrs.stTemplate;
                }
                return stConfig.pagination.template;
            },
            link: function(scope, element, attrs, ctrl) {
                scope.stItemsByPage = scope.stItemsByPage ? +scope.stItemsByPage : stConfig.pagination.itemsByPage;
                scope.stDisplayedPages = scope.stDisplayedPages ? +scope.stDisplayedPages : stConfig.pagination.displayedPages;
                scope.currentPage = 1;
                scope.pages = [];
                function redraw() {
                    var paginationState = ctrl.tableState().pagination;
                    var start = 1;
                    var end;
                    var i;
                    var prevPage = scope.currentPage;
                    scope.totalItemCount = paginationState.totalItemCount;
                    scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;
                    start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));
                    end = start + scope.stDisplayedPages;
                    if (end > paginationState.numberOfPages) {
                        end = paginationState.numberOfPages + 1;
                        start = Math.max(1, end - scope.stDisplayedPages);
                    }
                    scope.pages = [];
                    scope.numPages = paginationState.numberOfPages;
                    for (i = start; i < end; i++) {
                        scope.pages.push(i);
                    }
                    if (prevPage !== scope.currentPage) {
                        scope.stPageChange({
                            newPage: scope.currentPage
                        });
                    }
                }
                scope.$watch(function() {
                    return ctrl.tableState().pagination;
                }, redraw, true);
                scope.$watch("stItemsByPage", function(newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scope.selectPage(1);
                    }
                });
                scope.$watch("stDisplayedPages", redraw);
                scope.selectPage = function(page) {
                    if (page > 0 && page <= scope.numPages) {
                        ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);
                    }
                };
                if (!ctrl.tableState().pagination.number) {
                    ctrl.slice(0, scope.stItemsByPage);
                }
            }
        };
    } ]);
    ng.module("smart-table").directive("stPipe", [ "stConfig", "$timeout", function(config, $timeout) {
        return {
            require: "stTable",
            scope: {
                stPipe: "="
            },
            link: {
                pre: function(scope, element, attrs, ctrl) {
                    var pipePromise = null;
                    if (ng.isFunction(scope.stPipe)) {
                        ctrl.preventPipeOnWatch();
                        ctrl.pipe = function() {
                            if (pipePromise !== null) {
                                $timeout.cancel(pipePromise);
                            }
                            pipePromise = $timeout(function() {
                                scope.stPipe(ctrl.tableState(), ctrl);
                            }, config.pipe.delay);
                            return pipePromise;
                        };
                    }
                },
                post: function(scope, element, attrs, ctrl) {
                    ctrl.pipe();
                }
            }
        };
    } ]);
})(angular);

(function(window, angular) {
    "use strict";
    var $sanitizeMinErr = angular.$$minErr("$sanitize");
    var bind;
    var extend;
    var forEach;
    var isDefined;
    var lowercase;
    var noop;
    var nodeContains;
    var htmlParser;
    var htmlSanitizeWriter;
    function $SanitizeProvider() {
        var svgEnabled = false;
        this.$get = [ "$$sanitizeUri", function($$sanitizeUri) {
            if (svgEnabled) {
                extend(validElements, svgElements);
            }
            return function(html) {
                var buf = [];
                htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
                    return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
                }));
                return buf.join("");
            };
        } ];
        this.enableSvg = function(enableSvg) {
            if (isDefined(enableSvg)) {
                svgEnabled = enableSvg;
                return this;
            } else {
                return svgEnabled;
            }
        };
        bind = angular.bind;
        extend = angular.extend;
        forEach = angular.forEach;
        isDefined = angular.isDefined;
        lowercase = angular.lowercase;
        noop = angular.noop;
        htmlParser = htmlParserImpl;
        htmlSanitizeWriter = htmlSanitizeWriterImpl;
        nodeContains = window.Node.prototype.contains || function(arg) {
            return !!(this.compareDocumentPosition(arg) & 16);
        };
        var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;
        var voidElements = toMap("area,br,col,hr,img,wbr");
        var optionalEndTagBlockElements = toMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"), optionalEndTagInlineElements = toMap("rp,rt"), optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);
        var blockElements = extend({}, optionalEndTagBlockElements, toMap("address,article," + "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," + "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul"));
        var inlineElements = extend({}, optionalEndTagInlineElements, toMap("a,abbr,acronym,b," + "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," + "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
        var svgElements = toMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," + "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," + "radialGradient,rect,stop,svg,switch,text,title,tspan");
        var blockedElements = toMap("script,style");
        var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);
        var uriAttrs = toMap("background,cite,href,longdesc,src,xlink:href");
        var htmlAttrs = toMap("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear," + "color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace," + "ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules," + "scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type," + "valign,value,vspace,width");
        var svgAttrs = toMap("accent-height,accumulate,additive,alphabetic,arabic-form,ascent," + "baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content," + "cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch," + "font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging," + "height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang," + "marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical," + "max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1," + "path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur," + "requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color," + "stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray," + "stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity," + "stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position," + "underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility," + "width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title," + "xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan", true);
        var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);
        function toMap(str, lowercaseKeys) {
            var obj = {}, items = str.split(","), i;
            for (i = 0; i < items.length; i++) {
                obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
            }
            return obj;
        }
        var inertBodyElement;
        (function(window) {
            var doc;
            if (window.document && window.document.implementation) {
                doc = window.document.implementation.createHTMLDocument("inert");
            } else {
                throw $sanitizeMinErr("noinert", "Can't create an inert html document");
            }
            var docElement = doc.documentElement || doc.getDocumentElement();
            var bodyElements = docElement.getElementsByTagName("body");
            if (bodyElements.length === 1) {
                inertBodyElement = bodyElements[0];
            } else {
                var html = doc.createElement("html");
                inertBodyElement = doc.createElement("body");
                html.appendChild(inertBodyElement);
                doc.appendChild(html);
            }
        })(window);
        function htmlParserImpl(html, handler) {
            if (html === null || html === undefined) {
                html = "";
            } else if (typeof html !== "string") {
                html = "" + html;
            }
            inertBodyElement.innerHTML = html;
            var mXSSAttempts = 5;
            do {
                if (mXSSAttempts === 0) {
                    throw $sanitizeMinErr("uinput", "Failed to sanitize html because the input is unstable");
                }
                mXSSAttempts--;
                if (window.document.documentMode) {
                    stripCustomNsAttrs(inertBodyElement);
                }
                html = inertBodyElement.innerHTML;
                inertBodyElement.innerHTML = html;
            } while (html !== inertBodyElement.innerHTML);
            var node = inertBodyElement.firstChild;
            while (node) {
                switch (node.nodeType) {
                  case 1:
                    handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
                    break;

                  case 3:
                    handler.chars(node.textContent);
                    break;
                }
                var nextNode;
                if (!(nextNode = node.firstChild)) {
                    if (node.nodeType === 1) {
                        handler.end(node.nodeName.toLowerCase());
                    }
                    nextNode = getNonDescendant("nextSibling", node);
                    if (!nextNode) {
                        while (nextNode == null) {
                            node = getNonDescendant("parentNode", node);
                            if (node === inertBodyElement) break;
                            nextNode = getNonDescendant("nextSibling", node);
                            if (node.nodeType === 1) {
                                handler.end(node.nodeName.toLowerCase());
                            }
                        }
                    }
                }
                node = nextNode;
            }
            while (node = inertBodyElement.firstChild) {
                inertBodyElement.removeChild(node);
            }
        }
        function attrToMap(attrs) {
            var map = {};
            for (var i = 0, ii = attrs.length; i < ii; i++) {
                var attr = attrs[i];
                map[attr.name] = attr.value;
            }
            return map;
        }
        function encodeEntities(value) {
            return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(value) {
                var hi = value.charCodeAt(0);
                var low = value.charCodeAt(1);
                return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
            }).replace(NON_ALPHANUMERIC_REGEXP, function(value) {
                return "&#" + value.charCodeAt(0) + ";";
            }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }
        function htmlSanitizeWriterImpl(buf, uriValidator) {
            var ignoreCurrentElement = false;
            var out = bind(buf, buf.push);
            return {
                start: function(tag, attrs) {
                    tag = lowercase(tag);
                    if (!ignoreCurrentElement && blockedElements[tag]) {
                        ignoreCurrentElement = tag;
                    }
                    if (!ignoreCurrentElement && validElements[tag] === true) {
                        out("<");
                        out(tag);
                        forEach(attrs, function(value, key) {
                            var lkey = lowercase(key);
                            var isImage = tag === "img" && lkey === "src" || lkey === "background";
                            if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
                                out(" ");
                                out(key);
                                out('="');
                                out(encodeEntities(value));
                                out('"');
                            }
                        });
                        out(">");
                    }
                },
                end: function(tag) {
                    tag = lowercase(tag);
                    if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
                        out("</");
                        out(tag);
                        out(">");
                    }
                    if (tag == ignoreCurrentElement) {
                        ignoreCurrentElement = false;
                    }
                },
                chars: function(chars) {
                    if (!ignoreCurrentElement) {
                        out(encodeEntities(chars));
                    }
                }
            };
        }
        function stripCustomNsAttrs(node) {
            while (node) {
                if (node.nodeType === window.Node.ELEMENT_NODE) {
                    var attrs = node.attributes;
                    for (var i = 0, l = attrs.length; i < l; i++) {
                        var attrNode = attrs[i];
                        var attrName = attrNode.name.toLowerCase();
                        if (attrName === "xmlns:ns1" || attrName.lastIndexOf("ns1:", 0) === 0) {
                            node.removeAttributeNode(attrNode);
                            i--;
                            l--;
                        }
                    }
                }
                var nextNode = node.firstChild;
                if (nextNode) {
                    stripCustomNsAttrs(nextNode);
                }
                node = getNonDescendant("nextSibling", node);
            }
        }
        function getNonDescendant(propName, node) {
            var nextNode = node[propName];
            if (nextNode && nodeContains.call(node, nextNode)) {
                throw $sanitizeMinErr("elclob", "Failed to sanitize html because the element is clobbered: {0}", node.outerHTML || node.outerText);
            }
            return nextNode;
        }
    }
    function sanitizeText(chars) {
        var buf = [];
        var writer = htmlSanitizeWriter(buf, noop);
        writer.chars(chars);
        return buf.join("");
    }
    angular.module("ngSanitize", []).provider("$sanitize", $SanitizeProvider).info({
        angularVersion: "1.6.4"
    });
    angular.module("ngSanitize").filter("linky", [ "$sanitize", function($sanitize) {
        var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i, MAILTO_REGEXP = /^mailto:/i;
        var linkyMinErr = angular.$$minErr("linky");
        var isDefined = angular.isDefined;
        var isFunction = angular.isFunction;
        var isObject = angular.isObject;
        var isString = angular.isString;
        return function(text, target, attributes) {
            if (text == null || text === "") return text;
            if (!isString(text)) throw linkyMinErr("notstring", "Expected string but received: {0}", text);
            var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
                return attributes;
            } : function getEmptyAttributesObject() {
                return {};
            };
            var match;
            var raw = text;
            var html = [];
            var url;
            var i;
            while (match = raw.match(LINKY_URL_REGEXP)) {
                url = match[0];
                if (!match[2] && !match[4]) {
                    url = (match[3] ? "http://" : "mailto:") + url;
                }
                i = match.index;
                addText(raw.substr(0, i));
                addLink(url, match[0].replace(MAILTO_REGEXP, ""));
                raw = raw.substring(i + match[0].length);
            }
            addText(raw);
            return $sanitize(html.join(""));
            function addText(text) {
                if (!text) {
                    return;
                }
                html.push(sanitizeText(text));
            }
            function addLink(url, text) {
                var key, linkAttributes = attributesFn(url);
                html.push("<a ");
                for (key in linkAttributes) {
                    html.push(key + '="' + linkAttributes[key] + '" ');
                }
                if (isDefined(target) && !("target" in linkAttributes)) {
                    html.push('target="', target, '" ');
                }
                html.push('href="', url.replace(/"/g, "&quot;"), '">');
                addText(text);
                html.push("</a>");
            }
        };
    } ]);
})(window, window.angular);

!function() {
    "use strict";
    angular.module("ui.mask", []).value("uiMaskConfig", {
        maskDefinitions: {
            9: /\d/,
            A: /[a-zA-Z]/,
            "*": /[a-zA-Z0-9]/
        },
        clearOnBlur: !0,
        clearOnBlurPlaceholder: !1,
        escChar: "\\",
        eventsToHandle: [ "input", "keyup", "click", "focus" ],
        addDefaultPlaceholder: !0,
        allowInvalidValue: !1
    }).provider("uiMask.Config", function() {
        var e = {};
        this.maskDefinitions = function(n) {
            return e.maskDefinitions = n;
        }, this.clearOnBlur = function(n) {
            return e.clearOnBlur = n;
        }, this.clearOnBlurPlaceholder = function(n) {
            return e.clearOnBlurPlaceholder = n;
        }, this.eventsToHandle = function(n) {
            return e.eventsToHandle = n;
        }, this.addDefaultPlaceholder = function(n) {
            return e.addDefaultPlaceholder = n;
        }, this.allowInvalidValue = function(n) {
            return e.allowInvalidValue = n;
        }, this.$get = [ "uiMaskConfig", function(n) {
            var t = n;
            for (var a in e) angular.isObject(e[a]) && !angular.isArray(e[a]) ? angular.extend(t[a], e[a]) : t[a] = e[a];
            return t;
        } ];
    }).directive("uiMask", [ "uiMask.Config", function(e) {
        function n(e) {
            return e === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
        }
        return {
            priority: 100,
            require: "ngModel",
            restrict: "A",
            compile: function() {
                var t = angular.copy(e);
                return function(e, a, i, r) {
                    function l(e) {
                        return angular.isDefined(e) ? (w(e), L ? (h(), d(), !0) : f()) : f();
                    }
                    function u(e) {
                        e && (B = e, !L || 0 === a.val().length && angular.isDefined(i.placeholder) || a.val(m(p(a.val()))));
                    }
                    function o() {
                        return l(i.uiMask);
                    }
                    function c(e) {
                        return L ? (j = p(e || ""), R = g(j), r.$setValidity("mask", R), j.length && (R || Q.allowInvalidValue) ? m(j) : void 0) : e;
                    }
                    function s(e) {
                        return L ? (j = p(e || ""), R = g(j), r.$viewValue = j.length ? m(j) : "", r.$setValidity("mask", R), 
                        R || Q.allowInvalidValue ? J ? r.$viewValue : j : void 0) : e;
                    }
                    function f() {
                        return L = !1, v(), angular.isDefined(q) ? a.attr("placeholder", q) : a.removeAttr("placeholder"), 
                        angular.isDefined(W) ? a.attr("maxlength", W) : a.removeAttr("maxlength"), a.val(r.$modelValue), 
                        r.$viewValue = r.$modelValue, !1;
                    }
                    function h() {
                        j = F = p(r.$modelValue || ""), H = _ = m(j), R = g(j), i.maxlength && a.attr("maxlength", 2 * S[S.length - 1]), 
                        !q && Q.addDefaultPlaceholder && a.attr("placeholder", B);
                        for (var e = r.$modelValue, n = r.$formatters.length; n--; ) e = r.$formatters[n](e);
                        r.$viewValue = e || "", r.$render();
                    }
                    function d() {
                        Z || (a.bind("blur", $), a.bind("mousedown mouseup", V), a.bind("keydown", E), a.bind(Q.eventsToHandle.join(" "), O), 
                        Z = !0);
                    }
                    function v() {
                        Z && (a.unbind("blur", $), a.unbind("mousedown", V), a.unbind("mouseup", V), a.unbind("keydown", E), 
                        a.unbind("input", O), a.unbind("keyup", O), a.unbind("click", O), a.unbind("focus", O), 
                        Z = !1);
                    }
                    function g(e) {
                        return e.length ? e.length >= T : !0;
                    }
                    function p(e) {
                        var n, t, i = "", r = a[0], l = A.slice(), u = N, o = u + C(r), c = "";
                        return e = e.toString(), n = 0, t = e.length - B.length, angular.forEach(I, function(a) {
                            var i = a.position;
                            i >= u && o > i || (i >= u && (i += t), e.substring(i, i + a.value.length) === a.value && (c += e.slice(n, i), 
                            n = i + a.value.length));
                        }), e = c + e.slice(n), angular.forEach(e.split(""), function(e) {
                            l.length && l[0].test(e) && (i += e, l.shift());
                        }), i;
                    }
                    function m(e) {
                        var n = "", t = S.slice();
                        return angular.forEach(B.split(""), function(a, i) {
                            e.length && i === t[0] ? (n += e.charAt(0) || "_", e = e.substr(1), t.shift()) : n += a;
                        }), n;
                    }
                    function b(e) {
                        var n, t = angular.isDefined(i.uiMaskPlaceholder) ? i.uiMaskPlaceholder : i.placeholder;
                        return angular.isDefined(t) && t[e] ? t[e] : (n = angular.isDefined(i.uiMaskPlaceholderChar) && i.uiMaskPlaceholderChar ? i.uiMaskPlaceholderChar : "_", 
                        "space" === n.toLowerCase() ? " " : n[0]);
                    }
                    function k() {
                        var e, n, t = B.split("");
                        S && !isNaN(S[0]) && angular.forEach(S, function(e) {
                            t[e] = "_";
                        }), e = t.join(""), n = e.replace(/[_]+/g, "_").split("_"), n = n.filter(function(e) {
                            return "" !== e;
                        });
                        var a = 0;
                        return n.map(function(n) {
                            var t = e.indexOf(n, a);
                            return a = t + 1, {
                                value: n,
                                position: t
                            };
                        });
                    }
                    function w(e) {
                        var n = 0;
                        if (S = [], A = [], B = "", angular.isString(e)) {
                            T = 0;
                            var t = !1, a = 0, i = e.split(""), r = !1;
                            angular.forEach(i, function(e, i) {
                                r ? (r = !1, B += e, n++) : Q.escChar === e ? r = !0 : Q.maskDefinitions[e] ? (S.push(n), 
                                B += b(i - a), A.push(Q.maskDefinitions[e]), n++, t || T++, t = !1) : "?" === e ? (t = !0, 
                                a++) : (B += e, n++);
                            });
                        }
                        S.push(S.slice().pop() + 1), I = k(), L = S.length > 1 ? !0 : !1;
                    }
                    function $() {
                        if ((Q.clearOnBlur || Q.clearOnBlurPlaceholder && 0 === j.length && i.placeholder) && (N = 0, 
                        z = 0, R && 0 !== j.length || (H = "", a.val(""), e.$apply(function() {
                            r.$pristine || r.$setViewValue("");
                        }))), j !== U) {
                            var n = a.val(), t = "" === j && n && angular.isDefined(i.uiMaskPlaceholderChar) && "space" === i.uiMaskPlaceholderChar;
                            t && a.val(""), y(a[0]), t && a.val(n);
                        }
                        U = j;
                    }
                    function y(e) {
                        var n;
                        angular.isFunction(window.Event) && !e.fireEvent ? (n = new Event("change", {
                            view: window,
                            bubbles: !0,
                            cancelable: !1
                        }), e.dispatchEvent(n)) : "createEvent" in document ? (n = document.createEvent("HTMLEvents"), 
                        n.initEvent("change", !1, !0), e.dispatchEvent(n)) : e.fireEvent && e.fireEvent("onchange");
                    }
                    function V(e) {
                        "mousedown" === e.type ? a.bind("mouseout", M) : a.unbind("mouseout", M);
                    }
                    function M() {
                        z = C(this), a.unbind("mouseout", M);
                    }
                    function E(e) {
                        var n = 8 === e.which, t = P(this) - 1 || 0, i = 90 === e.which && e.ctrlKey;
                        if (n) {
                            for (;t >= 0; ) {
                                if (D(t)) {
                                    x(this, t + 1);
                                    break;
                                }
                                t--;
                            }
                            K = -1 === t;
                        }
                        i && (a.val(""), e.preventDefault());
                    }
                    function O(n) {
                        n = n || {};
                        var t = n.which, i = n.type;
                        if (16 !== t && 91 !== t) {
                            var l, u = a.val(), o = _, c = !1, s = p(u), f = F, h = P(this) || 0, d = N || 0, v = h - d, g = S[0], b = S[s.length] || S.slice().shift(), k = z || 0, w = C(this) > 0, $ = k > 0, y = u.length > o.length || k && u.length > o.length - k, V = u.length < o.length || k && u.length === o.length - k, M = t >= 37 && 40 >= t && n.shiftKey, E = 37 === t, O = 8 === t || "keyup" !== i && V && -1 === v, A = 46 === t || "keyup" !== i && V && 0 === v && !$, I = (E || O || "click" === i) && h > g;
                            if (z = C(this), !M && (!w || "click" !== i && "keyup" !== i && "focus" !== i)) {
                                if (O && K) return a.val(B), e.$apply(function() {
                                    r.$setViewValue("");
                                }), void x(this, d);
                                if ("input" === i && V && !$ && s === f) {
                                    for (;O && h > g && !D(h); ) h--;
                                    for (;A && b > h && -1 === S.indexOf(h); ) h++;
                                    var T = S.indexOf(h);
                                    s = s.substring(0, T) + s.substring(T + 1), s !== f && (c = !0);
                                }
                                for (l = m(s), _ = l, F = s, !c && u.length > l.length && (c = !0), a.val(l), c && e.$apply(function() {
                                    r.$setViewValue(l);
                                }), y && g >= h && (h = g + 1), I && h--, h = h > b ? b : g > h ? g : h; !D(h) && h > g && b > h; ) h += I ? -1 : 1;
                                (I && b > h || y && !D(d)) && h++, N = h, x(this, h);
                            }
                        }
                    }
                    function D(e) {
                        return S.indexOf(e) > -1;
                    }
                    function P(e) {
                        if (!e) return 0;
                        if (void 0 !== e.selectionStart) return e.selectionStart;
                        if (document.selection && n(a[0])) {
                            e.focus();
                            var t = document.selection.createRange();
                            return t.moveStart("character", e.value ? -e.value.length : 0), t.text.length;
                        }
                        return 0;
                    }
                    function x(e, t) {
                        if (!e) return 0;
                        if (0 !== e.offsetWidth && 0 !== e.offsetHeight) if (e.setSelectionRange) n(a[0]) && (e.focus(), 
                        e.setSelectionRange(t, t)); else if (e.createTextRange) {
                            var i = e.createTextRange();
                            i.collapse(!0), i.moveEnd("character", t), i.moveStart("character", t), i.select();
                        }
                    }
                    function C(e) {
                        return e ? void 0 !== e.selectionStart ? e.selectionEnd - e.selectionStart : window.getSelection ? window.getSelection().toString().length : document.selection ? document.selection.createRange().text.length : 0 : 0;
                    }
                    var S, A, B, I, T, j, H, R, _, F, N, z, K, L = !1, Z = !1, q = i.placeholder, W = i.maxlength, G = r.$isEmpty;
                    r.$isEmpty = function(e) {
                        return G(L ? p(e || "") : e);
                    };
                    var J = !1;
                    i.$observe("modelViewValue", function(e) {
                        "true" === e && (J = !0);
                    }), i.$observe("allowInvalidValue", function(e) {
                        Q.allowInvalidValue = "" === e ? !0 : !!e, c(r.$modelValue);
                    });
                    var Q = {};
                    i.uiOptions ? (Q = e.$eval("[" + i.uiOptions + "]"), Q = angular.isObject(Q[0]) ? function(e, n) {
                        for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && (void 0 === n[t] ? n[t] = angular.copy(e[t]) : angular.isObject(n[t]) && !angular.isArray(n[t]) && (n[t] = angular.extend({}, e[t], n[t])));
                        return n;
                    }(t, Q[0]) : t) : Q = t, i.$observe("uiMask", l), angular.isDefined(i.uiMaskPlaceholder) ? i.$observe("uiMaskPlaceholder", u) : i.$observe("placeholder", u), 
                    angular.isDefined(i.uiMaskPlaceholderChar) && i.$observe("uiMaskPlaceholderChar", o), 
                    r.$formatters.unshift(c), r.$parsers.unshift(s);
                    var U = a.val();
                    a.bind("mousedown mouseup", V), Array.prototype.indexOf || (Array.prototype.indexOf = function(e) {
                        if (null === this) throw new TypeError();
                        var n = Object(this), t = n.length >>> 0;
                        if (0 === t) return -1;
                        var a = 0;
                        if (arguments.length > 1 && (a = Number(arguments[1]), a !== a ? a = 0 : 0 !== a && a !== 1 / 0 && a !== -(1 / 0) && (a = (a > 0 || -1) * Math.floor(Math.abs(a)))), 
                        a >= t) return -1;
                        for (var i = a >= 0 ? a : Math.max(t - Math.abs(a), 0); t > i; i++) if (i in n && n[i] === e) return i;
                        return -1;
                    });
                };
            }
        };
    } ]);
}();

angular.module("ngProgress.provider", [ "ngProgress.directive" ]).service("ngProgress", function() {
    "use strict";
    return [ "$document", "$window", "$compile", "$rootScope", "$timeout", function(a, b, c, d, e) {
        this.autoStyle = !0, this.count = 0, this.height = "2px", this.$scope = d.$new(), 
        this.color = "firebrick", this.parent = a.find("body")[0], this.count = 0, this.progressbarEl = c("<ng-progress></ng-progress>")(this.$scope), 
        this.parent.appendChild(this.progressbarEl[0]), this.$scope.count = this.count, 
        void 0 !== this.height && this.progressbarEl.eq(0).children().css("height", this.height), 
        void 0 !== this.color && (this.progressbarEl.eq(0).children().css("background-color", this.color), 
        this.progressbarEl.eq(0).children().css("color", this.color)), this.intervalCounterId = 0, 
        this.start = function() {
            this.show();
            var a = this;
            clearInterval(this.intervalCounterId), this.intervalCounterId = setInterval(function() {
                isNaN(a.count) ? (clearInterval(a.intervalCounterId), a.count = 0, a.hide()) : (a.remaining = 100 - a.count, 
                a.count = a.count + .15 * Math.pow(1 - Math.sqrt(a.remaining), 2), a.updateCount(a.count));
            }, 200);
        }, this.updateCount = function(a) {
            this.$scope.count = a, this.$scope.$$phase || this.$scope.$apply();
        }, this.setHeight = function(a) {
            return void 0 !== a && (this.height = a, this.$scope.height = this.height, this.$scope.$$phase || this.$scope.$apply()), 
            this.height;
        }, this.setColor = function(a) {
            return void 0 !== a && (this.color = a, this.$scope.color = this.color, this.$scope.$$phase || this.$scope.$apply()), 
            this.color;
        }, this.hide = function() {
            this.progressbarEl.children().css("opacity", "0");
            var a = this;
            a.animate(function() {
                a.progressbarEl.children().css("width", "0%"), a.animate(function() {
                    a.show();
                }, 500);
            }, 500);
        }, this.show = function() {
            var a = this;
            a.animate(function() {
                a.progressbarEl.children().css("opacity", "1");
            }, 100);
        }, this.animate = function(a, b) {
            void 0 !== this.animation && e.cancel(this.animation), this.animation = e(a, b);
        }, this.status = function() {
            return this.count;
        }, this.stop = function() {
            clearInterval(this.intervalCounterId);
        }, this.set = function(a) {
            return this.show(), this.updateCount(a), this.count = a, clearInterval(this.intervalCounterId), 
            this.count;
        }, this.css = function(a) {
            return this.progressbarEl.children().css(a);
        }, this.reset = function() {
            return clearInterval(this.intervalCounterId), this.count = 0, this.updateCount(this.count), 
            0;
        }, this.complete = function() {
            this.count = 100, this.updateCount(this.count);
            var a = this;
            return clearInterval(this.intervalCounterId), e(function() {
                a.hide(), e(function() {
                    a.count = 0, a.updateCount(a.count);
                }, 500);
            }, 1e3), this.count;
        }, this.setParent = function(a) {
            if (null === a || void 0 === a) throw new Error("Provide a valid parent of type HTMLElement");
            null !== this.parent && void 0 !== this.parent && this.parent.removeChild(this.progressbarEl[0]), 
            this.parent = a, this.parent.appendChild(this.progressbarEl[0]);
        }, this.getDomElement = function() {
            return this.progressbarEl;
        }, this.setAbsolute = function() {
            this.progressbarEl.css("position", "absolute");
        };
    } ];
}).factory("ngProgressFactory", [ "$injector", "ngProgress", function(a, b) {
    var c = {
        createInstance: function() {
            return a.instantiate(b);
        }
    };
    return c;
} ]), angular.module("ngProgress.directive", []).directive("ngProgress", [ "$window", "$rootScope", function(a, b) {
    var c = {
        replace: !0,
        restrict: "E",
        link: function(a, b, c, d) {
            a.$watch("count", function(c) {
                (void 0 !== c || null !== c) && (a.counter = c, b.eq(0).children().css("width", c + "%"));
            }), a.$watch("color", function(c) {
                (void 0 !== c || null !== c) && (a.color = c, b.eq(0).children().css("background-color", c), 
                b.eq(0).children().css("color", c));
            }), a.$watch("height", function(c) {
                (void 0 !== c || null !== c) && (a.height = c, b.eq(0).children().css("height", c));
            });
        },
        template: '<div id="ngProgress-container"><div id="ngProgress"></div></div>'
    };
    return c;
} ]), angular.module("ngProgress", [ "ngProgress.directive", "ngProgress.provider" ]);

!function() {
    "use strict";
    angular.module("base64", []).constant("$base64", function() {
        function a(a, b) {
            var c = f.indexOf(a.charAt(b));
            if (-1 == c) throw "Cannot decode base64";
            return c;
        }
        function b(b) {
            b = "" + b;
            var c, d, f, g = b.length;
            if (0 == g) return b;
            if (0 != g % 4) throw "Cannot decode base64";
            c = 0, b.charAt(g - 1) == e && (c = 1, b.charAt(g - 2) == e && (c = 2), g -= 4);
            var h = [];
            for (d = 0; g > d; d += 4) f = a(b, d) << 18 | a(b, d + 1) << 12 | a(b, d + 2) << 6 | a(b, d + 3), 
            h.push(String.fromCharCode(f >> 16, 255 & f >> 8, 255 & f));
            switch (c) {
              case 1:
                f = a(b, d) << 18 | a(b, d + 1) << 12 | a(b, d + 2) << 6, h.push(String.fromCharCode(f >> 16, 255 & f >> 8));
                break;

              case 2:
                f = a(b, d) << 18 | a(b, d + 1) << 12, h.push(String.fromCharCode(f >> 16));
            }
            return h.join("");
        }
        function c(a, b) {
            var c = a.charCodeAt(b);
            if (c > 255) throw "INVALID_CHARACTER_ERR: DOM Exception 5";
            return c;
        }
        function d(a) {
            if (1 != arguments.length) throw "SyntaxError: Not enough arguments";
            var b, d, g = [];
            a = "" + a;
            var h = a.length - a.length % 3;
            if (0 == a.length) return a;
            for (b = 0; h > b; b += 3) d = c(a, b) << 16 | c(a, b + 1) << 8 | c(a, b + 2), g.push(f.charAt(d >> 18)), 
            g.push(f.charAt(63 & d >> 12)), g.push(f.charAt(63 & d >> 6)), g.push(f.charAt(63 & d));
            switch (a.length - h) {
              case 1:
                d = c(a, b) << 16, g.push(f.charAt(d >> 18) + f.charAt(63 & d >> 12) + e + e);
                break;

              case 2:
                d = c(a, b) << 16 | c(a, b + 1) << 8, g.push(f.charAt(d >> 18) + f.charAt(63 & d >> 12) + f.charAt(63 & d >> 6) + e);
            }
            return g.join("");
        }
        var e = "=", f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        return {
            encode: d,
            decode: b
        };
    }());
}();

if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = "angular-md5";
}

!function(a) {
    a.module("angular-md5", [ "gdi2290.md5" ]), a.module("ngMd5", [ "gdi2290.md5" ]), 
    a.module("gdi2290.md5", [ "gdi2290.gravatar-filter", "gdi2290.md5-service", "gdi2290.md5-filter" ]), 
    a.module("gdi2290.gravatar-filter", []).filter("gravatar", [ "md5", function(a) {
        var b = {};
        return function(c, d) {
            return b[c] || (d = d ? a.createHash(d.toString().toLowerCase()) : "", b[c] = c ? a.createHash(c.toString().toLowerCase()) : d), 
            b[c];
        };
    } ]), a.module("gdi2290.md5-filter", []).filter("md5", [ "md5", function(a) {
        return function(b) {
            return b ? a.createHash(b.toString().toLowerCase()) : b;
        };
    } ]), a.module("gdi2290.md5-service", []).factory("md5", [ function() {
        var a = {
            createHash: function(a) {
                if (null === a) return null;
                var b, c, d, e, f, g, h, i, j, k, l = function(a, b) {
                    return a << b | a >>> 32 - b;
                }, m = function(a, b) {
                    var c, d, e, f, g;
                    return e = 2147483648 & a, f = 2147483648 & b, c = 1073741824 & a, d = 1073741824 & b, 
                    g = (1073741823 & a) + (1073741823 & b), c & d ? 2147483648 ^ g ^ e ^ f : c | d ? 1073741824 & g ? 3221225472 ^ g ^ e ^ f : 1073741824 ^ g ^ e ^ f : g ^ e ^ f;
                }, n = function(a, b, c) {
                    return a & b | ~a & c;
                }, o = function(a, b, c) {
                    return a & c | b & ~c;
                }, p = function(a, b, c) {
                    return a ^ b ^ c;
                }, q = function(a, b, c) {
                    return b ^ (a | ~c);
                }, r = function(a, b, c, d, e, f, g) {
                    return a = m(a, m(m(n(b, c, d), e), g)), m(l(a, f), b);
                }, s = function(a, b, c, d, e, f, g) {
                    return a = m(a, m(m(o(b, c, d), e), g)), m(l(a, f), b);
                }, t = function(a, b, c, d, e, f, g) {
                    return a = m(a, m(m(p(b, c, d), e), g)), m(l(a, f), b);
                }, u = function(a, b, c, d, e, f, g) {
                    return a = m(a, m(m(q(b, c, d), e), g)), m(l(a, f), b);
                }, v = function(a) {
                    for (var b, c = a.length, d = c + 8, e = (d - d % 64) / 64, f = 16 * (e + 1), g = new Array(f - 1), h = 0, i = 0; c > i; ) b = (i - i % 4) / 4, 
                    h = i % 4 * 8, g[b] = g[b] | a.charCodeAt(i) << h, i++;
                    return b = (i - i % 4) / 4, h = i % 4 * 8, g[b] = g[b] | 128 << h, g[f - 2] = c << 3, 
                    g[f - 1] = c >>> 29, g;
                }, w = function(a) {
                    var b, c, d = "", e = "";
                    for (c = 0; 3 >= c; c++) b = a >>> 8 * c & 255, e = "0" + b.toString(16), d += e.substr(e.length - 2, 2);
                    return d;
                }, x = [], y = 7, z = 12, A = 17, B = 22, C = 5, D = 9, E = 14, F = 20, G = 4, H = 11, I = 16, J = 23, K = 6, L = 10, M = 15, N = 21;
                for (x = v(a), h = 1732584193, i = 4023233417, j = 2562383102, k = 271733878, b = x.length, 
                c = 0; b > c; c += 16) d = h, e = i, f = j, g = k, h = r(h, i, j, k, x[c + 0], y, 3614090360), 
                k = r(k, h, i, j, x[c + 1], z, 3905402710), j = r(j, k, h, i, x[c + 2], A, 606105819), 
                i = r(i, j, k, h, x[c + 3], B, 3250441966), h = r(h, i, j, k, x[c + 4], y, 4118548399), 
                k = r(k, h, i, j, x[c + 5], z, 1200080426), j = r(j, k, h, i, x[c + 6], A, 2821735955), 
                i = r(i, j, k, h, x[c + 7], B, 4249261313), h = r(h, i, j, k, x[c + 8], y, 1770035416), 
                k = r(k, h, i, j, x[c + 9], z, 2336552879), j = r(j, k, h, i, x[c + 10], A, 4294925233), 
                i = r(i, j, k, h, x[c + 11], B, 2304563134), h = r(h, i, j, k, x[c + 12], y, 1804603682), 
                k = r(k, h, i, j, x[c + 13], z, 4254626195), j = r(j, k, h, i, x[c + 14], A, 2792965006), 
                i = r(i, j, k, h, x[c + 15], B, 1236535329), h = s(h, i, j, k, x[c + 1], C, 4129170786), 
                k = s(k, h, i, j, x[c + 6], D, 3225465664), j = s(j, k, h, i, x[c + 11], E, 643717713), 
                i = s(i, j, k, h, x[c + 0], F, 3921069994), h = s(h, i, j, k, x[c + 5], C, 3593408605), 
                k = s(k, h, i, j, x[c + 10], D, 38016083), j = s(j, k, h, i, x[c + 15], E, 3634488961), 
                i = s(i, j, k, h, x[c + 4], F, 3889429448), h = s(h, i, j, k, x[c + 9], C, 568446438), 
                k = s(k, h, i, j, x[c + 14], D, 3275163606), j = s(j, k, h, i, x[c + 3], E, 4107603335), 
                i = s(i, j, k, h, x[c + 8], F, 1163531501), h = s(h, i, j, k, x[c + 13], C, 2850285829), 
                k = s(k, h, i, j, x[c + 2], D, 4243563512), j = s(j, k, h, i, x[c + 7], E, 1735328473), 
                i = s(i, j, k, h, x[c + 12], F, 2368359562), h = t(h, i, j, k, x[c + 5], G, 4294588738), 
                k = t(k, h, i, j, x[c + 8], H, 2272392833), j = t(j, k, h, i, x[c + 11], I, 1839030562), 
                i = t(i, j, k, h, x[c + 14], J, 4259657740), h = t(h, i, j, k, x[c + 1], G, 2763975236), 
                k = t(k, h, i, j, x[c + 4], H, 1272893353), j = t(j, k, h, i, x[c + 7], I, 4139469664), 
                i = t(i, j, k, h, x[c + 10], J, 3200236656), h = t(h, i, j, k, x[c + 13], G, 681279174), 
                k = t(k, h, i, j, x[c + 0], H, 3936430074), j = t(j, k, h, i, x[c + 3], I, 3572445317), 
                i = t(i, j, k, h, x[c + 6], J, 76029189), h = t(h, i, j, k, x[c + 9], G, 3654602809), 
                k = t(k, h, i, j, x[c + 12], H, 3873151461), j = t(j, k, h, i, x[c + 15], I, 530742520), 
                i = t(i, j, k, h, x[c + 2], J, 3299628645), h = u(h, i, j, k, x[c + 0], K, 4096336452), 
                k = u(k, h, i, j, x[c + 7], L, 1126891415), j = u(j, k, h, i, x[c + 14], M, 2878612391), 
                i = u(i, j, k, h, x[c + 5], N, 4237533241), h = u(h, i, j, k, x[c + 12], K, 1700485571), 
                k = u(k, h, i, j, x[c + 3], L, 2399980690), j = u(j, k, h, i, x[c + 10], M, 4293915773), 
                i = u(i, j, k, h, x[c + 1], N, 2240044497), h = u(h, i, j, k, x[c + 8], K, 1873313359), 
                k = u(k, h, i, j, x[c + 15], L, 4264355552), j = u(j, k, h, i, x[c + 6], M, 2734768916), 
                i = u(i, j, k, h, x[c + 13], N, 1309151649), h = u(h, i, j, k, x[c + 4], K, 4149444226), 
                k = u(k, h, i, j, x[c + 11], L, 3174756917), j = u(j, k, h, i, x[c + 2], M, 718787259), 
                i = u(i, j, k, h, x[c + 9], N, 3951481745), h = m(h, d), i = m(i, e), j = m(j, f), 
                k = m(k, g);
                var O = w(h) + w(i) + w(j) + w(k);
                return O.toLowerCase();
            }
        };
        return a;
    } ]);
}(angular);